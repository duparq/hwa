
	;; -*- asm -*-

	;; u16 sync_10_1 ( void )
	;; 
	;; Determines baudrate by measuring the low-level durations of 10 bits
	;; low / 1 bit low sequence.
	;; 
	;; Returns the number of 'syshz' cycles of 1 bit (R25:R24)
	;;
	;; Measures are done with units of 5 cycles. This means that the longest
	;; low-level duration must be < 327675 cycles.
	;;
	;; This routine can not synchronize at speeds below syshz/32767 bps
	;; using 10 low-level bits characters.
	;;
	;; FT232R seems to have a bug under Linux-3.0: at 1 kbps, random
	;; duration of 10 bits low!
	;; 
	;; GCC call-used registers: R18..R27, R30, R31 (these registers can be
	;; used freely by the callee)
	;;
	.section	.text.sync_10_1,"ax",@progbits
sync_10_1:
	ldi	R24, 0
	ldi	R25, 0

1:	movw	R18, R24	;		t1 = t2
	ldi	R24, 0		;		t2 = 0
	ldi	R25, 0		;
	
	;; Measure next low-level duration in t2 (R25:R24)
	;; Start counting from -1 because we add 1 right after the first falling edge
	;; 
2:	sbis	RXDPIN, RXDBIT	;		Wait RXD == 1
	rjmp	2b		;

2:	sbic	RXDPIN, RXDBIT	; [1/2]		Wait RXD == 0
	rjmp	2b		; [2]

2:	adiw	R24, 1		; [2]	|	Compute low level duration
	sbis	RXDPIN, RXDBIT	; [1/2]	|	in 5 CPU cycles units
	rjmp	2b		; [2]	|= 5

	;; R27:R26 = 10×t2
	;; 
	movw	R26, R24	; R27:R26 = t2
	lsl	R26		;
	rol	R27		; R27:R26 = 2×t2
	lsl	R26		;
	rol	R27		; R27:R26 = 4×t2
	add	R26, R24	;
	adc	R27, R25	; R27:R26 = 5×t2
	lsl	R26		;
	rol	R27		; R27:R26 = 10×t2

	;; R31:R30 = dt = t2/2
	;; 
	movw	R30, R24	; R31:R30 = t2
	adiw	R30, 1		; round
	lsr	R31		;
	ror	R30		; R31:R30 = t2/2

	sub	R26, R30	;
	sbc	R27, R31	; R27:R26 = 10×t2 - dt

	cp	R18, R26	; if ( t1 < 10×t2 - dt )
	cpc	R19, R27	;   then t1 is too low
	brcs	1b		;   loop to get another sample

	add	R26, R30	;
	adc	R27, R31	; R27:R26 = 10×t2
	add	R26, R30	;
	adc	R27, R31	; R27:R26 = 10×t2 + dt

	cp	R18, R26	; if ( t1 > 10×t2 + dt )
	cpc	R19, R27	;   then t1 is too high
	brcc	1b		;   loop to get another sample

	;; we have 10×t2 - dt <= t1 <=  10×t2 + dt
	;; t1 gives ~10 bits duration in 5 cycles units
	;; t1/2 gives ~5 bits duration in 5 cycles units,
	;; i.e. 1 bit duration in 1 cycle unit
	;;
	movw	R24, R18	; R25:R24 = t1
	adiw	R24, 1		; round
	lsr	R25
	ror	R24		; R25:R24 = t1/2 = bit duration
	ret
