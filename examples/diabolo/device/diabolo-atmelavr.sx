
	;; -*- asm -*-

	;; Diabolo Is A BOotLOader
	;; 
	;; 1 or 2-wire serial link without timer nor interrupts
	;; Started by Power-On Reset or by application.
	;;
	;; Operations:
	;;
	;;   Identify: 'i' -> data + CRC
	;;   Read one flash page: 'f' + addr -> data + CRC
	;;   Write one flash page: 'F' + addr + data + CRC -> Code
	;;   Read n eeprom bytes: 'e' + addr + n -> data + CRC
	;;   Write n eeprom bytes: 'E' + addr + n + bytes + CRC -> Code
	;;   Resume to application: 'X' + CRC -> Code
	;;   Unknown operation: -> '!' after CRC recomputation
	;;
	;;     Note: CRC is sent/received MSB first
	;;
	;; Returned codes
	;;
	CODE_CRC  = (1<<7)	; Errors: CRC
	CODE_FAIL = (1<<4)	;         Operation failed
	CODE_WRT  = (1<<1)	; Info:   Written
	CODE_ERS  = (1<<0)	;         Erased
	CODE_OK = 0		; Success

	;; Constants
	;;
	PROTOCOL   = 4
	PAGESIZE   = HW_DEVICE_FLASH_PAGE_SIZE  ; from HWA
	FLASHSIZE  = HW_DEVICE_FLASH_SIZE       ;
	RAMSTART   = HW_DEVICE_RAM_START        ;
	RAMEND     = HW_DEVICE_RAM_START+HW_DEVICE_RAM_SIZE-1
	SIGNATURE0 = HW_A0(HW_DEVICE_SIGNATURE) ;
	SIGNATURE1 = HW_A1(HW_DEVICE_SIGNATURE) ;
	SIGNATURE2 = HW_A2(HW_DEVICE_SIGNATURE) ;

#if !defined HW_DEVICE_BOOTRST
	;;
	;; Device without boot section: allocate enough pages
	;; for Diabolo at end of flash memory
	;;
	NBLPAGES  = 10
#else
	;; Diabolo in boot section
	;;
	NBLPAGES  = HW_DEVICE_BOOTSECTION_SIZE / HW_DEVICE_FLASH_PAGE_SIZE
#endif
	APPSTART  = HW_DEVICE_APP_START
	BOOTSTART = FLASHSIZE - NBLPAGES*PAGESIZE


	;; Position of data in EEPROM
	;;
	;;   App CRC is stored MSB first in EEPROM because it must be
	;;   sent to the CRC algorithm in this order for checking
	;; 
	EEPCNT = HW_DEVICE_EEPROM_SIZE-4 ; 32 bit programmings count (MSB first)
	EECRC  = EEPCNT-4		 ; 16 bits application CRC (MSB first)


#if !defined HW_DEVICE_ATTINYX4 && !defined HW_DEVICE_ATMEGAX8 && !defined HW_DEVICE_ATTINYX5
#  error Device is not supported
#endif

	;; Register affectation
	;;
	;; TODO:
	;;   Use R22/R23 instead of R24/R25 for delay -> R24 holds the byte to tx/rx
	;;
	;; R1:R0      value written into flash page buffer
	;; R3:R2      CRC of application
	;; R5:R4      RAMSTART (used to store incomming data)
	;; R9         OSCCAL value at reset if XSPEED defined
	;; R11:R10    CRC 16 bits (CCITT) of last transfered packet
	;; R15:R14    UART bit duration in cycles
	;; R16        general usage
	;; R17        FF if all application bytes are FF, general usage
	;; R18        CRC computation
	;; R19        CRC computation
	;; R20        counter for bytes to send/receive/read/program
	;; R21        general use
	;; R22        UART bits counter
	;; R23        UART received byte buffer
	;; R24        UART rx/tx byte
	;; R29:R28    Y: RAM address, Z backup
	;; R31:R30    Z: flash address counter (LPM/SPM)


	;; Hardware registers
	;;
;; #define AP_PORF    hw_ap(hw_reg(hw_core0, porf))
;; #define AP_EXTRF   hw_ap(hw_reg(hw_core0, extrf))

	MCUSR      = hw_addr(hw_reg(hw_core0, mcusr))
	 BP_EXTRF  = hw_bp(hw_reg(hw_core0, extrf))
	 BP_PORF   = hw_bp(hw_reg(hw_core0, porf))

	SPMCSR	   = hw_addr(hw_reg(hw_flash0, csr))
	 BP_RWWSRE = hw_bp(hw_reg(hw_flash0, rwwsre))
	 BP_BLBSET = hw_bp(hw_reg(hw_flash0, blbset))
	 BP_PGWRT  = hw_bp(hw_reg(hw_flash0, pgwrt))
	 BP_PGERS  = hw_bp(hw_reg(hw_flash0, pgers))
	 BP_SPMEN  = hw_bp(hw_reg(hw_flash0, spmen))

	EEARL	   = hw_addr(hw_reg(hw_eeprom0, arl))
	EEARH	   = hw_addr(hw_reg(hw_eeprom0, arh))
	EEDR	   = hw_addr(hw_reg(hw_eeprom0, dr))
	EECR	   = hw_addr(hw_reg(hw_eeprom0, cr))
#define AP_EEMPE   hw_ap(hw_reg(hw_eeprom0, mpe))
#define AP_EEPE	   hw_ap(hw_reg(hw_eeprom0, pe))
#define AP_EERE	   hw_ap(hw_reg(hw_eeprom0, re))

	;; Communication pins: DIABOLO_PIN_RX and DIABOLO_PIN_TX can be the same
	;;
	RXDPORT	   = hw_addr(hw_reg(hw_sup(DIABOLO_PIN_RX), port))
	RXDPIN	   = hw_addr(hw_reg(hw_sup(DIABOLO_PIN_RX), pin))
	RXDDR	   = hw_addr(hw_reg(hw_sup(DIABOLO_PIN_RX), ddr))
	 BP_RXD	   = hw_bp(DIABOLO_PIN_RX)
	TXDPORT	   = hw_addr(hw_reg(hw_sup(DIABOLO_PIN_TX), port))
	TXDDR	   = hw_addr(hw_reg(hw_sup(DIABOLO_PIN_TX), ddr))
	 BP_TXD	   = hw_bp(DIABOLO_PIN_TX)

	;; Debug pin
	;;
#if defined PIN_DBG

	DBGPORT   = hw_addr(hw_reg(hw_sup(PIN_DBG), port))
	DBGPIN    = hw_addr(hw_reg(hw_sup(PIN_DBG), pin))
	DBGDDR    = hw_addr(hw_reg(hw_sup(PIN_DBG), ddr))
	DBGBIT    = hw_bp(PIN_DBG)

#  define DBGI	sbi	DBGDDR, DBGBIT
#  define DBGT	sbi	DBGPIN, DBGBIT
#  define DBG0	cbi	DBGPORT, DBGBIT
#  define DBG1	sbi	DBGPORT, DBGBIT
#else
#  define DBGI
#  define DBGT
#  define DBG0
#  define DBG1
#endif

#include "atmelavr-xinstr.sx"		// Macros for extended instructions
#include "diabolo-macros.sx"		// Macros for diabolo


	;; /********************************/
	;; /*            START             */
	;; /*                              */
	;; /*     Diabolo entry point      */
	;; /*                              */
	;; /********************************/


	;; Put this code in section .init1 so that it will not be removed
	;; by the optimizer!
	;;
	.section .init1

#if !defined HW_DEVICE_BOOTRST
	;; 
	;; Device without boot section: place a jump to Diabolo in RESET vector
	;;
	rjmp	reset
#endif

	.org BOOTSTART, 0xFF	; Fill unused space with 0xFF

	;; This point is reached only just after a RESET
	;;   If the application wants to start Diabolo, it must jump to the
	;;   entry point at the end of flash memory
	;;
	;; SP points to RAMEND after RESET then no initialization is required

	;; Start the application if the reset was not caused by power-on or by
	;; the reset pin
	;; 
reset:	XLD	R16, MCUSR
	andi	R16, (1<<BP_EXTRF) | (1<<BP_PORF)
	brne	1f
app:	rjmp	FLASHSIZE+APPSTART
1:

	DBGI
	DBG1
#if defined XSPEED
	XLD	R9, OSCCAL		; Store factory clock speed
	SPEED1	R23			; Highest clock speed
#endif
	rcall	stat			; Check application and communication status

	;; Start the application if:
	;;   RXD did not remain 0 while computing CRC (R16==0)
	;;   and CRC of application is OK (R10 == R11 == 0)
	;;   and not all application bytes are 0xFF (R17==0)
	;;     (useless if reset vector is computed in crc)
	;;
	or	R16, R10
	or	R16, R11
	or	R16, R17
#if !defined XSPEED
	breq	app
#else
	brne	init
	SPEED0
	rjmp	app
#endif

	;; Prepare for communication
	;;
init:	DBG1
	ldi	R16, lo8(RAMSTART) 	; Store RAMSTART into R5:R4
	ldi	R17, hi8(RAMSTART)	;
	movw	R4, R16
	DBG0

	;; Synchronize the software UART
	;;   Compute bit duration in SYSHZ cycles units
	;;   Store it in R15:R14
	;;
sync:
#include "diabolo-atmelavr-sync-10-1.sx"
	movw	R14, R24

	;; Wait end of byte and 1 more byte
	;; If RXD goes low, re-sync
	;;
	ldi	R20, 20		; 20 bits
2:	movw	R24, R14	;
	rcall	delay		;
	dec	R20		;
	sbic	RXDPIN, BP_RXD	; if RXD is low
	brne	2b		;
	brne	sync		;   -> sync again

	DBG1

	;; Initialize TXD pin if separate from RXD
	;;
#if hw_id(DIABOLO_PIN_RX) != hw_id(DIABOLO_PIN_TX)
	sbi	TXDPORT, BP_TXD
	sbi	TXDDR, BP_TXD
#endif

	;; Error state: send '!' and wait for '\n' before giving prompt
	;;
error:	ldi	R24, '!'
	rcall	obyte
	rcall	ibyte
	cpi	R24, '\n'
	brne	error

	;; Dialog:
	;;   send prompt '#'
	;;   wait for a character command
	;;   process command
	;;
prompt:	ldi	R24, '#'	; 0x23
	rcall	obyte
	rcall	crci
	rcall	ibyte		; Get command byte

	;; 'i': identify
	;;   CRC of application is computed before the communication is
	;;   established and after an unknown command is received
	;; 
xi:	cpi	R24, 'i'
	brne	1f
	ldi	R24, PROTOCOL	; 0: Diabolo protocol
	rcall	obytecrc
	ldi	R24, SIGNATURE0	; 1-3: device signature
	rcall	obytecrc
	ldi	R24, SIGNATURE1
	rcall	obytecrc
	ldi	R24, SIGNATURE2
	rcall	obytecrc
	ldi	R24, NBLPAGES	; 4: number of pages for the bootloader
	rcall	obytecrc
	mov	R24, R3		; 5: CRC of application (MSB)
	rcall	obytecrc
	mov	R24, R2		; 6: CRC of application (LSB)
	rcall	obytecrc
	clr	R31				;  7: Fuses low byte      (0x0000)
	clr	R30				;  8: Lock bits		  (0x0001)
2:	ldi	R24, 1<<BP_BLBSET | 1<<BP_SPMEN	;  9: Fuses extended byte (0x0002)
	XST	SPMCSR, R24			; 10: Fuses high byte	  (0x0003)
	lpm	R24, Z+
	rcall	obytecrc
	cpi	R30, 4
	brne	2b

	;; Send CRC before resuming to prompt '#'
	;;
ocrc:	mov	R24, R11	; CRC (msb)
	rcall	obyte
	mov	R24, R10	; CRC (lsb)
	rcall	obyte
	rjmp	prompt
1:

	;; Read flash page: 'f' + addr
	;; 
xf:	cpi	R24, 'f'
	brne	1f
	rcall	iaddr		; Get address in Z
	ldi	R20, PAGESIZE
2:	lpm	R24, Z+		; Read flash byte
	rcall	obytecrc	; Send it
	dec	R20
	brne	2b		; Until end of page
	rjmp	ocrc		; Send CRC and resume to prompt


	;; Receive an address (Z)
	;; 
iaddr:	rcall	ibyte
	mov	R30, R24	; LSB
	rcall	ibyte
	mov	R31, R24	; MSB
	ret


	;; Get R20 bytes stored in RAM, + CRC16
	;; Return with Z=1 if CRC is valid
	;;
ibuf:	movw	R28, R4		; RAMSTART
2:	rcall	ibyte
	st	Y+, R24
	dec	R20
	brne	2b

	;; Receive and check CRC
	;; Load '\x80' (CRC error) into R24
	;; Return with Z=1 if CRC is valid (== 0)
	;; 
icrc:	rcall	ibyte		; Receive CRC (MSB first)
	rcall	ibyte		;
	mov	R24, R10	; Check CRC
	or	R24, R11	; Z=1 if CRC is valid
	ldi	R24, CODE_CRC	; Z unmodified
	ret
1:

	;;   Write flash page: 'F' + addr + data + CRC
	;;
xF:	cpi	R24, 'F'
	brne	1f
	rcall	iaddr		; Get address and store it in Z
	ldi	R20, PAGESIZE
	rcall	ibuf		; Get R20 bytes + CRC and store them in RAM
	brne	abort		; Abort if CRC error
	ldi	R24, CODE_FAIL | CODE_ERS	; Return code in R24
	;;
	;; Erase page at address Z
	;;
	FLASH_PGERS		; Erase page
	FLASH_ERWWS		; Re-enable RWW section if device has a bootsection
	;;
	;; Copy data bytes from RAM to flash page buffer
	;; 
	;; The page buffer is cleared after power-on reset and by the following
	;; PGWRT or ERWWS operations but for devices without boot section, no
	;; ERWWS operation is performed and PGWRT is not performed on virgin pages.
	;;
	FLASH_CLRBF
	movw	R28, R4		; Y = RAMSTART (where the data bytes are stored)
	ldi	R20, PAGESIZE/2
	ldi	R23, 0xFF
2:	ld	R0, Y+
	ld	R1, Y+
	and	R23, R0
	and	R23, R1
	FLASH_LDBYTE		; Load byte to be programmed at address Z
	adiw	R30, 2
	dec	R20
	brne	2b
	;;
	;; Program the page
	;;
	cpi	R23, 0xFF
	breq	2f		   ; No need to program a virgin page
	ori	R24, CODE_WRT
	subi	R30, lo8(PAGESIZE) ; Reset Z to the address of the page to write
	sbci	R31, hi8(PAGESIZE)
	FLASH_PGWRT		; Write page
	FLASH_ERWWS		; Re-enable RWW section if device has a bootsection
	;;
	;; Verify written data
	;;
2:	movw	R28, R4		; Y = RAMSTART (where the data bytes are stored)
	ldi	R20, PAGESIZE
2:	ld	R0, Y+
	lpm	R1, Z+
	cpse	R0, R1
	rjmp	abort
	dec	R20
	brne	2b
	andi	R24, ~CODE_FAIL	; Error code in R24
abort:	rcall	obyte
	rjmp	prompt
1:

	;; Read n eeprom bytes: 'e' + addr + n
	;; 
xe:	cpi	R24, 'e'
	brne	1f
	rcall	iaddr		; Get address and store it in Z
	rcall	ibyte		; R24 = how many bytes to read
	mov	R20, R24
2:	rcall	eerd 		; Read EEPROM and add to CRC
	rcall	obyte
	dec	R20
	brne	2b		; Until the last one
	rjmp	ocrc		; Send CRC and resume to prompt
1:

	;;   Write n eeprom bytes: 'E' + addr + n + bytes + CRC ; Code
	;; 
xE:	cpi	R24, 'E'
	brne	1f
	rcall	iaddr		; Get address and store it in Z
	rcall	ibyte		; R24 = how many bytes to program
	mov	R20, R24
	mov	R21, R24
	rcall	ibuf		; Load buffer
	brne	abort		; Abort if error
	;;
	;; Program the data
	;;
	SPEED0			; Factory clock speed
	;;
	movw	R28, R4		; Y = RAMSTART
2:	ldi	R24, 0		; Command: erase & write
	XST	EECR, R24
	XST	EEARL, R30	; Address
	XST	EEARH, R31
	ld	R24, Y+		; Byte value
	XST	EEDR, R24
	sbi	AP_EEMPE	; Program
	sbi	AP_EEPE
3:	sbic	AP_EEPE		; Wait eeprom ready
	rjmp	3b
	adiw	R30, 1		; Next address
	dec	R21		; Next byte
	brne	2b		; While some remain
	;;
	SPEED1	R24		; High clock speed
	;;
	;; No verification
	;;
	rjmp	prompt
1:

	;; Resume to application
	;;
xX:	cpi	R24, 'X'
	brne	1f
	rcall	icrc
	breq	2f
	rjmp	error
2:	ldi	R24, CODE_OK
	rcall	obyte
	;;
	;; Deinitialize TXD pin if not the same as RXD
	;; 
#if hw_id(DIABOLO_PIN_RX) != hw_id(DIABOLO_PIN_TX)
	ldi	R24, 0
	XST	TXDDR, R24
	XST	TXDPORT, R24
#endif
	;; Jump to application
	;;
	rjmp	app
1:

	;; Unknown command then go re-compute application CRC
	;; and enter error state
	;;
x:	rcall	stat
	rjmp	error

	;; Delay R25:R24 + 6 cycles			(R24, R25)
	;; 3 + 4 (n/4-1) + 3 + 4 = 6 + n
	;; 
delay:				; [3] rcall
	sbiw	R24, 4		; [2]   |
	brcc	delay		; [2/1] |= 4
	ret			; [4]


	;; Receive one byte in R24			R22, R23, R24, R25
	;; 						R10, R11, R18, R19
	;;
ibyte:	ldi 	R22, 9		; 8 data bits + 1 stop bit
2:	sbis	RXDPIN, BP_RXD	;	Wait RXD == 1
	rjmp	2b
2:	sbic 	RXDPIN, BP_RXD	; [1/2] Wait RXD == 0
	rjmp 	2b		; [2]

	movw	R24, R14	; [1]	|	Delay 1+1/2 bit (skip start)
	lsr	R25		; [1]	|
	ror	R24		; [1]	|
	add	R24, R14	; [1]	|
	adc	R25, R15	; [1]	|
	sbiw	R24, 7+6	; [2]	|=7
	rcall	delay

2:	XLD	R24, RXDPIN	; [1]	|	Sample one bit in T
	bst	R24, BP_RXD	; [1]	|
	dec 	R22		; [1]   |
	breq 	1f		; [1/2] |	IF last THEN break
	lsr 	R23		; [1]   |	Store T into byte buffer
	bld	R23, 7		; [1]	|
	movw	R24, R14	; [1]	|
	sbiw	R24, 9+4+6+2	; [2]	|=9	FIXME: +4 ?
	rcall	delay
	rjmp 	2b		; [2]   	Next bit
;; 2:	brtc	sync		; [1]		Stop bit == 0 -> resynchronise/restart
1:	mov	R24, R23	; [1]		Store received byte in R24

	;; Update CRC (R11:R10) with byte R24
	;; 						R10, R11, R18, R19
	;;
crcadd:				; [4] (call)
	mov	R19, R24	; [1] Save byte

	mov	R18, R10	; [1] CRC = CRC>>8 | CRC<<8
	mov	R10, R11	; [1]
	mov	R11, R18	; [1]

	eor	R10, R19	; [1] CRC ^= byte

	mov	R18, R10	; [1] CRC = CRC ^ ((CRC & 0xFF) >> 4)
	swap	R18		; [1]
	andi	R18, 0x0F	; [1]
	eor	R10, R18	; [1]

	mov	R18, R10	; [1] CRC = CRC ^ ((CRC << 8) << 4)
	swap	R18		; [1]
	andi	R18, 0xF0	; [1]
	eor	R11, R18	; [1]

	mov	R18, R10	; [1] CRC = CRC ^ (((CRC & 0xFF) << 4) << 1)
	swap	R18		; [1]
	mov	R19, R18	; [1]
	andi	R18, 0xF0	; [1]
	andi	R19, 0x0F	; [1]
	lsl	R18		; [1]
	rol	R19		; [1]
	eor	R10, R18	; [1]
	eor	R11, R19	; [1]
	ret			; [4]=30


	;; Send one byte (R24, destroyed)
	;; Update CRC (initialized at 0xFFFF after prompt)
	;;
	;; 						R10, R11, R18, R19
	;;
obytecrc:
	rcall	crcadd
	;;						R24, R25, R26, R27
	;;
obyte:
#if hw_id(DIABOLO_PIN_RX) == hw_id(DIABOLO_PIN_TX)
	sbi	TXDPORT, BP_TXD	; Set RXD/TXD as output high
	sbi	TXDDR, BP_TXD	;
#endif
	ldi	R26, 10		; nbits = 1 start + 8 data + 1 stop
	mov	R27, R24
	com	R27		; Complement byte (optimization)
	sec			; Load start bit
2:	brcc	3f		; [1/2]	|	IF CARRY
	cbi	TXDPORT, BP_TXD	; [1]   |	THEN send '0'
	rjmp	4f		; [2]	|
3:	sbi	TXDPORT, BP_TXD	; [1]   |	ELSE send '1'
	nop			; [1]	|
4:	movw	R24, R14	; [1]	|
	sbiw	R24, 7+2+6+4	; [2]	|=7	FIXME: +2 ?
	rcall	delay
	lsr	R27		; [1]	|	Next bit
	dec	R26		; [1]	|
	brne	2b		; [2]	|=4	Repeat until last bit
#if hw_id(DIABOLO_PIN_RX) == hw_id(DIABOLO_PIN_TX)
	cbi	TXDDR, BP_TXD	;
	cbi	TXDPORT, BP_TXD	; Release TXD
#endif
	ret

	;; Execute SPM instruction after setting SPMCSR with R21 value
	;; 
#if defined HW_DEVICE_BOOTRST
dospm:  XST	SPMCSR, R21
	spm
2:	XSBIC	R21, SPMCSR, BP_SPMEN ; Wait end of SPM instruction
	rjmp	2b
	ret
#endif


	;; Initialize CRC and R17:R16 to 0xFF
	;;
crci:	ldi	R16, 0xFF
	ldi	R17, 0xFF
	movw	R10, R16
	ret


	;; Compute the status of application code
	;; Compute CRC ignoring the trailing 0xFF bytes:
	;;   read from the end to the beginning
	;;   ignore reset vector code for devices without a boot section
	;;   check the RXD pin level
	;;
	;; Returned values:
	;;   R3:R2 == CRC of application
	;;   R11:R10 == 0 if CRC of application matches CRC in EEPROM
	;;   R16==0xFF if RXD remains 0, R16==0 if RXD not always 0
	;;   R17==0xFF if all opcodes are 0xFF, R17=0 if not all opcodes are 0xFF
	;;
	;; Cycles = 48*nbytes
	;;        = 48 ms/kB of flash code @1MHz
	;;
stat:	rcall	crci
	ldi	R30, lo8(FLASHSIZE-NBLPAGES*PAGESIZE-1) ; Begin with last byte
	ldi	R31, hi8(FLASHSIZE-NBLPAGES*PAGESIZE-1) ; of application code
2:	lpm	R24, Z		; [3]
	and	R17, R24	; [1]
	cpi	R17, 0xFF	; [1]	Do not compute 0xFF bytes at end of app section
	breq	3f		; [1]
	clr	R17		; [1]
	rcall	crcadd		; [30]
3:	sbic	RXDPIN, BP_RXD	; [2]	Clear R16 if RXD == 1
	clr	R16		; [1]
	;;
	DBGT
	;;
	sbiw	R30, 1		; [2]

#if !defined HW_DEVICE_BOOTRST
	cpi	R31, 0		; [1]	Do not compute the RESET vector for devices
	brne	2b		; [2]   without a boot section
	cpi	R30, 2		; [1]
	brcc	2b		; [2]=48
#else
	brcc	2b		; [2]=44
#endif
	;; Copy application CRC in R3:R2 (used for 'i')
	;; Check against value stored in EEPROM
	;; 
	movw	R2, R10
	ldi	R30, lo8(EECRC)	; Z = address of CRC stored in EEPROM
	ldi	R31, hi8(EECRC)
	rcall	eerd		; Read one byte of EEPROM and update CRC
				; Read one byte of EEPROM and update CRC
				; Return


	;; Read EEPROM: R24 = *(Z++)
	;;   Bytes read are appended to CRC
	;;
eerd:	XST	EEARL, R30
	XST	EEARH, R31
	sbi	AP_EERE
	XLD	R24, EEDR
	adiw	R30, 1
	rjmp	crcadd


	;; Entry point from the application
	;;   The application must deinitialize all peripherals
	;;   and load SP with RAMEND
	;; 
	.org	FLASHSIZE-2, 0xFF
	rjmp	init
