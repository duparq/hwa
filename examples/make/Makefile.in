
CWD := $(dir $(lastword $(MAKEFILE_LIST)))

#  Device-specific Makefile
#
include $(CWD)Makefile.$(MCU)

#  Software-program-specific Makefile
#
ifneq ($(strip $(PROG_SW)),)
  include $(CWD)Makefile.$(PROG_SW)
endif

#  Programming-hardware-specific Makefile
#
ifneq ($(strip $(PROG_HW)),)
  include $(CWD)Makefile.$(PROG_HW)
endif

#	Commands & options
#
CC		= $(ARCH)gcc
AS		= $(ARCH)as
OBJCOPY		= $(ARCH)objcopy
ODUMP		= $(ARCH)objdump
GDB		= $(ARCH)gdb
SIZE		= $(ARCH)size
STD		= c1x

CFLAGS		+= $(MMCU)
CFLAGS		+= -std=$(STD)
CFLAGS		+= -Wall
CFLAGS		+= -Wextra
#CFLAGS		+= -pedantic
CFLAGS		+= -Wpedantic	# GCC 4.8
CFLAGS		+= -fno-diagnostics-show-caret	# GCC 4.8
CFLAGS		+= -ftrack-macro-expansion=0
#CFLAGS		+= -fomit-frame-pointer
CFLAGS		+= -ffunction-sections
#CFLAGS		+= -fno-builtins
CFLAGS		+= -fpack-struct
#CFLAGS		+= -fshort-enums
#CFLAGS		+= -mcall-prologues
CFLAGS		+= -g
#CFLAGS		+= -pipe
CFLAGS		+= -Os
#CFLAGS		+= -O0
#CFLAGS		+= -O1
#CFLAGS		+= -O2
#CFLAGS		+= -O3
CFLAGS		+= $(DEFINES)
CFLAGS		+= $(INCLUDES)

AFLAGS		+= $(MMCU)
AFLAGS		+= -Wall
AFLAGS		+= -Wextra
AFLAGS		+= $(DEFINES)
AFLAGS		+= $(INCLUDES)


LDFLAGS		+= $(MMCU)
#LDFLAGS		+= -s
LDFLAGS		+= -Wl,-Map,$(OBJDIR)/$(OUT).map,--cref
#LDFLAGS		+= -Wl,-u,vfprintf -lprintf_min
#LDFLAGS		+= -nostartfiles
LDFLAGS		+= -Wl,--gc-sections
#LDFLAGS		+= -nostdlib # Provide clear_bss aso
#LDFLAGS		+= -Wl,--section-start=.protext=0x1E00
#LDFLAGS		+= -Wl,--section-start=.bss.pro=0x800100
#LDFLAGS		+= -L/usr/lib/avr/lib
#LDFLAGS		+= -L/home/indy/dev/avr/toolchain/current/install/avr/lib
#LDFLAGS		+= -lm


#ODUMPFLAGS	= -S
ODUMPFLAGS	= -h -S
#ODUMPFLAGS	= -D


#	Build object files list from source files list
#
OBJECTS		:=	$(SOURCES:.c=.$(MCU).o)
OBJECTS		:=	$(OBJECTS:.sx=.$(MCU).o)
OBJECTS		:=	$(addprefix $(OBJDIR)/,$(OBJECTS))


hex:	$(OBJDIR)/$(OUT).hex
bin:	$(OBJDIR)/$(OUT).bin
lst:	$(OBJDIR)/$(OUT).lst

size:	$(OBJDIR)/$(OUT).elf
	$(SIZE) $^
	@diabolo.py --crc $(OBJDIR)/$(OUT).bin | cut -d',' -f3

ifneq ($(strip $(FLASHSZ)),)
  PADTO = --pad-to $(FLASHSZ)
else
  PADTO =
endif


#	Preprocess
#
%.cp.c: %.c
	$(CPP) $(CFLAGS) $< >$@
#	$(CPP) $(CFLAGS) $< |sed -e 's/;/;\n/g'|bcpp -s -i 2 -bcl | sed -e 's/#/\/\//g' > $@

%.cp.s: %.s
	$(CPP) $(AFLAGS) $< >$@

%.cp.sx: %.sx
	$(CPP) $(AFLAGS) $< >$@

%.s : %.c
	$(CC) $(MMCU) -std=c99 -Wall -Wextra -Os -c -g -S $< -o $@


#	Compile and link
#
$(OBJECTS): | $(OBJDIR)		# Create directory if needed

$(OBJDIR):
	@mkdir $(OBJDIR)


$(OBJDIR)/%.$(MCU).o : %.c Makefile
	$(CC) $(CFLAGS) -c $< -o $@

$(OBJDIR)/%.o : %.c Makefile
	$(CC) $(CFLAGS) -c $< -o $@

$(OBJDIR)/%.$(MCU).o : %.s Makefile
	$(AS) $(AFLAGS) $< -o $@

$(OBJDIR)/%.o : %.s Makefile
	$(AS) $(AFLAGS) $< -o $@

$(OBJDIR)/%.$(MCU).o : %.sx Makefile
	$(CC) $(AFLAGS) -c $< -o $@

$(OBJDIR)/%.o : %.sx Makefile
	$(CC) $(AFLAGS) -c $< -o $@

$(OBJDIR)/$(OUT).elf : $(OBJECTS) $(LDSCRIPT) Makefile
	$(CC) $(LDFLAGS) -o $@ $(OBJECTS) $(LIBS)


#	Post-linking
#
%.bin : %.elf
	$(OBJCOPY) -R .eeprom -O binary --gap-fill=0xFF $(PADTO) $^ $@

%.hex : %.elf
	$(OBJCOPY) --gap-fill=0xFF -R .eeprom -O ihex $^ $@

%.lst : %.elf
	$(ODUMP) $(ODUMPFLAGS) $^ >$@

# %.elf:	%.o
# 	$(CC) $(LDFLAGS) -o $@ $^

#	Clean
#
clean:
	rm -rf $(OBJDIR)
	find . '(' 			\
		-name '*~' 		\
		-o -name '*.cp.*'	\
		-o -name '*.pyc'	\
		')' -exec rm {} ';'


#	Archive
#
tarball: clean
	SRC=$$(basename $$PWD)					;\
	DST=$$SRC.tar.bz2					;\
	tar -cvO --exclude=trash --exclude=$$DST		\
		../$$SRC | bzip2 >$$DST


#	Dependencies
#
DEPS	= $(OBJDIR)/$(OUT).$(MCU).deps

deps:	$(DEPS)

$(DEPS): $(SOURCES)
	@echo Rebuilding deps for $(SOURCES) 			;\
	mkdir -p $(dir $@)					;\
	>$@							;\
	for s in $(SOURCES) ; do 		\
	  $(CC) -MM $(DEFINES) $(MMCU) 		\
	    -MT $(OBJDIR)/$(notdir $${s%.*}.$(MCU).o) $(INCLUDES) $$s >>$@ ;\
	done

-include $(DEPS)


.PHONY: deps flash load upload download erase read_fuses select_xtal_osc \
	select_intern_osc_1 select_intern_osc_8 reset clean deps size


# $(OBJDIR)/%.$(MCU).d: %.c
# 	set -e; rm -f $@;					\
# 	$(CC) -MM $(DEFINES) $(MMCU) $< > $@.$$$$;		\
# 	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@;	\
# 	rm -f $@.$$$$

# DEPS	:=	$(SOURCES:.c=.$(MCU).d)
# DEPS	:=	$(addprefix $(OBJDIR)/,$(DEPS))

# include $(DEPS)
