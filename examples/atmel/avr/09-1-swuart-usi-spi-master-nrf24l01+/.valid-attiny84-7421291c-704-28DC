HW_DEVICE=attiny84
hw_syshz=8000000
hw_swuart0_pin_rx=hw_pin_pb0
hw_swuart0_pin_tx=hw_pin_pb0
hw_swuart0_counter=hw_counter1
hw_swuart0_counter_clk_div=1
hw_swuart0_counter_compare=compare0
UART=hw_swuart0
USI=hw_usi0
NRF_CSN=hw_pin_pa7


build/out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002c0  00000354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000354  2**0
                  ALLOC
  3 .stab         000010d4  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000215c  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003584  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__vector_3>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	3d c0       	rjmp	.+122    	; 0x88 <__vector_6>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a7 36       	cpi	r26, 0x67	; 103
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	89 d0       	rcall	.+274    	; 0x152 <main>
  40:	3d c1       	rjmp	.+634    	; 0x2bc <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_3>:
  44:	8f 93       	push	r24
  46:	9f 93       	push	r25
  48:	8c b5       	in	r24, 0x2c	; 44
  4a:	78 94       	sei
  4c:	9d b5       	in	r25, 0x2d	; 45
  4e:	af 93       	push	r26
  50:	af b7       	in	r26, 0x3f	; 63
  52:	af 93       	push	r26
  54:	9e 9b       	sbis	0x13, 6	; 19
  56:	da c0       	rjmp	.+436    	; 0x20c <_hw_swuart0_sync>
  58:	b0 99       	sbic	0x16, 0	; 22
  5a:	10 c0       	rjmp	.+32     	; 0x7c <_hw_swuart0_st99>
  5c:	ab b7       	in	r26, 0x3b	; 59
  5e:	af 7d       	andi	r26, 0xDF	; 223
  60:	ab bf       	out	0x3b, r26	; 59
  62:	a0 91 63 00 	lds	r26, 0x0063
  66:	8a 0f       	add	r24, r26
  68:	a0 91 64 00 	lds	r26, 0x0064
  6c:	9a 1f       	adc	r25, r26
  6e:	9b bd       	out	0x2b, r25	; 43
  70:	8a bd       	out	0x2a, r24	; 42
  72:	88 e0       	ldi	r24, 0x08	; 8
  74:	80 93 62 00 	sts	0x0062, r24
  78:	59 9a       	sbi	0x0b, 1	; 11
  7a:	61 9a       	sbi	0x0c, 1	; 12

0000007c <_hw_swuart0_st99>:
  7c:	af 91       	pop	r26
  7e:	af bf       	out	0x3f, r26	; 63
  80:	af 91       	pop	r26
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	18 95       	reti

00000088 <__vector_6>:
  88:	ff 93       	push	r31
  8a:	ff b7       	in	r31, 0x3f	; 63
  8c:	ff 93       	push	r31
  8e:	9c 99       	sbic	0x13, 4	; 19
  90:	36 c0       	rjmp	.+108    	; 0xfe <_hw_swuart0_tx>
  92:	78 94       	sei
  94:	f6 b3       	in	r31, 0x16	; 22
  96:	f0 fb       	bst	r31, 0
  98:	f0 91 61 00 	lds	r31, 0x0061
  9c:	f6 95       	lsr	r31
  9e:	f7 f9       	bld	r31, 7
  a0:	f0 93 61 00 	sts	0x0061, r31
  a4:	f0 91 62 00 	lds	r31, 0x0062
  a8:	f1 50       	subi	r31, 0x01	; 1
  aa:	f0 93 62 00 	sts	0x0062, r31
  ae:	ba f0       	brmi	.+46     	; 0xde <_hw_swuart0_rxeof>
  b0:	21 f4       	brne	.+8      	; 0xba <_hw_swuart0_next>
  b2:	f0 91 61 00 	lds	r31, 0x0061
  b6:	f0 93 60 00 	sts	0x0060, r31

000000ba <_hw_swuart0_next>:
  ba:	ef 93       	push	r30
  bc:	e0 91 65 00 	lds	r30, 0x0065
  c0:	f0 91 66 00 	lds	r31, 0x0066
  c4:	df 93       	push	r29
  c6:	da b5       	in	r29, 0x2a	; 42
  c8:	ed 0f       	add	r30, r29
  ca:	db b5       	in	r29, 0x2b	; 43
  cc:	fd 1f       	adc	r31, r29
  ce:	df 91       	pop	r29
  d0:	fb bd       	out	0x2b, r31	; 43
  d2:	ea bd       	out	0x2a, r30	; 42
  d4:	ef 91       	pop	r30
  d6:	ff 91       	pop	r31
  d8:	ff bf       	out	0x3f, r31	; 63
  da:	ff 91       	pop	r31
  dc:	18 95       	reti

000000de <_hw_swuart0_rxeof>:
  de:	f3 b3       	in	r31, 0x13	; 19
  e0:	f0 f9       	bld	r31, 0
  e2:	f0 62       	ori	r31, 0x20	; 32
  e4:	f6 fd       	sbrc	r31, 6
  e6:	f4 60       	ori	r31, 0x04	; 4
  e8:	f0 64       	ori	r31, 0x40	; 64
  ea:	f3 bb       	out	0x13, r31	; 19
  ec:	61 98       	cbi	0x0c, 1	; 12
  ee:	f0 e2       	ldi	r31, 0x20	; 32
  f0:	fa bf       	out	0x3a, r31	; 58
  f2:	f8 94       	cli
  f4:	fb b7       	in	r31, 0x3b	; 59
  f6:	f0 62       	ori	r31, 0x20	; 32
  f8:	78 94       	sei
  fa:	fb bf       	out	0x3b, r31	; 59
  fc:	de cf       	rjmp	.-68     	; 0xba <_hw_swuart0_next>

000000fe <_hw_swuart0_tx>:
  fe:	f0 91 61 00 	lds	r31, 0x0061
 102:	f6 95       	lsr	r31
 104:	18 f4       	brcc	.+6      	; 0x10c <_hw_swuart0_tx0>

00000106 <_hw_swuart0_tx1>:
 106:	78 94       	sei
 108:	c0 9a       	sbi	0x18, 0	; 24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <_hw_swuart0_txn>

0000010c <_hw_swuart0_tx0>:
 10c:	78 94       	sei
 10e:	c0 98       	cbi	0x18, 0	; 24

00000110 <_hw_swuart0_txn>:
 110:	f0 93 61 00 	sts	0x0061, r31
 114:	f0 91 62 00 	lds	r31, 0x0062
 118:	f1 50       	subi	r31, 0x01	; 1
 11a:	f0 93 62 00 	sts	0x0062, r31
 11e:	2a f0       	brmi	.+10     	; 0x12a <_hw_swuart0_txeof>
 120:	19 f4       	brne	.+6      	; 0x128 <_hw_swuart0_txn+0x18>
 122:	f3 e0       	ldi	r31, 0x03	; 3
 124:	f0 93 61 00 	sts	0x0061, r31
 128:	c8 cf       	rjmp	.-112    	; 0xba <_hw_swuart0_next>

0000012a <_hw_swuart0_txeof>:
 12a:	9d 9a       	sbi	0x13, 5	; 19
 12c:	61 98       	cbi	0x0c, 1	; 12
 12e:	b8 98       	cbi	0x17, 0	; 23
 130:	c0 98       	cbi	0x18, 0	; 24
 132:	9b 9a       	sbi	0x13, 3	; 19
 134:	9c 98       	cbi	0x13, 4	; 19
 136:	f0 e2       	ldi	r31, 0x20	; 32
 138:	fa bf       	out	0x3a, r31	; 58
 13a:	f8 94       	cli
 13c:	fb b7       	in	r31, 0x3b	; 59
 13e:	f0 62       	ori	r31, 0x20	; 32
 140:	78 94       	sei
 142:	fb bf       	out	0x3b, r31	; 59
 144:	ba cf       	rjmp	.-140    	; 0xba <_hw_swuart0_next>

00000146 <write_usi>:

    if ( rm == 0 )
      /*
       *  Nothing to be read, just write the new value
       */
      *p = v ;
 146:	8f b9       	out	0x0f, r24	; 15
    /*
     *  Just 1 bit to be written at C address < 0x40 (ASM address < 0x20): use
     *  sbi/cbi
     */
    if ( v )
      *p |= wm ; /* sbi */
 148:	76 9a       	sbi	0x0e, 6	; 14
 14a:	68 9a       	sbi	0x0d, 0	; 13
  hw_clear_irqf( USI, txc );
  do {
    hw_trigger( USI );
    // hw_delay_cycles( 50e-6 * hw_syshz );
  }
  while ( !hw_stat(USI).txc );
 14c:	76 9b       	sbis	0x0e, 6	; 14
 14e:	fd cf       	rjmp	.-6      	; 0x14a <write_usi+0x4>
}
 150:	08 95       	ret

00000152 <main>:
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 152:	80 e2       	ldi	r24, 0x20	; 32
 154:	8b bf       	out	0x3b, r24	; 59
 156:	8a bf       	out	0x3a, r24	; 58
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
 158:	df 9a       	sbi	0x1b, 7	; 27
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 15a:	80 eb       	ldi	r24, 0xB0	; 176
 15c:	8a bb       	out	0x1a, r24	; 26
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 bd       	out	0x20, r24	; 32
 162:	8e bd       	out	0x2e, r24	; 46
 164:	8a e1       	ldi	r24, 0x1A	; 26
 166:	8d b9       	out	0x0d, r24	; 13

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
 168:	78 94       	sei

  /*  Wait for UART synchronization
   */
  while ( !hw_stat(UART).synced ) {}
 16a:	9e 9b       	sbis	0x13, 6	; 19
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0x18>
   */
  for(;;) {

    /*  Prompt
     */
    hw_write( UART, '$' );
 16e:	84 e2       	ldi	r24, 0x24	; 36
 170:	28 d0       	rcall	.+80     	; 0x1c2 <_hw_swuart0_putbyte>
    /*  The host sends commands starting with '=' and followed by:
     *    * the number of bytes to send to SPI slave (1 byte)
     *    * the number of bytes to read (1 byte)
     *    * the bytes to send
     */
    uint8_t c = hw_read( UART );
 172:	21 d0       	rcall	.+66     	; 0x1b6 <_hw_swuart0_getbyte>
    if ( c == '=' ) {
 174:	8d 33       	cpi	r24, 0x3D	; 61
 176:	c9 f4       	brne	.+50     	; 0x1aa <main+0x58>

      /*  Number of bytes to send to SPI slave
       */
      uint8_t ntx = hw_read( UART );
 178:	1e d0       	rcall	.+60     	; 0x1b6 <_hw_swuart0_getbyte>
 17a:	d8 2f       	mov	r29, r24
      if ( ntx < 1 || ntx > 33 )
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	8d 0f       	add	r24, r29
 180:	81 32       	cpi	r24, 0x21	; 33
 182:	98 f4       	brcc	.+38     	; 0x1aa <main+0x58>
        goto error ;

      /*  Number of bytes to send back to talker
       */
      uint8_t nrx = hw_read( UART );
 184:	18 d0       	rcall	.+48     	; 0x1b6 <_hw_swuart0_getbyte>
 186:	c8 2f       	mov	r28, r24
      if ( nrx > 32 )
 188:	81 32       	cpi	r24, 0x21	; 33
 18a:	78 f4       	brcc	.+30     	; 0x1aa <main+0x58>
    if ( v )
      *p |= wm ; /* sbi */
    else {
      if ( wm & rfm )
	HWA_ERR("flag bit can only be cleared by writing 1 into it.");
      *p &= ~wm ; /* cbi */
 18c:	df 98       	cbi	0x1b, 7	; 27
        goto error ;

      /*  Select SPI slave and send data
       */
      hw_write( NRF_CSN, 0 );
      while ( ntx-- ) {
 18e:	d1 50       	subi	r29, 0x01	; 1
 190:	18 f0       	brcs	.+6      	; 0x198 <main+0x46>
        c = hw_read( UART );
 192:	11 d0       	rcall	.+34     	; 0x1b6 <_hw_swuart0_getbyte>
        write_usi( c );
 194:	d8 df       	rcall	.-80     	; 0x146 <write_usi>
 196:	fb cf       	rjmp	.-10     	; 0x18e <main+0x3c>
      }

      /*  Send reply to talker and deselect SPI slave
       */
      while ( nrx-- ) {
 198:	c1 50       	subi	r28, 0x01	; 1
 19a:	28 f0       	brcs	.+10     	; 0x1a6 <main+0x54>
        write_usi( 0 );
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	d3 df       	rcall	.-90     	; 0x146 <write_usi>
 */
HW_INLINE uint8_t _hw_read_r8 ( intptr_t ra, uint8_t rbn, uint8_t rbp )
{
  uint8_t m = (1U<<rbn)-1 ;
  volatile uint8_t *p = (volatile uint8_t *)ra ;
  return ((*p)>>rbp) & m ;
 1a0:	8f b1       	in	r24, 0x0f	; 15
        c = hw_read( USI );
        hw_write( UART, c );
 1a2:	0f d0       	rcall	.+30     	; 0x1c2 <_hw_swuart0_putbyte>
 1a4:	f9 cf       	rjmp	.-14     	; 0x198 <main+0x46>
    /*
     *  Just 1 bit to be written at C address < 0x40 (ASM address < 0x20): use
     *  sbi/cbi
     */
    if ( v )
      *p |= wm ; /* sbi */
 1a6:	df 9a       	sbi	0x1b, 7	; 27
 1a8:	e2 cf       	rjmp	.-60     	; 0x16e <main+0x1c>
       *  First byte of command must be '='. Send '!' as error indicator and
       *  wait for '\n' as error aknowledgement.
       */
      do {
      error:
        hw_write( UART, '!' );
 1aa:	81 e2       	ldi	r24, 0x21	; 33
 1ac:	0a d0       	rcall	.+20     	; 0x1c2 <_hw_swuart0_putbyte>
        c = hw_read( UART );
 1ae:	03 d0       	rcall	.+6      	; 0x1b6 <_hw_swuart0_getbyte>
      } while ( c != '\n' ) ;
 1b0:	8a 30       	cpi	r24, 0x0A	; 10
 1b2:	d9 f7       	brne	.-10     	; 0x1aa <main+0x58>
 1b4:	dc cf       	rjmp	.-72     	; 0x16e <main+0x1c>

000001b6 <_hw_swuart0_getbyte>:
 1b6:	9a 9b       	sbis	0x13, 2	; 19
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <_hw_swuart0_getbyte>
 1ba:	9a 98       	cbi	0x13, 2	; 19
 1bc:	80 91 60 00 	lds	r24, 0x0060
 1c0:	08 95       	ret

000001c2 <_hw_swuart0_putbyte>:
 1c2:	98 e0       	ldi	r25, 0x08	; 8

000001c4 <_hw_swuart0_putbits>:
 1c4:	20 d0       	rcall	.+64     	; 0x206 <_hw_swuart0_wait_ready>
 1c6:	9d 9b       	sbis	0x13, 5	; 19
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <_hw_swuart0_putbits+0xa>
 1ca:	59 9b       	sbis	0x0b, 1	; 11
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <_hw_swuart0_putbits+0x6>
 1ce:	ab b7       	in	r26, 0x3b	; 59
 1d0:	af 7d       	andi	r26, 0xDF	; 223
 1d2:	ab bf       	out	0x3b, r26	; 59
 1d4:	80 93 61 00 	sts	0x0061, r24
 1d8:	83 e5       	ldi	r24, 0x53	; 83
 1da:	83 bb       	out	0x13, r24	; 19
 1dc:	90 93 62 00 	sts	0x0062, r25
 1e0:	c0 9a       	sbi	0x18, 0	; 24
 1e2:	b8 9a       	sbi	0x17, 0	; 23
 1e4:	f8 94       	cli
 1e6:	8c b5       	in	r24, 0x2c	; 44
 1e8:	9d b5       	in	r25, 0x2d	; 45
 1ea:	78 94       	sei
 1ec:	c0 98       	cbi	0x18, 0	; 24
 1ee:	a0 91 65 00 	lds	r26, 0x0065
 1f2:	b0 91 66 00 	lds	r27, 0x0066
 1f6:	53 97       	sbiw	r26, 0x13	; 19
 1f8:	8a 0f       	add	r24, r26
 1fa:	9b 1f       	adc	r25, r27
 1fc:	9b bd       	out	0x2b, r25	; 43
 1fe:	8a bd       	out	0x2a, r24	; 42
 200:	59 9a       	sbi	0x0b, 1	; 11
 202:	61 9a       	sbi	0x0c, 1	; 12
 204:	08 95       	ret

00000206 <_hw_swuart0_wait_ready>:
 206:	61 99       	sbic	0x0c, 1	; 12
 208:	fe cf       	rjmp	.-4      	; 0x206 <_hw_swuart0_wait_ready>
 20a:	08 95       	ret

0000020c <_hw_swuart0_sync>:
 20c:	b0 99       	sbic	0x16, 0	; 22
 20e:	0b c0       	rjmp	.+22     	; 0x226 <_hw_swuart0_sync+0x1a>
 210:	8a bd       	out	0x2a, r24	; 42
 212:	9b bd       	out	0x2b, r25	; 43
 214:	a0 91 65 00 	lds	r26, 0x0065
 218:	a0 93 63 00 	sts	0x0063, r26
 21c:	a0 91 66 00 	lds	r26, 0x0066
 220:	a0 93 64 00 	sts	0x0064, r26
 224:	2b cf       	rjmp	.-426    	; 0x7c <_hw_swuart0_st99>
 226:	cf 93       	push	r28
 228:	bf 93       	push	r27
 22a:	df 93       	push	r29
 22c:	aa b5       	in	r26, 0x2a	; 42
 22e:	8a 1b       	sub	r24, r26
 230:	80 93 65 00 	sts	0x0065, r24
 234:	bb b5       	in	r27, 0x2b	; 43
 236:	9b 0b       	sbc	r25, r27
 238:	90 93 66 00 	sts	0x0066, r25
 23c:	dc 01       	movw	r26, r24
 23e:	aa 0f       	add	r26, r26
 240:	bb 1f       	adc	r27, r27
 242:	aa 0f       	add	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	a8 0f       	add	r26, r24
 248:	b9 1f       	adc	r27, r25
 24a:	ec 01       	movw	r28, r24
 24c:	22 96       	adiw	r28, 0x02	; 2
 24e:	d6 95       	lsr	r29
 250:	c7 95       	ror	r28
 252:	d6 95       	lsr	r29
 254:	c7 95       	ror	r28
 256:	ac 1b       	sub	r26, r28
 258:	bd 0b       	sbc	r27, r29
 25a:	80 91 63 00 	lds	r24, 0x0063
 25e:	8a 17       	cp	r24, r26
 260:	90 91 64 00 	lds	r25, 0x0064
 264:	9b 07       	cpc	r25, r27
 266:	30 f1       	brcs	.+76     	; 0x2b4 <__stack+0x55>
 268:	ac 0f       	add	r26, r28
 26a:	bd 1f       	adc	r27, r29
 26c:	ac 0f       	add	r26, r28
 26e:	bd 1f       	adc	r27, r29
 270:	8a 17       	cp	r24, r26
 272:	9b 07       	cpc	r25, r27
 274:	f8 f4       	brcc	.+62     	; 0x2b4 <__stack+0x55>
 276:	80 91 65 00 	lds	r24, 0x0065
 27a:	90 91 66 00 	lds	r25, 0x0066
 27e:	dc 01       	movw	r26, r24
 280:	11 96       	adiw	r26, 0x01	; 1
 282:	b6 95       	lsr	r27
 284:	a7 95       	ror	r26
 286:	8a 0f       	add	r24, r26
 288:	9b 1f       	adc	r25, r27
 28a:	89 52       	subi	r24, 0x29	; 41
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	80 93 63 00 	sts	0x0063, r24
 292:	90 93 64 00 	sts	0x0064, r25
 296:	8a b5       	in	r24, 0x2a	; 42
 298:	90 91 65 00 	lds	r25, 0x0065
 29c:	89 0f       	add	r24, r25
 29e:	8a bd       	out	0x2a, r24	; 42
 2a0:	8b b5       	in	r24, 0x2b	; 43
 2a2:	90 91 66 00 	lds	r25, 0x0066
 2a6:	89 1f       	adc	r24, r25
 2a8:	8b bd       	out	0x2b, r24	; 43
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	80 93 62 00 	sts	0x0062, r24
 2b0:	59 9a       	sbi	0x0b, 1	; 11
 2b2:	61 9a       	sbi	0x0c, 1	; 12
 2b4:	df 91       	pop	r29
 2b6:	bf 91       	pop	r27
 2b8:	cf 91       	pop	r28
 2ba:	e0 ce       	rjmp	.-576    	; 0x7c <_hw_swuart0_st99>

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
