HW_DEVICE=atmega328p
hw_syshz=16000000
PIN_LED=hw_pin_pb5
PWM_PERIOD=0.020000
PWM_TMIN=0
PWM_TMAX=0.020000
COMPARE_MIN=(uint16_t)(0*16000000/8)
COMPARE_MAX=(uint16_t)(0.020000*16000000/8)
INPUT=hw_pin_pc0
COUNTER=hw_counter1
COUNTER_CLK_DIV=8
ADC_CLK_DIV=128


build/out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000238  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002cc  2**0
                  ALLOC
  3 .stab         00001140  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002376  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003782  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_12>
  34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  88:	0c 94 1a 01 	jmp	0x234	; 0x234 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:

/*  Service ADC "conversion completed" IRQ: compute duty
 *  Make the ISR interruptible so that counter IRQs are serviced promptly.
 */
HW_ISR( hw_adc0, isr_interruptible )
{
  90:	78 94       	sei
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31

HW_INLINE uint16_t _hw_read_r16 ( intptr_t ra, uint8_t rbn, uint8_t rbp )
{
  uint16_t m = (1UL<<rbn)-1 ;
  volatile uint16_t *p = (volatile uint16_t *)ra ;
  return ((*p)>>rbp) & m ;
  b4:	20 91 78 00 	lds	r18, 0x0078
  b8:	30 91 79 00 	lds	r19, 0x0079
  /*  Low-pass filter
   */
  const uint8_t                 ns = 32 ;       /* # of samples   */
  static uint16_t               lpfsum ;        /* sum of samples */

  lpfsum = lpfsum - (lpfsum + ns/2)/ns + adc ;
  bc:	80 91 00 01 	lds	r24, 0x0100
  c0:	90 91 01 01 	lds	r25, 0x0101
  c4:	28 0f       	add	r18, r24
  c6:	39 1f       	adc	r19, r25
  c8:	40 96       	adiw	r24, 0x10	; 16
  ca:	45 e0       	ldi	r20, 0x05	; 5
  cc:	96 95       	lsr	r25
  ce:	87 95       	ror	r24
  d0:	4a 95       	dec	r20
  d2:	e1 f7       	brne	.-8      	; 0xcc <__vector_21+0x3c>
  d4:	28 1b       	sub	r18, r24
  d6:	39 0b       	sbc	r19, r25
  d8:	30 93 01 01 	sts	0x0101, r19
  dc:	20 93 00 01 	sts	0x0100, r18

  /*  Compute duty in the range [COMPARE_MIN .. COMPARE_MAX] from lpfsum in the
   *  range [0..ns*1023]
   */
  uint32_t tmp32 = lpfsum ;
  tmp32 = (tmp32 * (COMPARE_MAX-COMPARE_MIN) + ns*1023/2) / (ns*1023) + COMPARE_MIN ;
  e0:	a0 e4       	ldi	r26, 0x40	; 64
  e2:	bc e9       	ldi	r27, 0x9C	; 156
  e4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__umulhisi3>
  e8:	60 51       	subi	r22, 0x10	; 16
  ea:	70 4c       	sbci	r23, 0xC0	; 192
  ec:	8f 4f       	sbci	r24, 0xFF	; 255
  ee:	9f 4f       	sbci	r25, 0xFF	; 255
  f0:	20 ee       	ldi	r18, 0xE0	; 224
  f2:	3f e7       	ldi	r19, 0x7F	; 127
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <__udivmodsi4>

  count_t tmp = tmp32 ;
  if ( sizeof(count_t) > 1 ) {
    hw_disable_interrupts();
  fc:	f8 94       	cli
    duty = tmp ;
  fe:	30 93 03 01 	sts	0x0103, r19
 102:	20 93 02 01 	sts	0x0102, r18
    hw_enable_interrupts();
 106:	78 94       	sei
#else
      /*  FIX
       */
      uint8_t sm = wm & v ;     /* what has to be set     */
      uint8_t cm = wm & (~v) ;  /* what has to be cleared */
      *p = (*p & ~cm) | sm ;
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
    duty = tmp ;

  /*  Start a new conversion
   */
  hw_trigger( hw_adc0 );
}
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	bf 91       	pop	r27
 118:	af 91       	pop	r26
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	7f 91       	pop	r23
 120:	6f 91       	pop	r22
 122:	5f 91       	pop	r21
 124:	4f 91       	pop	r20
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_13>:

/*  Service counter-overflow IRQ: turn the LED on and enable the compare IRQ
 *  that turns it off
 */
HW_ISR( COUNTER, overflow, isr_non_interruptible )
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
  /*  No need to protect access to duty since interrupts are not allowed */

  if ( duty ) {
 144:	80 91 02 01 	lds	r24, 0x0102
 148:	90 91 03 01 	lds	r25, 0x0103
 14c:	89 2b       	or	r24, r25
 14e:	a1 f0       	breq	.+40     	; 0x178 <__vector_13+0x44>
    /*
     *  Just 1 bit to be written at C address < 0x40 (ASM address < 0x20): use
     *  sbi/cbi
     */
    if ( v )
      *p |= wm ; /* sbi */
 150:	2d 9a       	sbi	0x05, 5	; 5
    hw_write( PIN_LED, 1 );
    if ( duty < COUNT_TOP ) {
 152:	80 91 02 01 	lds	r24, 0x0102
 156:	90 91 03 01 	lds	r25, 0x0103
 15a:	80 34       	cpi	r24, 0x40	; 64
 15c:	9c 49       	sbci	r25, 0x9C	; 156
 15e:	68 f4       	brcc	.+26     	; 0x17a <__vector_13+0x46>
      hw_write( hw_sub(COUNTER, compare1), duty );
 160:	80 91 02 01 	lds	r24, 0x0102
 164:	90 91 03 01 	lds	r25, 0x0103

    if ( rm == 0 )
      /*
       *  Nothing to be read, just write the new value
       */
      *p = v ;
 168:	90 93 8b 00 	sts	0x008B, r25
 16c:	80 93 8a 00 	sts	0x008A, r24
#else
      /*  FIX
       */
      uint8_t sm = wm & v ;     /* what has to be set     */
      uint8_t cm = wm & (~v) ;  /* what has to be cleared */
      *p = (*p & ~cm) | sm ;
 170:	80 91 6f 00 	lds	r24, 0x006F
 174:	84 60       	ori	r24, 0x04	; 4
 176:	04 c0       	rjmp	.+8      	; 0x180 <__vector_13+0x4c>
    if ( v )
      *p |= wm ; /* sbi */
    else {
      if ( wm & rfm )
	HWA_ERR("flag bit can only be cleared by writing 1 into it.");
      *p &= ~wm ; /* cbi */
 178:	2d 98       	cbi	0x05, 5	; 5
#else
      /*  FIX
       */
      uint8_t sm = wm & v ;     /* what has to be set     */
      uint8_t cm = wm & (~v) ;  /* what has to be cleared */
      *p = (*p & ~cm) | sm ;
 17a:	80 91 6f 00 	lds	r24, 0x006F
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	80 93 6f 00 	sts	0x006F, r24
  }
  else {
    hw_write( PIN_LED, 0 );
    hw_turn_irq( COUNTER, compare1, off );
  }
}
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <__vector_12>:
    if ( v )
      *p |= wm ; /* sbi */
    else {
      if ( wm & rfm )
	HWA_ERR("flag bit can only be cleared by writing 1 into it.");
      *p &= ~wm ; /* cbi */
 194:	2d 98       	cbi	0x05, 5	; 5
 */
#if hw_addr(hw_reg(hw_sup(PIN_LED), port)) < 0x40
HW_ISR( COUNTER, compare1, isr_naked )
{
  hw_write( PIN_LED, 0 );
  hw_asm("reti");
 196:	18 95       	reti

00000198 <main>:
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	23 bf       	out	0x33, r18	; 51
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
 19c:	25 9a       	sbi	0x04, 5	; 4
 19e:	40 9a       	sbi	0x08, 0	; 8
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	80 93 80 00 	sts	0x0080, r24
 1a6:	8a e1       	ldi	r24, 0x1A	; 26
 1a8:	80 93 81 00 	sts	0x0081, r24
    if ( rm )
      r->ovalue = *p ;

    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 1ac:	80 e4       	ldi	r24, 0x40	; 64
 1ae:	9c e9       	ldi	r25, 0x9C	; 156
 1b0:	90 93 89 00 	sts	0x0089, r25
 1b4:	80 93 88 00 	sts	0x0088, r24
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 1b8:	20 93 6f 00 	sts	0x006F, r18
 1bc:	80 e4       	ldi	r24, 0x40	; 64
 1be:	80 93 7c 00 	sts	0x007C, r24
 1c2:	8f ec       	ldi	r24, 0xCF	; 207
 1c4:	80 93 7a 00 	sts	0x007A, r24
 1c8:	20 93 7e 00 	sts	0x007E, r18

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
 1cc:	78 94       	sei

  for(;;)
    hw_sleep();
 1ce:	88 95       	sleep
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <main+0x36>

000001d2 <__umulhisi3>:
 1d2:	a2 9f       	mul	r26, r18
 1d4:	b0 01       	movw	r22, r0
 1d6:	b3 9f       	mul	r27, r19
 1d8:	c0 01       	movw	r24, r0
 1da:	a3 9f       	mul	r26, r19
 1dc:	70 0d       	add	r23, r0
 1de:	81 1d       	adc	r24, r1
 1e0:	11 24       	eor	r1, r1
 1e2:	91 1d       	adc	r25, r1
 1e4:	b2 9f       	mul	r27, r18
 1e6:	70 0d       	add	r23, r0
 1e8:	81 1d       	adc	r24, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	91 1d       	adc	r25, r1
 1ee:	08 95       	ret

000001f0 <__udivmodsi4>:
 1f0:	a1 e2       	ldi	r26, 0x21	; 33
 1f2:	1a 2e       	mov	r1, r26
 1f4:	aa 1b       	sub	r26, r26
 1f6:	bb 1b       	sub	r27, r27
 1f8:	fd 01       	movw	r30, r26
 1fa:	0d c0       	rjmp	.+26     	; 0x216 <__udivmodsi4_ep>

000001fc <__udivmodsi4_loop>:
 1fc:	aa 1f       	adc	r26, r26
 1fe:	bb 1f       	adc	r27, r27
 200:	ee 1f       	adc	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	a2 17       	cp	r26, r18
 206:	b3 07       	cpc	r27, r19
 208:	e4 07       	cpc	r30, r20
 20a:	f5 07       	cpc	r31, r21
 20c:	20 f0       	brcs	.+8      	; 0x216 <__udivmodsi4_ep>
 20e:	a2 1b       	sub	r26, r18
 210:	b3 0b       	sbc	r27, r19
 212:	e4 0b       	sbc	r30, r20
 214:	f5 0b       	sbc	r31, r21

00000216 <__udivmodsi4_ep>:
 216:	66 1f       	adc	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	88 1f       	adc	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	1a 94       	dec	r1
 220:	69 f7       	brne	.-38     	; 0x1fc <__udivmodsi4_loop>
 222:	60 95       	com	r22
 224:	70 95       	com	r23
 226:	80 95       	com	r24
 228:	90 95       	com	r25
 22a:	9b 01       	movw	r18, r22
 22c:	ac 01       	movw	r20, r24
 22e:	bd 01       	movw	r22, r26
 230:	cf 01       	movw	r24, r30
 232:	08 95       	ret

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
