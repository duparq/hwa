HW_DEVICE=atmega328p
hw_syshz=16000000
PIN_LED=hw_pin_pb5
TIMEOUT=250ms


build/out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000e8  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000017c  2**0
                  ALLOC
  3 .stab         00001014  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002348  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000034d8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_6>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 49 00 	call	0x92	; 0x92 <main>
  88:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_6>:
 *    instruction ourselves (otherwise avr-gcc does some register
 *    initializations even though none is used).
 */
HW_ISR( hw_wdog0, isr_naked )
{
  hw_asm("reti");
  90:	18 95       	reti

00000092 <main>:
              sleep,      enabled,
              sleep_mode, power_down );

  /*  Go into sleep definitely if the watchdog triggered a reset.
   */
  if ( hw_stat( hw_core0 ).reset_by_watchdog ) {
  92:	04 b6       	in	r0, 0x34	; 52
  94:	03 fe       	sbrs	r0, 3
  96:	0c c0       	rjmp	.+24     	; 0xb0 <main+0x1e>
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  98:	14 be       	out	0x34, r1	; 52
  9a:	85 e0       	ldi	r24, 0x05	; 5
  9c:	83 bf       	out	0x33, r24	; 51
  9e:	88 e9       	ldi	r24, 0x98	; 152
  a0:	80 93 60 00 	sts	0x0060, r24
  a4:	10 92 60 00 	sts	0x0060, r1
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
  a8:	25 9a       	sbi	0x04, 5	; 4

    /*  When the device is reset by the watchdog, the watchdog remains enabled!
     */
    hwa_turn( hw_wdog0, off );
    hwa_commit();
    hw_sleep();
  aa:	88 95       	sleep
    /*
     *  Just 1 bit to be written at C address < 0x40 (ASM address < 0x20): use
     *  sbi/cbi
     */
    if ( v )
      *p |= wm ; /* sbi */
  ac:	1d 9a       	sbi	0x03, 5	; 3
  ae:	fe cf       	rjmp	.-4      	; 0xac <main+0x1a>
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	83 bf       	out	0x33, r24	; 51
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	80 93 60 00 	sts	0x0060, r24
  ba:	8c e4       	ldi	r24, 0x4C	; 76
  bc:	80 93 60 00 	sts	0x0060, r24
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
  c0:	25 9a       	sbi	0x04, 5	; 4
   */
  hwa_commit();

  /*  MCU can't awake from sleep without interrupts!
   */
  hw_enable_interrupts();
  c2:	78 94       	sei
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  c4:	2c e5       	ldi	r18, 0x5C	; 92
  c6:	9c e4       	ldi	r25, 0x4C	; 76

  static uint8_t count ;

  for(;;) {
    hw_sleep();
  c8:	88 95       	sleep
    /*
     *  Just 1 bit to be written at C address < 0x40 (ASM address < 0x20): use
     *  sbi/cbi
     */
    if ( v )
      *p |= wm ; /* sbi */
  ca:	1d 9a       	sbi	0x03, 5	; 3
     */
    hwa_turn_irq( hw_wdog0, off );
    hwa_nocommit();     /* do not write the context */

    hw_toggle( PIN_LED );
    count++ ;
  cc:	80 91 00 01 	lds	r24, 0x0100
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 00 01 	sts	0x0100, r24
    if ( count < 19 ) {
  d6:	83 31       	cpi	r24, 0x13	; 19
  d8:	b8 f7       	brcc	.-18     	; 0xc8 <main+0x36>
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  da:	20 93 60 00 	sts	0x0060, r18
  de:	90 93 60 00 	sts	0x0060, r25
  e2:	f2 cf       	rjmp	.-28     	; 0xc8 <main+0x36>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
