HW_DEVICE="attiny84"
hw_syshz="8000000"
PIN_LED="pin_pa6"
TIMEOUT="250ms"

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	15 c0       	rjmp	.+42     	; 0x34 <__vector_4>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	0d d0       	rcall	.+26     	; 0x4a <main>
  30:	14 c0       	rjmp	.+40     	; 0x5a <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <__vector_4>:

/*  Service watchdog IRQ
 */
HW_ISR( hw_wdog0 )
{
  34:	1f 92       	push	r1
  36:	0f 92       	push	r0
  38:	0f b6       	in	r0, 0x3f	; 63
  3a:	0f 92       	push	r0
  3c:	11 24       	eor	r1, r1
    /*
     *  Just 1 bit to be written at C address < 0x40 (ASM address < 0x20): use
     *  sbi/cbi
     */
    if ( v )
      *p |= wm ; /* sbi */
  3e:	ce 9a       	sbi	0x19, 6	; 25
  /*  Blink the LED
   */
  hw_toggle( PIN_LED );
}
  40:	0f 90       	pop	r0
  42:	0f be       	out	0x3f, r0	; 63
  44:	0f 90       	pop	r0
  46:	1f 90       	pop	r1
  48:	18 95       	reti

0000004a <main>:
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  4a:	80 e2       	ldi	r24, 0x20	; 32
  4c:	85 bf       	out	0x35, r24	; 53
  4e:	84 e4       	ldi	r24, 0x44	; 68
  50:	81 bd       	out	0x21, r24	; 33
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
  52:	d6 9a       	sbi	0x1a, 6	; 26
   */
  hwa_commit();

  /*  Enable interrupts
   */
  hw_enable_interrupts();
  54:	78 94       	sei

  /*  Sleep between interrupts
   */
  for(;;)
    hw_sleep();
  56:	88 95       	sleep
  58:	fe cf       	rjmp	.-4      	; 0x56 <main+0xc>

0000005a <_exit>:
  5a:	f8 94       	cli

0000005c <__stop_program>:
  5c:	ff cf       	rjmp	.-2      	; 0x5c <__stop_program>
