HW_DEVICE=attiny84
hw_syshz=8000000
hw_swuart0_pin_rxd=hw_pin_pb0
hw_swuart0_pin_txd=hw_pin_pb0
hw_swuart0_autosync=sync_5_1
hw_swuart0_compare=hw_oc10
hw_swuart0_clk_div=1
UART=hw_swuart0
SPI=hw_spimaster_swclk0
NRF_CSN=hw_pin_pb1


build/out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002c4  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000358  2**0
                  ALLOC
  3 .stab         00001050  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001eff  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000032a7  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__vector_3>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	3d c0       	rjmp	.+122    	; 0x88 <__vector_6>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a7 36       	cpi	r26, 0x67	; 103
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	83 d0       	rcall	.+262    	; 0x146 <main>
  40:	3f c1       	rjmp	.+638    	; 0x2c0 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_3>:
  44:	8f 93       	push	r24
  46:	9f 93       	push	r25
  48:	8c b5       	in	r24, 0x2c	; 44
  4a:	78 94       	sei
  4c:	9d b5       	in	r25, 0x2d	; 45
  4e:	af 93       	push	r26
  50:	af b7       	in	r26, 0x3f	; 63
  52:	af 93       	push	r26
  54:	9e 9b       	sbis	0x13, 6	; 19
  56:	dc c0       	rjmp	.+440    	; 0x210 <_hw_swuart0_sync>
  58:	b0 99       	sbic	0x16, 0	; 22
  5a:	10 c0       	rjmp	.+32     	; 0x7c <_hw_swuart0_st99>
  5c:	ab b7       	in	r26, 0x3b	; 59
  5e:	af 7d       	andi	r26, 0xDF	; 223
  60:	ab bf       	out	0x3b, r26	; 59
  62:	a0 91 63 00 	lds	r26, 0x0063
  66:	8a 0f       	add	r24, r26
  68:	a0 91 64 00 	lds	r26, 0x0064
  6c:	9a 1f       	adc	r25, r26
  6e:	9b bd       	out	0x2b, r25	; 43
  70:	8a bd       	out	0x2a, r24	; 42
  72:	88 e0       	ldi	r24, 0x08	; 8
  74:	80 93 62 00 	sts	0x0062, r24
  78:	59 9a       	sbi	0x0b, 1	; 11
  7a:	61 9a       	sbi	0x0c, 1	; 12

0000007c <_hw_swuart0_st99>:
  7c:	af 91       	pop	r26
  7e:	af bf       	out	0x3f, r26	; 63
  80:	af 91       	pop	r26
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	18 95       	reti

00000088 <__vector_6>:
  88:	ff 93       	push	r31
  8a:	ff b7       	in	r31, 0x3f	; 63
  8c:	ff 93       	push	r31
  8e:	9c 99       	sbic	0x13, 4	; 19
  90:	36 c0       	rjmp	.+108    	; 0xfe <_hw_swuart0_tx>
  92:	78 94       	sei
  94:	f6 b3       	in	r31, 0x16	; 22
  96:	f0 fb       	bst	r31, 0
  98:	f0 91 61 00 	lds	r31, 0x0061
  9c:	f6 95       	lsr	r31
  9e:	f7 f9       	bld	r31, 7
  a0:	f0 93 61 00 	sts	0x0061, r31
  a4:	f0 91 62 00 	lds	r31, 0x0062
  a8:	f1 50       	subi	r31, 0x01	; 1
  aa:	f0 93 62 00 	sts	0x0062, r31
  ae:	ba f0       	brmi	.+46     	; 0xde <_hw_swuart0_rxeof>
  b0:	21 f4       	brne	.+8      	; 0xba <_hw_swuart0_next>
  b2:	f0 91 61 00 	lds	r31, 0x0061
  b6:	f0 93 60 00 	sts	0x0060, r31

000000ba <_hw_swuart0_next>:
  ba:	ef 93       	push	r30
  bc:	e0 91 65 00 	lds	r30, 0x0065
  c0:	f0 91 66 00 	lds	r31, 0x0066
  c4:	df 93       	push	r29
  c6:	da b5       	in	r29, 0x2a	; 42
  c8:	ed 0f       	add	r30, r29
  ca:	db b5       	in	r29, 0x2b	; 43
  cc:	fd 1f       	adc	r31, r29
  ce:	df 91       	pop	r29
  d0:	fb bd       	out	0x2b, r31	; 43
  d2:	ea bd       	out	0x2a, r30	; 42
  d4:	ef 91       	pop	r30
  d6:	ff 91       	pop	r31
  d8:	ff bf       	out	0x3f, r31	; 63
  da:	ff 91       	pop	r31
  dc:	18 95       	reti

000000de <_hw_swuart0_rxeof>:
  de:	f3 b3       	in	r31, 0x13	; 19
  e0:	f0 f9       	bld	r31, 0
  e2:	f0 62       	ori	r31, 0x20	; 32
  e4:	f6 fd       	sbrc	r31, 6
  e6:	f4 60       	ori	r31, 0x04	; 4
  e8:	f0 64       	ori	r31, 0x40	; 64
  ea:	f3 bb       	out	0x13, r31	; 19
  ec:	61 98       	cbi	0x0c, 1	; 12
  ee:	f0 e2       	ldi	r31, 0x20	; 32
  f0:	fa bf       	out	0x3a, r31	; 58
  f2:	f8 94       	cli
  f4:	fb b7       	in	r31, 0x3b	; 59
  f6:	f0 62       	ori	r31, 0x20	; 32
  f8:	78 94       	sei
  fa:	fb bf       	out	0x3b, r31	; 59
  fc:	de cf       	rjmp	.-68     	; 0xba <_hw_swuart0_next>

000000fe <_hw_swuart0_tx>:
  fe:	f0 91 61 00 	lds	r31, 0x0061
 102:	f6 95       	lsr	r31
 104:	18 f4       	brcc	.+6      	; 0x10c <_hw_swuart0_tx0>

00000106 <_hw_swuart0_tx1>:
 106:	78 94       	sei
 108:	c0 9a       	sbi	0x18, 0	; 24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <_hw_swuart0_txn>

0000010c <_hw_swuart0_tx0>:
 10c:	78 94       	sei
 10e:	c0 98       	cbi	0x18, 0	; 24

00000110 <_hw_swuart0_txn>:
 110:	f0 93 61 00 	sts	0x0061, r31
 114:	f0 91 62 00 	lds	r31, 0x0062
 118:	f1 50       	subi	r31, 0x01	; 1
 11a:	f0 93 62 00 	sts	0x0062, r31
 11e:	2a f0       	brmi	.+10     	; 0x12a <_hw_swuart0_txeof>
 120:	19 f4       	brne	.+6      	; 0x128 <_hw_swuart0_txn+0x18>
 122:	f3 e0       	ldi	r31, 0x03	; 3
 124:	f0 93 61 00 	sts	0x0061, r31
 128:	c8 cf       	rjmp	.-112    	; 0xba <_hw_swuart0_next>

0000012a <_hw_swuart0_txeof>:
 12a:	9d 9a       	sbi	0x13, 5	; 19
 12c:	61 98       	cbi	0x0c, 1	; 12
 12e:	b8 98       	cbi	0x17, 0	; 23
 130:	c0 98       	cbi	0x18, 0	; 24
 132:	9b 9a       	sbi	0x13, 3	; 19
 134:	9c 98       	cbi	0x13, 4	; 19
 136:	f0 e2       	ldi	r31, 0x20	; 32
 138:	fa bf       	out	0x3a, r31	; 58
 13a:	f8 94       	cli
 13c:	fb b7       	in	r31, 0x3b	; 59
 13e:	f0 62       	ori	r31, 0x20	; 32
 140:	78 94       	sei
 142:	fb bf       	out	0x3b, r31	; 59
 144:	ba cf       	rjmp	.-140    	; 0xba <_hw_swuart0_next>

00000146 <main>:
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 146:	80 e2       	ldi	r24, 0x20	; 32
 148:	8b bf       	out	0x3b, r24	; 59
 14a:	8a bf       	out	0x3a, r24	; 58
 14c:	80 e3       	ldi	r24, 0x30	; 48
 14e:	8a bb       	out	0x1a, r24	; 26
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
 150:	c1 9a       	sbi	0x18, 1	; 24
 152:	b9 9a       	sbi	0x17, 1	; 23
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 bd       	out	0x20, r24	; 32
 158:	8e bd       	out	0x2e, r24	; 46
 15a:	8a e1       	ldi	r24, 0x1A	; 26
 15c:	8d b9       	out	0x0d, r24	; 13

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
 15e:	78 94       	sei

  /*  Wait for UART synchronization
   */
  while ( !hw_stat(UART).synced ) {}
 160:	9e 9b       	sbis	0x13, 6	; 19
 162:	fe cf       	rjmp	.-4      	; 0x160 <main+0x1a>
   */
  for(;;) {

    /*  Prompt
     */
    hw_write( UART, '$' );
 164:	84 e2       	ldi	r24, 0x24	; 36
 166:	2f d0       	rcall	.+94     	; 0x1c6 <_hw_swuart0_putbyte>

    /*  Get command
     */
    uint8_t c = hw_read( UART );
 168:	28 d0       	rcall	.+80     	; 0x1ba <_hw_swuart0_getbyte>
    if ( c == '=' ) {
 16a:	8d 33       	cpi	r24, 0x3D	; 61
 16c:	01 f5       	brne	.+64     	; 0x1ae <main+0x68>

      /*  Number of bytes to send to SPI slave
       */
      uint8_t ntx = hw_read( UART );
 16e:	25 d0       	rcall	.+74     	; 0x1ba <_hw_swuart0_getbyte>
 170:	d8 2f       	mov	r29, r24
      if ( ntx < 1 || ntx > 33 )
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	8d 0f       	add	r24, r29
 176:	81 32       	cpi	r24, 0x21	; 33
 178:	d0 f4       	brcc	.+52     	; 0x1ae <main+0x68>
        goto error ;

      /*  Number of bytes to send back to talker
       */
      uint8_t nrx = hw_read( UART );
 17a:	1f d0       	rcall	.+62     	; 0x1ba <_hw_swuart0_getbyte>
 17c:	c8 2f       	mov	r28, r24
      if ( nrx > 32 )
 17e:	81 32       	cpi	r24, 0x21	; 33
 180:	b0 f4       	brcc	.+44     	; 0x1ae <main+0x68>
    if ( v )
      *p |= wm ; /* sbi */
    else {
      if ( wm & rfm )
	HWA_ERR("flag bit can only be cleared by writing 1 into it.");
      *p &= ~wm ; /* cbi */
 182:	c1 98       	cbi	0x18, 1	; 24
        goto error ;

      /*  Select SPI slave and send data
       */
      hw_write( NRF_CSN, 0 );
      while ( ntx-- ) {
 184:	d1 50       	subi	r29, 0x01	; 1
 186:	60 f0       	brcs	.+24     	; 0x1a0 <main+0x5a>
        c = hw_read( UART );
 188:	18 d0       	rcall	.+48     	; 0x1ba <_hw_swuart0_getbyte>

    if ( rm == 0 )
      /*
       *  Nothing to be read, just write the new value
       */
      *p = v ;
 18a:	8f b9       	out	0x0f, r24	; 15
    /*
     *  Just 1 bit to be written at C address < 0x40 (ASM address < 0x20): use
     *  sbi/cbi
     */
    if ( v )
      *p |= wm ; /* sbi */
 18c:	76 9a       	sbi	0x0e, 6	; 14
 18e:	68 9a       	sbi	0x0d, 0	; 13
        hw_write( SPI, c );
 190:	76 9b       	sbis	0x0e, 6	; 14
 192:	fd cf       	rjmp	.-6      	; 0x18e <main+0x48>
 194:	f7 cf       	rjmp	.-18     	; 0x184 <main+0x3e>
 196:	68 9a       	sbi	0x0d, 0	; 13
      }

      /*  Send reply to talker and deselect SPI slave
       */
      while ( nrx-- ) {
        hw_write( SPI, 0 );
 198:	76 9b       	sbis	0x0e, 6	; 14
 19a:	fd cf       	rjmp	.-6      	; 0x196 <main+0x50>
 */
HW_INLINE uint8_t _hw_read__r8 ( intptr_t ra, uint8_t rbn, uint8_t rbp )
{
  uint8_t m = (1U<<rbn)-1 ;
  volatile uint8_t *p = (volatile uint8_t *)ra ;
  return ((*p)>>rbp) & m ;
 19c:	8f b1       	in	r24, 0x0f	; 15
        c = hw_read( SPI );
        hw_write( UART, c );
 19e:	13 d0       	rcall	.+38     	; 0x1c6 <_hw_swuart0_putbyte>
        hw_write( SPI, c );
      }

      /*  Send reply to talker and deselect SPI slave
       */
      while ( nrx-- ) {
 1a0:	c1 50       	subi	r28, 0x01	; 1
 1a2:	18 f0       	brcs	.+6      	; 0x1aa <main+0x64>

    if ( rm == 0 )
      /*
       *  Nothing to be read, just write the new value
       */
      *p = v ;
 1a4:	1f b8       	out	0x0f, r1	; 15
    /*
     *  Just 1 bit to be written at C address < 0x40 (ASM address < 0x20): use
     *  sbi/cbi
     */
    if ( v )
      *p |= wm ; /* sbi */
 1a6:	76 9a       	sbi	0x0e, 6	; 14
 1a8:	f6 cf       	rjmp	.-20     	; 0x196 <main+0x50>
 1aa:	c1 9a       	sbi	0x18, 1	; 24
 1ac:	db cf       	rjmp	.-74     	; 0x164 <main+0x1e>
       *  First byte of command must be '='. Send '!' as error indicator and
       *  wait for '\n' as error acknowledgement.
       */
      do {
      error:
        hw_write( UART, '!' );
 1ae:	81 e2       	ldi	r24, 0x21	; 33
 1b0:	0a d0       	rcall	.+20     	; 0x1c6 <_hw_swuart0_putbyte>
        c = hw_read( UART );
 1b2:	03 d0       	rcall	.+6      	; 0x1ba <_hw_swuart0_getbyte>
      } while ( c != '\n' ) ;
 1b4:	8a 30       	cpi	r24, 0x0A	; 10
 1b6:	d9 f7       	brne	.-10     	; 0x1ae <main+0x68>
 1b8:	d5 cf       	rjmp	.-86     	; 0x164 <main+0x1e>

000001ba <_hw_swuart0_getbyte>:
 1ba:	9a 9b       	sbis	0x13, 2	; 19
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <_hw_swuart0_getbyte>
 1be:	9a 98       	cbi	0x13, 2	; 19
 1c0:	80 91 60 00 	lds	r24, 0x0060
 1c4:	08 95       	ret

000001c6 <_hw_swuart0_putbyte>:
 1c6:	98 e0       	ldi	r25, 0x08	; 8

000001c8 <_hw_swuart0_putbits>:
 1c8:	20 d0       	rcall	.+64     	; 0x20a <_hw_swuart0_wait_ready>
 1ca:	9d 9b       	sbis	0x13, 5	; 19
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <_hw_swuart0_putbits+0xa>
 1ce:	59 9b       	sbis	0x0b, 1	; 11
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <_hw_swuart0_putbits+0x6>
 1d2:	ab b7       	in	r26, 0x3b	; 59
 1d4:	af 7d       	andi	r26, 0xDF	; 223
 1d6:	ab bf       	out	0x3b, r26	; 59
 1d8:	80 93 61 00 	sts	0x0061, r24
 1dc:	83 e5       	ldi	r24, 0x53	; 83
 1de:	83 bb       	out	0x13, r24	; 19
 1e0:	90 93 62 00 	sts	0x0062, r25
 1e4:	c0 9a       	sbi	0x18, 0	; 24
 1e6:	b8 9a       	sbi	0x17, 0	; 23
 1e8:	f8 94       	cli
 1ea:	8c b5       	in	r24, 0x2c	; 44
 1ec:	9d b5       	in	r25, 0x2d	; 45
 1ee:	78 94       	sei
 1f0:	c0 98       	cbi	0x18, 0	; 24
 1f2:	a0 91 65 00 	lds	r26, 0x0065
 1f6:	b0 91 66 00 	lds	r27, 0x0066
 1fa:	53 97       	sbiw	r26, 0x13	; 19
 1fc:	8a 0f       	add	r24, r26
 1fe:	9b 1f       	adc	r25, r27
 200:	9b bd       	out	0x2b, r25	; 43
 202:	8a bd       	out	0x2a, r24	; 42
 204:	59 9a       	sbi	0x0b, 1	; 11
 206:	61 9a       	sbi	0x0c, 1	; 12
 208:	08 95       	ret

0000020a <_hw_swuart0_wait_ready>:
 20a:	61 99       	sbic	0x0c, 1	; 12
 20c:	fe cf       	rjmp	.-4      	; 0x20a <_hw_swuart0_wait_ready>
 20e:	08 95       	ret

00000210 <_hw_swuart0_sync>:
 210:	b0 99       	sbic	0x16, 0	; 22
 212:	0b c0       	rjmp	.+22     	; 0x22a <_hw_swuart0_sync+0x1a>
 214:	8a bd       	out	0x2a, r24	; 42
 216:	9b bd       	out	0x2b, r25	; 43
 218:	a0 91 65 00 	lds	r26, 0x0065
 21c:	a0 93 63 00 	sts	0x0063, r26
 220:	a0 91 66 00 	lds	r26, 0x0066
 224:	a0 93 64 00 	sts	0x0064, r26
 228:	29 cf       	rjmp	.-430    	; 0x7c <_hw_swuart0_st99>
 22a:	cf 93       	push	r28
 22c:	bf 93       	push	r27
 22e:	df 93       	push	r29
 230:	aa b5       	in	r26, 0x2a	; 42
 232:	8a 1b       	sub	r24, r26
 234:	80 93 65 00 	sts	0x0065, r24
 238:	bb b5       	in	r27, 0x2b	; 43
 23a:	9b 0b       	sbc	r25, r27
 23c:	90 93 66 00 	sts	0x0066, r25
 240:	dc 01       	movw	r26, r24
 242:	aa 0f       	add	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	aa 0f       	add	r26, r26
 248:	bb 1f       	adc	r27, r27
 24a:	a8 0f       	add	r26, r24
 24c:	b9 1f       	adc	r27, r25
 24e:	ec 01       	movw	r28, r24
 250:	22 96       	adiw	r28, 0x02	; 2
 252:	d6 95       	lsr	r29
 254:	c7 95       	ror	r28
 256:	d6 95       	lsr	r29
 258:	c7 95       	ror	r28
 25a:	ac 1b       	sub	r26, r28
 25c:	bd 0b       	sbc	r27, r29
 25e:	80 91 63 00 	lds	r24, 0x0063
 262:	8a 17       	cp	r24, r26
 264:	90 91 64 00 	lds	r25, 0x0064
 268:	9b 07       	cpc	r25, r27
 26a:	30 f1       	brcs	.+76     	; 0x2b8 <__stack+0x59>
 26c:	ac 0f       	add	r26, r28
 26e:	bd 1f       	adc	r27, r29
 270:	ac 0f       	add	r26, r28
 272:	bd 1f       	adc	r27, r29
 274:	8a 17       	cp	r24, r26
 276:	9b 07       	cpc	r25, r27
 278:	f8 f4       	brcc	.+62     	; 0x2b8 <__stack+0x59>
 27a:	80 91 65 00 	lds	r24, 0x0065
 27e:	90 91 66 00 	lds	r25, 0x0066
 282:	dc 01       	movw	r26, r24
 284:	11 96       	adiw	r26, 0x01	; 1
 286:	b6 95       	lsr	r27
 288:	a7 95       	ror	r26
 28a:	8a 0f       	add	r24, r26
 28c:	9b 1f       	adc	r25, r27
 28e:	89 52       	subi	r24, 0x29	; 41
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	80 93 63 00 	sts	0x0063, r24
 296:	90 93 64 00 	sts	0x0064, r25
 29a:	8a b5       	in	r24, 0x2a	; 42
 29c:	90 91 65 00 	lds	r25, 0x0065
 2a0:	89 0f       	add	r24, r25
 2a2:	8a bd       	out	0x2a, r24	; 42
 2a4:	8b b5       	in	r24, 0x2b	; 43
 2a6:	90 91 66 00 	lds	r25, 0x0066
 2aa:	89 1f       	adc	r24, r25
 2ac:	8b bd       	out	0x2b, r24	; 43
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	80 93 62 00 	sts	0x0062, r24
 2b4:	59 9a       	sbi	0x0b, 1	; 11
 2b6:	61 9a       	sbi	0x0c, 1	; 12
 2b8:	df 91       	pop	r29
 2ba:	bf 91       	pop	r27
 2bc:	cf 91       	pop	r28
 2be:	de ce       	rjmp	.-580    	; 0x7c <_hw_swuart0_st99>

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
