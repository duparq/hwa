HW_DEVICE="attiny85"
HW_SYSHZ="8000000"
hw_swuart0_pin_rxd="pb3"
hw_swuart0_pin_txd="pb3"
hw_swuart0_autosync="sync_5_1"
hw_swuart0_compare="counter1compare0"
hw_swuart0_clk_div="1"
COUNTER="counter0"
PIN_ANALOG_INPUT="pb2"
PIN_LED="pb0"

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1d c0       	rjmp	.+58     	; 0x40 <__vector_2>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__vector_3>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	9a c0       	rjmp	.+308    	; 0x140 <__vector_5>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	a3 c0       	rjmp	.+326    	; 0x158 <__vector_8>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a8 36       	cpi	r26, 0x68	; 104
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	a6 d0       	rcall	.+332    	; 0x188 <main>
  3c:	30 c1       	rjmp	.+608    	; 0x29e <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_2>:
  40:	8f 93       	push	r24
  42:	78 94       	sei
  44:	8f b5       	in	r24, 0x2f	; 47
  46:	af 93       	push	r26
  48:	af b7       	in	r26, 0x3f	; 63
  4a:	af 93       	push	r26
  4c:	8e 9b       	sbis	0x11, 6	; 17
  4e:	ef c0       	rjmp	.+478    	; 0x22e <_hw_swuart0_sync>
  50:	b3 99       	sbic	0x16, 3	; 22
  52:	11 c0       	rjmp	.+34     	; 0x76 <_hw_swuart0_st99>
  54:	ab b7       	in	r26, 0x3b	; 59
  56:	af 7d       	andi	r26, 0xDF	; 223
  58:	ab bf       	out	0x3b, r26	; 59
  5a:	a0 91 63 00 	lds	r26, 0x0063
  5e:	8a 0f       	add	r24, r26
  60:	8e bd       	out	0x2e, r24	; 46
  62:	88 e0       	ldi	r24, 0x08	; 8
  64:	80 93 62 00 	sts	0x0062, r24
  68:	80 e4       	ldi	r24, 0x40	; 64
  6a:	88 bf       	out	0x38, r24	; 56
  6c:	f8 94       	cli
  6e:	89 b7       	in	r24, 0x39	; 57
  70:	80 64       	ori	r24, 0x40	; 64
  72:	78 94       	sei
  74:	89 bf       	out	0x39, r24	; 57

00000076 <_hw_swuart0_st99>:
  76:	af 91       	pop	r26
  78:	af bf       	out	0x3f, r26	; 63
  7a:	af 91       	pop	r26
  7c:	8f 91       	pop	r24
  7e:	18 95       	reti

00000080 <__vector_3>:
  80:	ff 93       	push	r31
  82:	ff b7       	in	r31, 0x3f	; 63
  84:	ff 93       	push	r31
  86:	8c 99       	sbic	0x11, 4	; 17
  88:	33 c0       	rjmp	.+102    	; 0xf0 <_hw_swuart0_tx>
  8a:	78 94       	sei
  8c:	f6 b3       	in	r31, 0x16	; 22
  8e:	f3 fb       	bst	r31, 3
  90:	f0 91 61 00 	lds	r31, 0x0061
  94:	f6 95       	lsr	r31
  96:	f7 f9       	bld	r31, 7
  98:	f0 93 61 00 	sts	0x0061, r31
  9c:	f0 91 62 00 	lds	r31, 0x0062
  a0:	f1 50       	subi	r31, 0x01	; 1
  a2:	f0 93 62 00 	sts	0x0062, r31
  a6:	82 f0       	brmi	.+32     	; 0xc8 <_hw_swuart0_rxeof>
  a8:	21 f4       	brne	.+8      	; 0xb2 <_hw_swuart0_next>
  aa:	f0 91 61 00 	lds	r31, 0x0061
  ae:	f0 93 60 00 	sts	0x0060, r31

000000b2 <_hw_swuart0_next>:
  b2:	ef 93       	push	r30
  b4:	ee b5       	in	r30, 0x2e	; 46
  b6:	f0 91 64 00 	lds	r31, 0x0064
  ba:	ef 0f       	add	r30, r31
  bc:	ee bd       	out	0x2e, r30	; 46
  be:	ef 91       	pop	r30
  c0:	ff 91       	pop	r31
  c2:	ff bf       	out	0x3f, r31	; 63
  c4:	ff 91       	pop	r31
  c6:	18 95       	reti

000000c8 <_hw_swuart0_rxeof>:
  c8:	f1 b3       	in	r31, 0x11	; 17
  ca:	f0 f9       	bld	r31, 0
  cc:	f0 62       	ori	r31, 0x20	; 32
  ce:	f6 fd       	sbrc	r31, 6
  d0:	f4 60       	ori	r31, 0x04	; 4
  d2:	f0 64       	ori	r31, 0x40	; 64
  d4:	f1 bb       	out	0x11, r31	; 17
  d6:	f8 94       	cli
  d8:	f9 b7       	in	r31, 0x39	; 57
  da:	ff 7b       	andi	r31, 0xBF	; 191
  dc:	78 94       	sei
  de:	f9 bf       	out	0x39, r31	; 57
  e0:	f0 e2       	ldi	r31, 0x20	; 32
  e2:	fa bf       	out	0x3a, r31	; 58
  e4:	f8 94       	cli
  e6:	fb b7       	in	r31, 0x3b	; 59
  e8:	f0 62       	ori	r31, 0x20	; 32
  ea:	78 94       	sei
  ec:	fb bf       	out	0x3b, r31	; 59
  ee:	e1 cf       	rjmp	.-62     	; 0xb2 <_hw_swuart0_next>

000000f0 <_hw_swuart0_tx>:
  f0:	f0 91 61 00 	lds	r31, 0x0061
  f4:	f6 95       	lsr	r31
  f6:	18 f4       	brcc	.+6      	; 0xfe <_hw_swuart0_tx0>

000000f8 <_hw_swuart0_tx1>:
  f8:	78 94       	sei
  fa:	c3 9a       	sbi	0x18, 3	; 24
  fc:	02 c0       	rjmp	.+4      	; 0x102 <_hw_swuart0_txn>

000000fe <_hw_swuart0_tx0>:
  fe:	78 94       	sei
 100:	c3 98       	cbi	0x18, 3	; 24

00000102 <_hw_swuart0_txn>:
 102:	f0 93 61 00 	sts	0x0061, r31
 106:	f0 91 62 00 	lds	r31, 0x0062
 10a:	f1 50       	subi	r31, 0x01	; 1
 10c:	f0 93 62 00 	sts	0x0062, r31
 110:	2a f0       	brmi	.+10     	; 0x11c <_hw_swuart0_txeof>
 112:	19 f4       	brne	.+6      	; 0x11a <_hw_swuart0_txn+0x18>
 114:	f3 e0       	ldi	r31, 0x03	; 3
 116:	f0 93 61 00 	sts	0x0061, r31
 11a:	cb cf       	rjmp	.-106    	; 0xb2 <_hw_swuart0_next>

0000011c <_hw_swuart0_txeof>:
 11c:	8d 9a       	sbi	0x11, 5	; 17
 11e:	f8 94       	cli
 120:	f9 b7       	in	r31, 0x39	; 57
 122:	ff 7b       	andi	r31, 0xBF	; 191
 124:	78 94       	sei
 126:	f9 bf       	out	0x39, r31	; 57
 128:	bb 98       	cbi	0x17, 3	; 23
 12a:	c3 98       	cbi	0x18, 3	; 24
 12c:	8b 9a       	sbi	0x11, 3	; 17
 12e:	8c 98       	cbi	0x11, 4	; 17
 130:	f0 e2       	ldi	r31, 0x20	; 32
 132:	fa bf       	out	0x3a, r31	; 58
 134:	f8 94       	cli
 136:	fb b7       	in	r31, 0x3b	; 59
 138:	f0 62       	ori	r31, 0x20	; 32
 13a:	78 94       	sei
 13c:	fb bf       	out	0x3b, r31	; 59
 13e:	b9 cf       	rjmp	.-142    	; 0xb2 <_hw_swuart0_next>

00000140 <__vector_5>:

/*  Service counter overflow interrupt:
 *    turn the ADC on, it will start a conversion as the MCU enters sleep
 */
HW_ISR( COUNTER, overflow )
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
    /*
     *  Just 1 bit to be written at C address < 0x40 (ASM address < 0x20): use
     *  sbi/cbi
     */
    if ( v )
      *p |= wm ; /* sbi */
 14a:	37 9a       	sbi	0x06, 7	; 6
 14c:	b0 9a       	sbi	0x16, 0	; 22
  hw_power( hw_adc0, on );
  hw_toggle( PIN_LED );
}
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_8>:

/*  Service ADC conversion interrupt:
 *    get ADC result, stop the ADC, signal new data ready
 */
HW_ISR( hw_adc0 )
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25

HW_INLINE uint16_t _hw_read__r16 ( intptr_t ra, uint8_t rbn, uint8_t rbp )
{
  uint16_t m = (1UL<<rbn)-1 ;
  volatile uint16_t *p = (volatile uint16_t *)ra ;
  return ((*p)>>rbp) & m ;
 166:	84 b1       	in	r24, 0x04	; 4
 168:	95 b1       	in	r25, 0x05	; 5
  adc = hw_read( hw_adc0 );
 16a:	90 93 67 00 	sts	0x0067, r25
 16e:	80 93 66 00 	sts	0x0066, r24
    if ( v )
      *p |= wm ; /* sbi */
    else {
      if ( wm & rfm )
	HWA_ERR("flag bit can only be cleared by writing 1 into it.");
      *p &= ~wm ; /* cbi */
 172:	37 98       	cbi	0x06, 7	; 6
  hw_power( hw_adc0, off );
  x_adc = 1 ;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 65 00 	sts	0x0065, r24
}
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <main>:
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	8b bf       	out	0x3b, r24	; 59
 18c:	8a bf       	out	0x3a, r24	; 58
 18e:	85 bf       	out	0x35, r24	; 53
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
 190:	ab 9a       	sbi	0x15, 3	; 21
 192:	b8 9a       	sbi	0x17, 0	; 23
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 194:	8e e4       	ldi	r24, 0x4E	; 78
 196:	89 bd       	out	0x29, r24	; 41
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	8a bd       	out	0x2a, r24	; 42
 19c:	9d e0       	ldi	r25, 0x0D	; 13
 19e:	93 bf       	out	0x33, r25	; 51
 1a0:	92 e0       	ldi	r25, 0x02	; 2
 1a2:	99 bf       	out	0x39, r25	; 57
 1a4:	80 bf       	out	0x30, r24	; 48
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
 1a6:	38 9a       	sbi	0x07, 0	; 7
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	86 b9       	out	0x06, r24	; 6

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
 1ac:	78 94       	sei

  /*  Wait for UART synchronization, then send the prompt
   */
  while ( !hw_stat(UART).synced )
 1ae:	8e 99       	sbic	0x11, 6	; 17
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <main+0x2e>
    hw_sleep();
 1b2:	88 95       	sleep
 1b4:	fc cf       	rjmp	.-8      	; 0x1ae <main+0x26>
  hw_write( UART, '$' );
 1b6:	84 e2       	ldi	r24, 0x24	; 36
 1b8:	13 d0       	rcall	.+38     	; 0x1e0 <_hw_swuart0_putbyte>
  /*  Main loop:
   *    Enter sleep mode
   *    Send new data to host
   */
  for(;;) {
    hw_sleep();
 1ba:	88 95       	sleep
    if ( x_adc ) {
 1bc:	80 91 65 00 	lds	r24, 0x0065
 1c0:	88 23       	and	r24, r24
 1c2:	d9 f3       	breq	.-10     	; 0x1ba <main+0x32>
      uint16_t x ;
      do {
        x_adc = 0 ;
 1c4:	10 92 65 00 	sts	0x0065, r1
        x = adc ;
 1c8:	c0 91 66 00 	lds	r28, 0x0066
 1cc:	d0 91 67 00 	lds	r29, 0x0067
      } while( x_adc );
 1d0:	80 91 65 00 	lds	r24, 0x0065
 1d4:	81 11       	cpse	r24, r1
 1d6:	f6 cf       	rjmp	.-20     	; 0x1c4 <main+0x3c>
      hw_write( UART, (x & 0x00FF)>>0 );
 1d8:	8c 2f       	mov	r24, r28
 1da:	02 d0       	rcall	.+4      	; 0x1e0 <_hw_swuart0_putbyte>
      hw_write( UART, (x & 0xFF00)>>8 );
 1dc:	8d 2f       	mov	r24, r29
 1de:	ec cf       	rjmp	.-40     	; 0x1b8 <main+0x30>

000001e0 <_hw_swuart0_putbyte>:
 1e0:	98 e0       	ldi	r25, 0x08	; 8

000001e2 <_hw_swuart0_putbits>:
 1e2:	21 d0       	rcall	.+66     	; 0x226 <_hw_swuart0_wait_ready>
 1e4:	8d 9b       	sbis	0x11, 5	; 17
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <_hw_swuart0_putbits+0xc>
 1e8:	a8 b7       	in	r26, 0x38	; 56
 1ea:	a6 ff       	sbrs	r26, 6
 1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <_hw_swuart0_putbits+0x6>
 1ee:	ab b7       	in	r26, 0x3b	; 59
 1f0:	af 7d       	andi	r26, 0xDF	; 223
 1f2:	ab bf       	out	0x3b, r26	; 59
 1f4:	80 93 61 00 	sts	0x0061, r24
 1f8:	83 e5       	ldi	r24, 0x53	; 83
 1fa:	81 bb       	out	0x11, r24	; 17
 1fc:	90 93 62 00 	sts	0x0062, r25
 200:	c3 9a       	sbi	0x18, 3	; 24
 202:	bb 9a       	sbi	0x17, 3	; 23
 204:	f8 94       	cli
 206:	8f b5       	in	r24, 0x2f	; 47
 208:	78 94       	sei
 20a:	c3 98       	cbi	0x18, 3	; 24
 20c:	90 91 64 00 	lds	r25, 0x0064
 210:	94 51       	subi	r25, 0x14	; 20
 212:	89 0f       	add	r24, r25
 214:	8e bd       	out	0x2e, r24	; 46
 216:	80 e4       	ldi	r24, 0x40	; 64
 218:	88 bf       	out	0x38, r24	; 56
 21a:	f8 94       	cli
 21c:	89 b7       	in	r24, 0x39	; 57
 21e:	80 64       	ori	r24, 0x40	; 64
 220:	78 94       	sei
 222:	89 bf       	out	0x39, r24	; 57
 224:	08 95       	ret

00000226 <_hw_swuart0_wait_ready>:
 226:	a9 b7       	in	r26, 0x39	; 57
 228:	a6 fd       	sbrc	r26, 6
 22a:	fd cf       	rjmp	.-6      	; 0x226 <_hw_swuart0_wait_ready>
 22c:	08 95       	ret

0000022e <_hw_swuart0_sync>:
 22e:	b3 99       	sbic	0x16, 3	; 22
 230:	06 c0       	rjmp	.+12     	; 0x23e <_hw_swuart0_sync+0x10>
 232:	8e bd       	out	0x2e, r24	; 46
 234:	a0 91 64 00 	lds	r26, 0x0064
 238:	a0 93 63 00 	sts	0x0063, r26
 23c:	1c cf       	rjmp	.-456    	; 0x76 <_hw_swuart0_st99>
 23e:	cf 93       	push	r28
 240:	ae b5       	in	r26, 0x2e	; 46
 242:	8a 1b       	sub	r24, r26
 244:	80 93 64 00 	sts	0x0064, r24
 248:	a8 2f       	mov	r26, r24
 24a:	aa 0f       	add	r26, r26
 24c:	aa 0f       	add	r26, r26
 24e:	a8 0f       	add	r26, r24
 250:	c8 2f       	mov	r28, r24
 252:	ce 5f       	subi	r28, 0xFE	; 254
 254:	c6 95       	lsr	r28
 256:	c6 95       	lsr	r28
 258:	ac 1b       	sub	r26, r28
 25a:	80 91 63 00 	lds	r24, 0x0063
 25e:	8a 17       	cp	r24, r26
 260:	e0 f0       	brcs	.+56     	; 0x29a <__stack+0x3b>
 262:	ac 0f       	add	r26, r28
 264:	ac 0f       	add	r26, r28
 266:	8a 17       	cp	r24, r26
 268:	c0 f4       	brcc	.+48     	; 0x29a <__stack+0x3b>
 26a:	80 91 64 00 	lds	r24, 0x0064
 26e:	a8 2f       	mov	r26, r24
 270:	a3 95       	inc	r26
 272:	a6 95       	lsr	r26
 274:	8a 0f       	add	r24, r26
 276:	86 52       	subi	r24, 0x26	; 38
 278:	80 93 63 00 	sts	0x0063, r24
 27c:	8e b5       	in	r24, 0x2e	; 46
 27e:	90 91 64 00 	lds	r25, 0x0064
 282:	89 0f       	add	r24, r25
 284:	8e bd       	out	0x2e, r24	; 46
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	80 93 62 00 	sts	0x0062, r24
 28c:	80 e4       	ldi	r24, 0x40	; 64
 28e:	88 bf       	out	0x38, r24	; 56
 290:	f8 94       	cli
 292:	89 b7       	in	r24, 0x39	; 57
 294:	80 64       	ori	r24, 0x40	; 64
 296:	78 94       	sei
 298:	89 bf       	out	0x39, r24	; 57
 29a:	cf 91       	pop	r28
 29c:	ec ce       	rjmp	.-552    	; 0x76 <_hw_swuart0_st99>

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
