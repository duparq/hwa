HW_DEVICE=atmega328p
hw_syshz=16000000
hw_swuart0_pin_rx=hw_pin_pd0
hw_swuart0_pin_tx=hw_pin_pd1
hw_swuart0_autosync=sync_5_1
hw_swuart0_counter=hw_counter1
hw_swuart0_counter_clk_div=1
hw_swuart0_counter_compare=compare0
COUNTER=hw_counter0
INPUT=hw_pin_pc0
PIN_LED=hw_pin_pb5


build/out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000003d8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  0000046c  2**0
                  ALLOC
  3 .stab         00001104  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000266f  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003bdf  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  88:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_5>:
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
  94:	80 91 84 00 	lds	r24, 0x0084
  98:	78 94       	sei
  9a:	90 91 85 00 	lds	r25, 0x0085
  9e:	af 93       	push	r26
  a0:	af b7       	in	r26, 0x3f	; 63
  a2:	af 93       	push	r26
  a4:	f6 9b       	sbis	0x1e, 6	; 30
  a6:	30 c1       	rjmp	.+608    	; 0x308 <_hw_swuart0_sync>
  a8:	48 99       	sbic	0x09, 0	; 9
  aa:	1a c0       	rjmp	.+52     	; 0xe0 <_hw_swuart0_st99>
  ac:	a0 91 68 00 	lds	r26, 0x0068
  b0:	ab 7f       	andi	r26, 0xFB	; 251
  b2:	a0 93 68 00 	sts	0x0068, r26
  b6:	a0 91 03 01 	lds	r26, 0x0103
  ba:	8a 0f       	add	r24, r26
  bc:	a0 91 04 01 	lds	r26, 0x0104
  c0:	9a 1f       	adc	r25, r26
  c2:	90 93 89 00 	sts	0x0089, r25
  c6:	80 93 88 00 	sts	0x0088, r24
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	80 93 02 01 	sts	0x0102, r24
  d0:	b1 9a       	sbi	0x16, 1	; 22
  d2:	f8 94       	cli
  d4:	80 91 6f 00 	lds	r24, 0x006F
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	78 94       	sei
  dc:	80 93 6f 00 	sts	0x006F, r24

000000e0 <_hw_swuart0_st99>:
  e0:	af 91       	pop	r26
  e2:	af bf       	out	0x3f, r26	; 63
  e4:	af 91       	pop	r26
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	18 95       	reti

000000ec <__vector_11>:
  ec:	ff 93       	push	r31
  ee:	ff b7       	in	r31, 0x3f	; 63
  f0:	ff 93       	push	r31
  f2:	f4 99       	sbic	0x1e, 4	; 30
  f4:	41 c0       	rjmp	.+130    	; 0x178 <_hw_swuart0_tx>
  f6:	78 94       	sei
  f8:	f9 b1       	in	r31, 0x09	; 9
  fa:	f0 fb       	bst	r31, 0
  fc:	f0 91 01 01 	lds	r31, 0x0101
 100:	f6 95       	lsr	r31
 102:	f7 f9       	bld	r31, 7
 104:	f0 93 01 01 	sts	0x0101, r31
 108:	f0 91 02 01 	lds	r31, 0x0102
 10c:	f1 50       	subi	r31, 0x01	; 1
 10e:	f0 93 02 01 	sts	0x0102, r31
 112:	da f0       	brmi	.+54     	; 0x14a <_hw_swuart0_rxeof>
 114:	21 f4       	brne	.+8      	; 0x11e <_hw_swuart0_next>
 116:	f0 91 01 01 	lds	r31, 0x0101
 11a:	f0 93 00 01 	sts	0x0100, r31

0000011e <_hw_swuart0_next>:
 11e:	ef 93       	push	r30
 120:	e0 91 05 01 	lds	r30, 0x0105
 124:	f0 91 06 01 	lds	r31, 0x0106
 128:	df 93       	push	r29
 12a:	d0 91 88 00 	lds	r29, 0x0088
 12e:	ed 0f       	add	r30, r29
 130:	d0 91 89 00 	lds	r29, 0x0089
 134:	fd 1f       	adc	r31, r29
 136:	df 91       	pop	r29
 138:	f0 93 89 00 	sts	0x0089, r31
 13c:	e0 93 88 00 	sts	0x0088, r30
 140:	ef 91       	pop	r30
 142:	ff 91       	pop	r31
 144:	ff bf       	out	0x3f, r31	; 63
 146:	ff 91       	pop	r31
 148:	18 95       	reti

0000014a <_hw_swuart0_rxeof>:
 14a:	fe b3       	in	r31, 0x1e	; 30
 14c:	f0 f9       	bld	r31, 0
 14e:	f0 62       	ori	r31, 0x20	; 32
 150:	f6 fd       	sbrc	r31, 6
 152:	f4 60       	ori	r31, 0x04	; 4
 154:	f0 64       	ori	r31, 0x40	; 64
 156:	fe bb       	out	0x1e, r31	; 30
 158:	f8 94       	cli
 15a:	f0 91 6f 00 	lds	r31, 0x006F
 15e:	fd 7f       	andi	r31, 0xFD	; 253
 160:	78 94       	sei
 162:	f0 93 6f 00 	sts	0x006F, r31
 166:	da 9a       	sbi	0x1b, 2	; 27
 168:	f8 94       	cli
 16a:	f0 91 68 00 	lds	r31, 0x0068
 16e:	f4 60       	ori	r31, 0x04	; 4
 170:	78 94       	sei
 172:	f0 93 68 00 	sts	0x0068, r31
 176:	d3 cf       	rjmp	.-90     	; 0x11e <_hw_swuart0_next>

00000178 <_hw_swuart0_tx>:
 178:	f0 91 01 01 	lds	r31, 0x0101
 17c:	f6 95       	lsr	r31
 17e:	18 f4       	brcc	.+6      	; 0x186 <_hw_swuart0_tx0>

00000180 <_hw_swuart0_tx1>:
 180:	78 94       	sei
 182:	59 9a       	sbi	0x0b, 1	; 11
 184:	02 c0       	rjmp	.+4      	; 0x18a <_hw_swuart0_txn>

00000186 <_hw_swuart0_tx0>:
 186:	78 94       	sei
 188:	59 98       	cbi	0x0b, 1	; 11

0000018a <_hw_swuart0_txn>:
 18a:	f0 93 01 01 	sts	0x0101, r31
 18e:	f0 91 02 01 	lds	r31, 0x0102
 192:	f1 50       	subi	r31, 0x01	; 1
 194:	f0 93 02 01 	sts	0x0102, r31
 198:	2a f0       	brmi	.+10     	; 0x1a4 <_hw_swuart0_txeof>
 19a:	19 f4       	brne	.+6      	; 0x1a2 <_hw_swuart0_txn+0x18>
 19c:	f3 e0       	ldi	r31, 0x03	; 3
 19e:	f0 93 01 01 	sts	0x0101, r31
 1a2:	bd cf       	rjmp	.-134    	; 0x11e <_hw_swuart0_next>

000001a4 <_hw_swuart0_txeof>:
 1a4:	f5 9a       	sbi	0x1e, 5	; 30
 1a6:	f8 94       	cli
 1a8:	f0 91 6f 00 	lds	r31, 0x006F
 1ac:	fd 7f       	andi	r31, 0xFD	; 253
 1ae:	78 94       	sei
 1b0:	f0 93 6f 00 	sts	0x006F, r31
 1b4:	f3 9a       	sbi	0x1e, 3	; 30
 1b6:	f4 98       	cbi	0x1e, 4	; 30
 1b8:	da 9a       	sbi	0x1b, 2	; 27
 1ba:	f8 94       	cli
 1bc:	f0 91 68 00 	lds	r31, 0x0068
 1c0:	f4 60       	ori	r31, 0x04	; 4
 1c2:	78 94       	sei
 1c4:	f0 93 68 00 	sts	0x0068, r31
 1c8:	aa cf       	rjmp	.-172    	; 0x11e <_hw_swuart0_next>

000001ca <__vector_16>:

/*  Service counter overflow interrupt:
 *    turn the ADC on, it will start a conversion as the MCU enters sleep
 */
HW_ISR( COUNTER, overflow )
{
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	8f 93       	push	r24
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
       *  from here? All that should be looked after carefully again...
       *  Simplifications in sight!
       */
      uint8_t sm = wm & v ;     /* what has to be set     */
      uint8_t cm = wm & (~v) ;  /* what has to be cleared */
      *p = (*p & ~cm) | sm ;
 1da:	ea e7       	ldi	r30, 0x7A	; 122
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	80 68       	ori	r24, 0x80	; 128
 1e2:	80 83       	st	Z, r24
    /*
     *  Just 1 bit to be written at C address < 0x40 (ASM address < 0x20): use
     *  sbi/cbi
     */
    if ( v )
      *p |= wm ; /* sbi */
 1e4:	1d 9a       	sbi	0x03, 5	; 3
  hw_turn( hw_adc0, on );
  hw_toggle( PIN_LED );
}
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_21>:

/*  Service ADC conversion interrupt:
 *    get ADC result, stop the ADC, signal new data ready
 */
HW_ISR( hw_adc0 )
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31

HW_INLINE uint16_t _hw_read_r16 ( intptr_t ra, uint8_t rbn, uint8_t rbp )
{
  uint16_t m = (1UL<<rbn)-1 ;
  volatile uint16_t *p = (volatile uint16_t *)ra ;
  return ((*p)>>rbp) & m ;
 208:	80 91 78 00 	lds	r24, 0x0078
 20c:	90 91 79 00 	lds	r25, 0x0079
  adc = hw_read( hw_adc0 );
 210:	90 93 09 01 	sts	0x0109, r25
 214:	80 93 08 01 	sts	0x0108, r24
       *  from here? All that should be looked after carefully again...
       *  Simplifications in sight!
       */
      uint8_t sm = wm & v ;     /* what has to be set     */
      uint8_t cm = wm & (~v) ;  /* what has to be cleared */
      *p = (*p & ~cm) | sm ;
 218:	ea e7       	ldi	r30, 0x7A	; 122
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8f 77       	andi	r24, 0x7F	; 127
 220:	80 83       	st	Z, r24
  hw_turn( hw_adc0, off );
  x_adc = 1 ;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 07 01 	sts	0x0107, r24
}
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <main>:
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	83 bf       	out	0x33, r24	; 51
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
 23e:	25 9a       	sbi	0x04, 5	; 4
 240:	59 9a       	sbi	0x0b, 1	; 11
 242:	51 9a       	sbi	0x0a, 1	; 10
 244:	da 9a       	sbi	0x1b, 2	; 27
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 246:	94 e0       	ldi	r25, 0x04	; 4
 248:	90 93 68 00 	sts	0x0068, r25
 24c:	80 93 6d 00 	sts	0x006D, r24
 250:	84 bd       	out	0x24, r24	; 36
 252:	9d e0       	ldi	r25, 0x0D	; 13
 254:	95 bd       	out	0x25, r25	; 37
 256:	9c e9       	ldi	r25, 0x9C	; 156
 258:	97 bd       	out	0x27, r25	; 39
 25a:	80 93 6e 00 	sts	0x006E, r24
 25e:	80 93 81 00 	sts	0x0081, r24
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	80 93 7c 00 	sts	0x007C, r24
 268:	8f e8       	ldi	r24, 0x8F	; 143
 26a:	80 93 7a 00 	sts	0x007A, r24

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
 26e:	78 94       	sei

  /*  Wait for UART synchronization, then send the prompt
   */
  while ( !hw_stat(UART).synced )
 270:	f6 99       	sbic	0x1e, 6	; 30
 272:	02 c0       	rjmp	.+4      	; 0x278 <main+0x3e>
    hw_sleep();
 274:	88 95       	sleep
 276:	fc cf       	rjmp	.-8      	; 0x270 <main+0x36>
  hw_write( UART, '$' );
 278:	84 e2       	ldi	r24, 0x24	; 36
 27a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_hw_swuart0_putbyte>
  /*  Main loop:
   *    Enter sleep mode
   *    Send new data to host
   */
  for(;;) {
    hw_sleep();
 27e:	88 95       	sleep
    if ( x_adc ) {
 280:	80 91 07 01 	lds	r24, 0x0107
 284:	88 23       	and	r24, r24
 286:	d9 f3       	breq	.-10     	; 0x27e <main+0x44>
      uint16_t x ;
      do {
        x_adc = 0 ;
 288:	10 92 07 01 	sts	0x0107, r1
        x = adc ;
 28c:	c0 91 08 01 	lds	r28, 0x0108
 290:	d0 91 09 01 	lds	r29, 0x0109
      } while( x_adc );
 294:	80 91 07 01 	lds	r24, 0x0107
 298:	81 11       	cpse	r24, r1
 29a:	f6 cf       	rjmp	.-20     	; 0x288 <main+0x4e>
      hw_write( UART, (x & 0x00FF)>>0 );
 29c:	8c 2f       	mov	r24, r28
 29e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_hw_swuart0_putbyte>
      hw_write( UART, (x & 0xFF00)>>8 );
 2a2:	8d 2f       	mov	r24, r29
 2a4:	ea cf       	rjmp	.-44     	; 0x27a <main+0x40>

000002a6 <_hw_swuart0_putbyte>:
 2a6:	98 e0       	ldi	r25, 0x08	; 8

000002a8 <_hw_swuart0_putbits>:
 2a8:	2a d0       	rcall	.+84     	; 0x2fe <_hw_swuart0_wait_ready>
 2aa:	f5 9b       	sbis	0x1e, 5	; 30
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <_hw_swuart0_putbits+0xa>
 2ae:	b1 9b       	sbis	0x16, 1	; 22
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <_hw_swuart0_putbits+0x6>
 2b2:	a0 91 68 00 	lds	r26, 0x0068
 2b6:	ab 7f       	andi	r26, 0xFB	; 251
 2b8:	a0 93 68 00 	sts	0x0068, r26
 2bc:	80 93 01 01 	sts	0x0101, r24
 2c0:	83 e5       	ldi	r24, 0x53	; 83
 2c2:	8e bb       	out	0x1e, r24	; 30
 2c4:	90 93 02 01 	sts	0x0102, r25
 2c8:	f8 94       	cli
 2ca:	80 91 84 00 	lds	r24, 0x0084
 2ce:	90 91 85 00 	lds	r25, 0x0085
 2d2:	78 94       	sei
 2d4:	59 98       	cbi	0x0b, 1	; 11
 2d6:	a0 91 05 01 	lds	r26, 0x0105
 2da:	b0 91 06 01 	lds	r27, 0x0106
 2de:	53 97       	sbiw	r26, 0x13	; 19
 2e0:	8a 0f       	add	r24, r26
 2e2:	9b 1f       	adc	r25, r27
 2e4:	90 93 89 00 	sts	0x0089, r25
 2e8:	80 93 88 00 	sts	0x0088, r24
 2ec:	b1 9a       	sbi	0x16, 1	; 22
 2ee:	f8 94       	cli
 2f0:	80 91 6f 00 	lds	r24, 0x006F
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	78 94       	sei
 2f8:	80 93 6f 00 	sts	0x006F, r24
 2fc:	08 95       	ret

000002fe <_hw_swuart0_wait_ready>:
 2fe:	a0 91 6f 00 	lds	r26, 0x006F
 302:	a1 fd       	sbrc	r26, 1
 304:	fc cf       	rjmp	.-8      	; 0x2fe <_hw_swuart0_wait_ready>
 306:	08 95       	ret

00000308 <_hw_swuart0_sync>:
 308:	48 99       	sbic	0x09, 0	; 9
 30a:	0d c0       	rjmp	.+26     	; 0x326 <_hw_swuart0_sync+0x1e>
 30c:	80 93 88 00 	sts	0x0088, r24
 310:	90 93 89 00 	sts	0x0089, r25
 314:	a0 91 05 01 	lds	r26, 0x0105
 318:	a0 93 03 01 	sts	0x0103, r26
 31c:	a0 91 06 01 	lds	r26, 0x0106
 320:	a0 93 04 01 	sts	0x0104, r26
 324:	dd ce       	rjmp	.-582    	; 0xe0 <_hw_swuart0_st99>
 326:	cf 93       	push	r28
 328:	bf 93       	push	r27
 32a:	df 93       	push	r29
 32c:	a0 91 88 00 	lds	r26, 0x0088
 330:	8a 1b       	sub	r24, r26
 332:	80 93 05 01 	sts	0x0105, r24
 336:	b0 91 89 00 	lds	r27, 0x0089
 33a:	9b 0b       	sbc	r25, r27
 33c:	90 93 06 01 	sts	0x0106, r25
 340:	dc 01       	movw	r26, r24
 342:	aa 0f       	add	r26, r26
 344:	bb 1f       	adc	r27, r27
 346:	aa 0f       	add	r26, r26
 348:	bb 1f       	adc	r27, r27
 34a:	a8 0f       	add	r26, r24
 34c:	b9 1f       	adc	r27, r25
 34e:	ec 01       	movw	r28, r24
 350:	22 96       	adiw	r28, 0x02	; 2
 352:	d6 95       	lsr	r29
 354:	c7 95       	ror	r28
 356:	d6 95       	lsr	r29
 358:	c7 95       	ror	r28
 35a:	ac 1b       	sub	r26, r28
 35c:	bd 0b       	sbc	r27, r29
 35e:	80 91 03 01 	lds	r24, 0x0103
 362:	8a 17       	cp	r24, r26
 364:	90 91 04 01 	lds	r25, 0x0104
 368:	9b 07       	cpc	r25, r27
 36a:	80 f1       	brcs	.+96     	; 0x3cc <_hw_swuart0_sync+0xc4>
 36c:	ac 0f       	add	r26, r28
 36e:	bd 1f       	adc	r27, r29
 370:	ac 0f       	add	r26, r28
 372:	bd 1f       	adc	r27, r29
 374:	8a 17       	cp	r24, r26
 376:	9b 07       	cpc	r25, r27
 378:	48 f5       	brcc	.+82     	; 0x3cc <_hw_swuart0_sync+0xc4>
 37a:	80 91 05 01 	lds	r24, 0x0105
 37e:	90 91 06 01 	lds	r25, 0x0106
 382:	dc 01       	movw	r26, r24
 384:	11 96       	adiw	r26, 0x01	; 1
 386:	b6 95       	lsr	r27
 388:	a7 95       	ror	r26
 38a:	8a 0f       	add	r24, r26
 38c:	9b 1f       	adc	r25, r27
 38e:	8b 52       	subi	r24, 0x2B	; 43
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	80 93 03 01 	sts	0x0103, r24
 396:	90 93 04 01 	sts	0x0104, r25
 39a:	80 91 88 00 	lds	r24, 0x0088
 39e:	90 91 05 01 	lds	r25, 0x0105
 3a2:	89 0f       	add	r24, r25
 3a4:	80 93 88 00 	sts	0x0088, r24
 3a8:	80 91 89 00 	lds	r24, 0x0089
 3ac:	90 91 06 01 	lds	r25, 0x0106
 3b0:	89 1f       	adc	r24, r25
 3b2:	80 93 89 00 	sts	0x0089, r24
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	80 93 02 01 	sts	0x0102, r24
 3bc:	b1 9a       	sbi	0x16, 1	; 22
 3be:	f8 94       	cli
 3c0:	80 91 6f 00 	lds	r24, 0x006F
 3c4:	82 60       	ori	r24, 0x02	; 2
 3c6:	78 94       	sei
 3c8:	80 93 6f 00 	sts	0x006F, r24
 3cc:	df 91       	pop	r29
 3ce:	bf 91       	pop	r27
 3d0:	cf 91       	pop	r28
 3d2:	86 ce       	rjmp	.-756    	; 0xe0 <_hw_swuart0_st99>

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
