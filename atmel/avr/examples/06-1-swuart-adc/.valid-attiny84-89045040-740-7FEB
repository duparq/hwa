HW_DEVICE=attiny84
hw_syshz=8000000
hw_swuart0_pin_rx=hw_pin_pb0
hw_swuart0_pin_tx=hw_pin_pb0
hw_swuart0_autosync=sync_5_1
hw_swuart0_counter=hw_counter1
hw_swuart0_counter_clk_div=1
hw_swuart0_counter_compare=compare0
COUNTER=hw_counter0
INPUT=hw_pin_pa5
PIN_LED=hw_pin_pa6


build/out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000378  2**0
                  ALLOC
  3 .stab         00001098  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000216f  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000357f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__vector_3>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	3d c0       	rjmp	.+122    	; 0x88 <__vector_6>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	97 c0       	rjmp	.+302    	; 0x146 <__vector_11>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	a1 c0       	rjmp	.+322    	; 0x15e <__vector_13>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	aa 36       	cpi	r26, 0x6A	; 106
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	a7 d0       	rcall	.+334    	; 0x18e <main>
  40:	4f c1       	rjmp	.+670    	; 0x2e0 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_3>:
  44:	8f 93       	push	r24
  46:	9f 93       	push	r25
  48:	8c b5       	in	r24, 0x2c	; 44
  4a:	78 94       	sei
  4c:	9d b5       	in	r25, 0x2d	; 45
  4e:	af 93       	push	r26
  50:	af b7       	in	r26, 0x3f	; 63
  52:	af 93       	push	r26
  54:	9e 9b       	sbis	0x13, 6	; 19
  56:	ec c0       	rjmp	.+472    	; 0x230 <_hw_swuart0_sync>
  58:	b0 99       	sbic	0x16, 0	; 22
  5a:	10 c0       	rjmp	.+32     	; 0x7c <_hw_swuart0_st99>
  5c:	ab b7       	in	r26, 0x3b	; 59
  5e:	af 7d       	andi	r26, 0xDF	; 223
  60:	ab bf       	out	0x3b, r26	; 59
  62:	a0 91 63 00 	lds	r26, 0x0063
  66:	8a 0f       	add	r24, r26
  68:	a0 91 64 00 	lds	r26, 0x0064
  6c:	9a 1f       	adc	r25, r26
  6e:	9b bd       	out	0x2b, r25	; 43
  70:	8a bd       	out	0x2a, r24	; 42
  72:	88 e0       	ldi	r24, 0x08	; 8
  74:	80 93 62 00 	sts	0x0062, r24
  78:	59 9a       	sbi	0x0b, 1	; 11
  7a:	61 9a       	sbi	0x0c, 1	; 12

0000007c <_hw_swuart0_st99>:
  7c:	af 91       	pop	r26
  7e:	af bf       	out	0x3f, r26	; 63
  80:	af 91       	pop	r26
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	18 95       	reti

00000088 <__vector_6>:
  88:	ff 93       	push	r31
  8a:	ff b7       	in	r31, 0x3f	; 63
  8c:	ff 93       	push	r31
  8e:	9c 99       	sbic	0x13, 4	; 19
  90:	36 c0       	rjmp	.+108    	; 0xfe <_hw_swuart0_tx>
  92:	78 94       	sei
  94:	f6 b3       	in	r31, 0x16	; 22
  96:	f0 fb       	bst	r31, 0
  98:	f0 91 61 00 	lds	r31, 0x0061
  9c:	f6 95       	lsr	r31
  9e:	f7 f9       	bld	r31, 7
  a0:	f0 93 61 00 	sts	0x0061, r31
  a4:	f0 91 62 00 	lds	r31, 0x0062
  a8:	f1 50       	subi	r31, 0x01	; 1
  aa:	f0 93 62 00 	sts	0x0062, r31
  ae:	ba f0       	brmi	.+46     	; 0xde <_hw_swuart0_rxeof>
  b0:	21 f4       	brne	.+8      	; 0xba <_hw_swuart0_next>
  b2:	f0 91 61 00 	lds	r31, 0x0061
  b6:	f0 93 60 00 	sts	0x0060, r31

000000ba <_hw_swuart0_next>:
  ba:	ef 93       	push	r30
  bc:	e0 91 65 00 	lds	r30, 0x0065
  c0:	f0 91 66 00 	lds	r31, 0x0066
  c4:	df 93       	push	r29
  c6:	da b5       	in	r29, 0x2a	; 42
  c8:	ed 0f       	add	r30, r29
  ca:	db b5       	in	r29, 0x2b	; 43
  cc:	fd 1f       	adc	r31, r29
  ce:	df 91       	pop	r29
  d0:	fb bd       	out	0x2b, r31	; 43
  d2:	ea bd       	out	0x2a, r30	; 42
  d4:	ef 91       	pop	r30
  d6:	ff 91       	pop	r31
  d8:	ff bf       	out	0x3f, r31	; 63
  da:	ff 91       	pop	r31
  dc:	18 95       	reti

000000de <_hw_swuart0_rxeof>:
  de:	f3 b3       	in	r31, 0x13	; 19
  e0:	f0 f9       	bld	r31, 0
  e2:	f0 62       	ori	r31, 0x20	; 32
  e4:	f6 fd       	sbrc	r31, 6
  e6:	f4 60       	ori	r31, 0x04	; 4
  e8:	f0 64       	ori	r31, 0x40	; 64
  ea:	f3 bb       	out	0x13, r31	; 19
  ec:	61 98       	cbi	0x0c, 1	; 12
  ee:	f0 e2       	ldi	r31, 0x20	; 32
  f0:	fa bf       	out	0x3a, r31	; 58
  f2:	f8 94       	cli
  f4:	fb b7       	in	r31, 0x3b	; 59
  f6:	f0 62       	ori	r31, 0x20	; 32
  f8:	78 94       	sei
  fa:	fb bf       	out	0x3b, r31	; 59
  fc:	de cf       	rjmp	.-68     	; 0xba <_hw_swuart0_next>

000000fe <_hw_swuart0_tx>:
  fe:	f0 91 61 00 	lds	r31, 0x0061
 102:	f6 95       	lsr	r31
 104:	18 f4       	brcc	.+6      	; 0x10c <_hw_swuart0_tx0>

00000106 <_hw_swuart0_tx1>:
 106:	78 94       	sei
 108:	c0 9a       	sbi	0x18, 0	; 24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <_hw_swuart0_txn>

0000010c <_hw_swuart0_tx0>:
 10c:	78 94       	sei
 10e:	c0 98       	cbi	0x18, 0	; 24

00000110 <_hw_swuart0_txn>:
 110:	f0 93 61 00 	sts	0x0061, r31
 114:	f0 91 62 00 	lds	r31, 0x0062
 118:	f1 50       	subi	r31, 0x01	; 1
 11a:	f0 93 62 00 	sts	0x0062, r31
 11e:	2a f0       	brmi	.+10     	; 0x12a <_hw_swuart0_txeof>
 120:	19 f4       	brne	.+6      	; 0x128 <_hw_swuart0_txn+0x18>
 122:	f3 e0       	ldi	r31, 0x03	; 3
 124:	f0 93 61 00 	sts	0x0061, r31
 128:	c8 cf       	rjmp	.-112    	; 0xba <_hw_swuart0_next>

0000012a <_hw_swuart0_txeof>:
 12a:	9d 9a       	sbi	0x13, 5	; 19
 12c:	61 98       	cbi	0x0c, 1	; 12
 12e:	b8 98       	cbi	0x17, 0	; 23
 130:	c0 98       	cbi	0x18, 0	; 24
 132:	9b 9a       	sbi	0x13, 3	; 19
 134:	9c 98       	cbi	0x13, 4	; 19
 136:	f0 e2       	ldi	r31, 0x20	; 32
 138:	fa bf       	out	0x3a, r31	; 58
 13a:	f8 94       	cli
 13c:	fb b7       	in	r31, 0x3b	; 59
 13e:	f0 62       	ori	r31, 0x20	; 32
 140:	78 94       	sei
 142:	fb bf       	out	0x3b, r31	; 59
 144:	ba cf       	rjmp	.-140    	; 0xba <_hw_swuart0_next>

00000146 <__vector_11>:

/*  Service counter overflow interrupt:
 *    turn the ADC on, it will start a conversion as the MCU enters sleep
 */
HW_ISR( COUNTER, overflow )
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
    /*
     *  Just 1 bit to be written at C address < 0x40 (ASM address < 0x20): use
     *  sbi/cbi
     */
    if ( v )
      *p |= wm ; /* sbi */
 150:	37 9a       	sbi	0x06, 7	; 6
 152:	ce 9a       	sbi	0x19, 6	; 25
  hw_turn( hw_adc0, on );
  hw_toggle( PIN_LED );
}
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_13>:

/*  Service ADC conversion interrupt:
 *    get ADC result, stop the ADC, signal new data ready
 */
HW_ISR( hw_adc0 )
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25

HW_INLINE uint16_t _hw_read_r16 ( intptr_t ra, uint8_t rbn, uint8_t rbp )
{
  uint16_t m = (1UL<<rbn)-1 ;
  volatile uint16_t *p = (volatile uint16_t *)ra ;
  return ((*p)>>rbp) & m ;
 16c:	84 b1       	in	r24, 0x04	; 4
 16e:	95 b1       	in	r25, 0x05	; 5
  adc = hw_read( hw_adc0 );
 170:	90 93 69 00 	sts	0x0069, r25
 174:	80 93 68 00 	sts	0x0068, r24
    if ( v )
      *p |= wm ; /* sbi */
    else {
      if ( wm & rfm )
	HWA_ERR("flag bit can only be cleared by writing 1 into it.");
      *p &= ~wm ; /* cbi */
 178:	37 98       	cbi	0x06, 7	; 6
  hw_turn( hw_adc0, off );
  x_adc = 1 ;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 67 00 	sts	0x0067, r24
}
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <main>:
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 18e:	80 e2       	ldi	r24, 0x20	; 32
 190:	8b bf       	out	0x3b, r24	; 59
 192:	8a bf       	out	0x3a, r24	; 58
 194:	85 bf       	out	0x35, r24	; 53
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
 196:	d6 9a       	sbi	0x1a, 6	; 26
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 bd       	out	0x20, r24	; 32
 19c:	80 bf       	out	0x30, r24	; 48
 19e:	9d e0       	ldi	r25, 0x0D	; 13
 1a0:	93 bf       	out	0x33, r25	; 51
 1a2:	9e e4       	ldi	r25, 0x4E	; 78
 1a4:	96 bf       	out	0x36, r25	; 54
 1a6:	89 bf       	out	0x39, r24	; 57
 1a8:	8e bd       	out	0x2e, r24	; 46
 1aa:	85 e0       	ldi	r24, 0x05	; 5
 1ac:	87 b9       	out	0x07, r24	; 7
 1ae:	8f e8       	ldi	r24, 0x8F	; 143
 1b0:	86 b9       	out	0x06, r24	; 6

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
 1b2:	78 94       	sei

  /*  Wait for UART synchronization, then send the prompt
   */
  while ( !hw_stat(UART).synced )
 1b4:	9e 99       	sbic	0x13, 6	; 19
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <main+0x2e>
    hw_sleep();
 1b8:	88 95       	sleep
 1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <main+0x26>
  hw_write( UART, '$' );
 1bc:	84 e2       	ldi	r24, 0x24	; 36
 1be:	13 d0       	rcall	.+38     	; 0x1e6 <_hw_swuart0_putbyte>
  /*  Main loop:
   *    Enter sleep mode
   *    Send new data to host
   */
  for(;;) {
    hw_sleep();
 1c0:	88 95       	sleep
    if ( x_adc ) {
 1c2:	80 91 67 00 	lds	r24, 0x0067
 1c6:	88 23       	and	r24, r24
 1c8:	d9 f3       	breq	.-10     	; 0x1c0 <main+0x32>
      uint16_t x ;
      do {
        x_adc = 0 ;
 1ca:	10 92 67 00 	sts	0x0067, r1
        x = adc ;
 1ce:	c0 91 68 00 	lds	r28, 0x0068
 1d2:	d0 91 69 00 	lds	r29, 0x0069
      } while( x_adc );
 1d6:	80 91 67 00 	lds	r24, 0x0067
 1da:	81 11       	cpse	r24, r1
 1dc:	f6 cf       	rjmp	.-20     	; 0x1ca <main+0x3c>
      hw_write( UART, (x & 0x00FF)>>0 );
 1de:	8c 2f       	mov	r24, r28
 1e0:	02 d0       	rcall	.+4      	; 0x1e6 <_hw_swuart0_putbyte>
      hw_write( UART, (x & 0xFF00)>>8 );
 1e2:	8d 2f       	mov	r24, r29
 1e4:	ec cf       	rjmp	.-40     	; 0x1be <main+0x30>

000001e6 <_hw_swuart0_putbyte>:
 1e6:	98 e0       	ldi	r25, 0x08	; 8

000001e8 <_hw_swuart0_putbits>:
 1e8:	20 d0       	rcall	.+64     	; 0x22a <_hw_swuart0_wait_ready>
 1ea:	9d 9b       	sbis	0x13, 5	; 19
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <_hw_swuart0_putbits+0xa>
 1ee:	59 9b       	sbis	0x0b, 1	; 11
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <_hw_swuart0_putbits+0x6>
 1f2:	ab b7       	in	r26, 0x3b	; 59
 1f4:	af 7d       	andi	r26, 0xDF	; 223
 1f6:	ab bf       	out	0x3b, r26	; 59
 1f8:	80 93 61 00 	sts	0x0061, r24
 1fc:	83 e5       	ldi	r24, 0x53	; 83
 1fe:	83 bb       	out	0x13, r24	; 19
 200:	90 93 62 00 	sts	0x0062, r25
 204:	c0 9a       	sbi	0x18, 0	; 24
 206:	b8 9a       	sbi	0x17, 0	; 23
 208:	f8 94       	cli
 20a:	8c b5       	in	r24, 0x2c	; 44
 20c:	9d b5       	in	r25, 0x2d	; 45
 20e:	78 94       	sei
 210:	c0 98       	cbi	0x18, 0	; 24
 212:	a0 91 65 00 	lds	r26, 0x0065
 216:	b0 91 66 00 	lds	r27, 0x0066
 21a:	53 97       	sbiw	r26, 0x13	; 19
 21c:	8a 0f       	add	r24, r26
 21e:	9b 1f       	adc	r25, r27
 220:	9b bd       	out	0x2b, r25	; 43
 222:	8a bd       	out	0x2a, r24	; 42
 224:	59 9a       	sbi	0x0b, 1	; 11
 226:	61 9a       	sbi	0x0c, 1	; 12
 228:	08 95       	ret

0000022a <_hw_swuart0_wait_ready>:
 22a:	61 99       	sbic	0x0c, 1	; 12
 22c:	fe cf       	rjmp	.-4      	; 0x22a <_hw_swuart0_wait_ready>
 22e:	08 95       	ret

00000230 <_hw_swuart0_sync>:
 230:	b0 99       	sbic	0x16, 0	; 22
 232:	0b c0       	rjmp	.+22     	; 0x24a <_hw_swuart0_sync+0x1a>
 234:	8a bd       	out	0x2a, r24	; 42
 236:	9b bd       	out	0x2b, r25	; 43
 238:	a0 91 65 00 	lds	r26, 0x0065
 23c:	a0 93 63 00 	sts	0x0063, r26
 240:	a0 91 66 00 	lds	r26, 0x0066
 244:	a0 93 64 00 	sts	0x0064, r26
 248:	19 cf       	rjmp	.-462    	; 0x7c <_hw_swuart0_st99>
 24a:	cf 93       	push	r28
 24c:	bf 93       	push	r27
 24e:	df 93       	push	r29
 250:	aa b5       	in	r26, 0x2a	; 42
 252:	8a 1b       	sub	r24, r26
 254:	80 93 65 00 	sts	0x0065, r24
 258:	bb b5       	in	r27, 0x2b	; 43
 25a:	9b 0b       	sbc	r25, r27
 25c:	90 93 66 00 	sts	0x0066, r25
 260:	dc 01       	movw	r26, r24
 262:	aa 0f       	add	r26, r26
 264:	bb 1f       	adc	r27, r27
 266:	aa 0f       	add	r26, r26
 268:	bb 1f       	adc	r27, r27
 26a:	a8 0f       	add	r26, r24
 26c:	b9 1f       	adc	r27, r25
 26e:	ec 01       	movw	r28, r24
 270:	22 96       	adiw	r28, 0x02	; 2
 272:	d6 95       	lsr	r29
 274:	c7 95       	ror	r28
 276:	d6 95       	lsr	r29
 278:	c7 95       	ror	r28
 27a:	ac 1b       	sub	r26, r28
 27c:	bd 0b       	sbc	r27, r29
 27e:	80 91 63 00 	lds	r24, 0x0063
 282:	8a 17       	cp	r24, r26
 284:	90 91 64 00 	lds	r25, 0x0064
 288:	9b 07       	cpc	r25, r27
 28a:	30 f1       	brcs	.+76     	; 0x2d8 <__stack+0x79>
 28c:	ac 0f       	add	r26, r28
 28e:	bd 1f       	adc	r27, r29
 290:	ac 0f       	add	r26, r28
 292:	bd 1f       	adc	r27, r29
 294:	8a 17       	cp	r24, r26
 296:	9b 07       	cpc	r25, r27
 298:	f8 f4       	brcc	.+62     	; 0x2d8 <__stack+0x79>
 29a:	80 91 65 00 	lds	r24, 0x0065
 29e:	90 91 66 00 	lds	r25, 0x0066
 2a2:	dc 01       	movw	r26, r24
 2a4:	11 96       	adiw	r26, 0x01	; 1
 2a6:	b6 95       	lsr	r27
 2a8:	a7 95       	ror	r26
 2aa:	8a 0f       	add	r24, r26
 2ac:	9b 1f       	adc	r25, r27
 2ae:	89 52       	subi	r24, 0x29	; 41
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	80 93 63 00 	sts	0x0063, r24
 2b6:	90 93 64 00 	sts	0x0064, r25
 2ba:	8a b5       	in	r24, 0x2a	; 42
 2bc:	90 91 65 00 	lds	r25, 0x0065
 2c0:	89 0f       	add	r24, r25
 2c2:	8a bd       	out	0x2a, r24	; 42
 2c4:	8b b5       	in	r24, 0x2b	; 43
 2c6:	90 91 66 00 	lds	r25, 0x0066
 2ca:	89 1f       	adc	r24, r25
 2cc:	8b bd       	out	0x2b, r24	; 43
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	80 93 62 00 	sts	0x0062, r24
 2d4:	59 9a       	sbi	0x0b, 1	; 11
 2d6:	61 9a       	sbi	0x0c, 1	; 12
 2d8:	df 91       	pop	r29
 2da:	bf 91       	pop	r27
 2dc:	cf 91       	pop	r28
 2de:	ce ce       	rjmp	.-612    	; 0x7c <_hw_swuart0_st99>

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
