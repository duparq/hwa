HW_DEVICE="attiny85"
HW_SYSHZ="8000000"
hw_swuart0_pin_rxd="pb3"
hw_swuart0_pin_txd="pb3"
hw_swuart0_autosync="sync_5_1"
hw_swuart0_compare="counter1compare0"
hw_swuart0_clk_div="1"

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1d c0       	rjmp	.+58     	; 0x40 <__vector_2>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__vector_3>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	aa 3a       	cpi	r26, 0xAA	; 170
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	82 d0       	rcall	.+260    	; 0x140 <main>
  3c:	68 c1       	rjmp	.+720    	; 0x30e <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_2>:
  40:	8f 93       	push	r24
  42:	78 94       	sei
  44:	8f b5       	in	r24, 0x2f	; 47
  46:	af 93       	push	r26
  48:	af b7       	in	r26, 0x3f	; 63
  4a:	af 93       	push	r26
  4c:	8e 9b       	sbis	0x11, 6	; 17
  4e:	27 c1       	rjmp	.+590    	; 0x29e <_hw_swuart0_sync>
  50:	b3 99       	sbic	0x16, 3	; 22
  52:	11 c0       	rjmp	.+34     	; 0x76 <_hw_swuart0_st99>
  54:	ab b7       	in	r26, 0x3b	; 59
  56:	af 7d       	andi	r26, 0xDF	; 223
  58:	ab bf       	out	0x3b, r26	; 59
  5a:	a0 91 a8 00 	lds	r26, 0x00A8
  5e:	8a 0f       	add	r24, r26
  60:	8e bd       	out	0x2e, r24	; 46
  62:	88 e0       	ldi	r24, 0x08	; 8
  64:	80 93 a7 00 	sts	0x00A7, r24
  68:	80 e4       	ldi	r24, 0x40	; 64
  6a:	88 bf       	out	0x38, r24	; 56
  6c:	f8 94       	cli
  6e:	89 b7       	in	r24, 0x39	; 57
  70:	80 64       	ori	r24, 0x40	; 64
  72:	78 94       	sei
  74:	89 bf       	out	0x39, r24	; 57

00000076 <_hw_swuart0_st99>:
  76:	af 91       	pop	r26
  78:	af bf       	out	0x3f, r26	; 63
  7a:	af 91       	pop	r26
  7c:	8f 91       	pop	r24
  7e:	18 95       	reti

00000080 <__vector_3>:
  80:	ff 93       	push	r31
  82:	ff b7       	in	r31, 0x3f	; 63
  84:	ff 93       	push	r31
  86:	8c 99       	sbic	0x11, 4	; 17
  88:	33 c0       	rjmp	.+102    	; 0xf0 <_hw_swuart0_tx>
  8a:	78 94       	sei
  8c:	f6 b3       	in	r31, 0x16	; 22
  8e:	f3 fb       	bst	r31, 3
  90:	f0 91 a6 00 	lds	r31, 0x00A6
  94:	f6 95       	lsr	r31
  96:	f7 f9       	bld	r31, 7
  98:	f0 93 a6 00 	sts	0x00A6, r31
  9c:	f0 91 a7 00 	lds	r31, 0x00A7
  a0:	f1 50       	subi	r31, 0x01	; 1
  a2:	f0 93 a7 00 	sts	0x00A7, r31
  a6:	82 f0       	brmi	.+32     	; 0xc8 <_hw_swuart0_rxeof>
  a8:	21 f4       	brne	.+8      	; 0xb2 <_hw_swuart0_next>
  aa:	f0 91 a6 00 	lds	r31, 0x00A6
  ae:	f0 93 a5 00 	sts	0x00A5, r31

000000b2 <_hw_swuart0_next>:
  b2:	ef 93       	push	r30
  b4:	ee b5       	in	r30, 0x2e	; 46
  b6:	f0 91 a9 00 	lds	r31, 0x00A9
  ba:	ef 0f       	add	r30, r31
  bc:	ee bd       	out	0x2e, r30	; 46
  be:	ef 91       	pop	r30
  c0:	ff 91       	pop	r31
  c2:	ff bf       	out	0x3f, r31	; 63
  c4:	ff 91       	pop	r31
  c6:	18 95       	reti

000000c8 <_hw_swuart0_rxeof>:
  c8:	f1 b3       	in	r31, 0x11	; 17
  ca:	f0 f9       	bld	r31, 0
  cc:	f0 62       	ori	r31, 0x20	; 32
  ce:	f6 fd       	sbrc	r31, 6
  d0:	f4 60       	ori	r31, 0x04	; 4
  d2:	f0 64       	ori	r31, 0x40	; 64
  d4:	f1 bb       	out	0x11, r31	; 17
  d6:	f8 94       	cli
  d8:	f9 b7       	in	r31, 0x39	; 57
  da:	ff 7b       	andi	r31, 0xBF	; 191
  dc:	78 94       	sei
  de:	f9 bf       	out	0x39, r31	; 57
  e0:	f0 e2       	ldi	r31, 0x20	; 32
  e2:	fa bf       	out	0x3a, r31	; 58
  e4:	f8 94       	cli
  e6:	fb b7       	in	r31, 0x3b	; 59
  e8:	f0 62       	ori	r31, 0x20	; 32
  ea:	78 94       	sei
  ec:	fb bf       	out	0x3b, r31	; 59
  ee:	e1 cf       	rjmp	.-62     	; 0xb2 <_hw_swuart0_next>

000000f0 <_hw_swuart0_tx>:
  f0:	f0 91 a6 00 	lds	r31, 0x00A6
  f4:	f6 95       	lsr	r31
  f6:	18 f4       	brcc	.+6      	; 0xfe <_hw_swuart0_tx0>

000000f8 <_hw_swuart0_tx1>:
  f8:	78 94       	sei
  fa:	c3 9a       	sbi	0x18, 3	; 24
  fc:	02 c0       	rjmp	.+4      	; 0x102 <_hw_swuart0_txn>

000000fe <_hw_swuart0_tx0>:
  fe:	78 94       	sei
 100:	c3 98       	cbi	0x18, 3	; 24

00000102 <_hw_swuart0_txn>:
 102:	f0 93 a6 00 	sts	0x00A6, r31
 106:	f0 91 a7 00 	lds	r31, 0x00A7
 10a:	f1 50       	subi	r31, 0x01	; 1
 10c:	f0 93 a7 00 	sts	0x00A7, r31
 110:	2a f0       	brmi	.+10     	; 0x11c <_hw_swuart0_txeof>
 112:	19 f4       	brne	.+6      	; 0x11a <_hw_swuart0_txn+0x18>
 114:	f3 e0       	ldi	r31, 0x03	; 3
 116:	f0 93 a6 00 	sts	0x00A6, r31
 11a:	cb cf       	rjmp	.-106    	; 0xb2 <_hw_swuart0_next>

0000011c <_hw_swuart0_txeof>:
 11c:	8d 9a       	sbi	0x11, 5	; 17
 11e:	f8 94       	cli
 120:	f9 b7       	in	r31, 0x39	; 57
 122:	ff 7b       	andi	r31, 0xBF	; 191
 124:	78 94       	sei
 126:	f9 bf       	out	0x39, r31	; 57
 128:	bb 98       	cbi	0x17, 3	; 23
 12a:	c3 98       	cbi	0x18, 3	; 24
 12c:	8b 9a       	sbi	0x11, 3	; 17
 12e:	8c 98       	cbi	0x11, 4	; 17
 130:	f0 e2       	ldi	r31, 0x20	; 32
 132:	fa bf       	out	0x3a, r31	; 58
 134:	f8 94       	cli
 136:	fb b7       	in	r31, 0x3b	; 59
 138:	f0 62       	ori	r31, 0x20	; 32
 13a:	78 94       	sei
 13c:	fb bf       	out	0x3b, r31	; 59
 13e:	b9 cf       	rjmp	.-142    	; 0xb2 <_hw_swuart0_next>

00000140 <main>:
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 140:	80 e2       	ldi	r24, 0x20	; 32
 142:	8b bf       	out	0x3b, r24	; 59
 144:	8a bf       	out	0x3a, r24	; 58
 146:	85 bf       	out	0x35, r24	; 53
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
 148:	ab 9a       	sbi	0x15, 3	; 21
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 bf       	out	0x30, r24	; 48

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
 14e:	78 94       	sei

  /*  Wait for UART synchronization, then send the prompt
   */
  while ( !hw_stat(UART).synced )
 150:	8e 99       	sbic	0x11, 6	; 17
 152:	02 c0       	rjmp	.+4      	; 0x158 <main+0x18>
    hw_sleep();
 154:	88 95       	sleep
 156:	fc cf       	rjmp	.-8      	; 0x150 <main+0x10>
  hw_write( UART, '$');
 158:	84 e2       	ldi	r24, 0x24	; 36
 15a:	7a d0       	rcall	.+244    	; 0x250 <_hw_swuart0_putbyte>
/**
 * @brief Store into dst count bytes read from Flash memory address addr
 */
HW_INLINE void _hw_flashardbytes( uint8_t *dst, uint16_t addr, uint8_t count )
{
  hw_asm("1:  lpm  __tmp_reg__, Z+"		"\n"
 15c:	10 e4       	ldi	r17, 0x40	; 64
 15e:	c0 e6       	ldi	r28, 0x60	; 96
 160:	d0 e0       	ldi	r29, 0x00	; 0

    if ( rm == 0 )
      /*
       *  Nothing to be read, just write the new value
       */
      *p = v ;
 162:	03 e0       	ldi	r16, 0x03	; 3
 164:	85 e0       	ldi	r24, 0x05	; 5
 166:	f8 2e       	mov	r15, r24
   */
  static uint8_t        page[HW_DEVICE_FLASH_PAGE_SIZE] ;

  if ( bcount == 0 ) {
    buf.cmd = byte ;
    bcount++ ;
 168:	ee 24       	eor	r14, r14
 16a:	e3 94       	inc	r14
    /*
     *  Main loop:
     *    put the MCU into sleep mode, an interrupt we awake it
     *    process incomming bytes
     */
    hw_sleep();
 16c:	88 95       	sleep
    if ( hw_stat(UART).rxc ) {
 16e:	8a 9b       	sbis	0x11, 2	; 17
 170:	fd cf       	rjmp	.-6      	; 0x16c <main+0x2c>
      /*
       *  MCU awakened by SWUART that has received a stop bit
       *  Get the received byte (clears rxc flag)
       */
      process( hw_read(UART) );
 172:	68 d0       	rcall	.+208    	; 0x244 <_hw_swuart0_getbyte>

  /*  Buffer for one Flash page
   */
  static uint8_t        page[HW_DEVICE_FLASH_PAGE_SIZE] ;

  if ( bcount == 0 ) {
 174:	e0 91 a4 00 	lds	r30, 0x00A4
 178:	e1 11       	cpse	r30, r1
 17a:	05 c0       	rjmp	.+10     	; 0x186 <main+0x46>
    buf.cmd = byte ;
 17c:	80 93 a0 00 	sts	0x00A0, r24
    bcount++ ;
 180:	e0 92 a4 00 	sts	0x00A4, r14
 184:	f3 cf       	rjmp	.-26     	; 0x16c <main+0x2c>
  } else if ( bcount < 4 )
 186:	e4 30       	cpi	r30, 0x04	; 4
 188:	48 f4       	brcc	.+18     	; 0x19c <main+0x5c>
    buf.buf[bcount++] = byte ;
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	9e 0f       	add	r25, r30
 18e:	90 93 a4 00 	sts	0x00A4, r25
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	e0 56       	subi	r30, 0x60	; 96
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	80 83       	st	Z, r24
 19a:	e8 cf       	rjmp	.-48     	; 0x16c <main+0x2c>
  else {
    bcount = 0 ;
 19c:	10 92 a4 00 	sts	0x00A4, r1
    if ( byte == '\n'
 1a0:	8a 30       	cpi	r24, 0x0A	; 10
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <main+0x66>
 1a4:	4c c0       	rjmp	.+152    	; 0x23e <main+0xfe>
         && buf.addr < HW_DEVICE_FLASH_SIZE ) {
 1a6:	40 91 a1 00 	lds	r20, 0x00A1
 1aa:	50 91 a2 00 	lds	r21, 0x00A2
 1ae:	41 15       	cp	r20, r1
 1b0:	80 e2       	ldi	r24, 0x20	; 32
 1b2:	58 07       	cpc	r21, r24
 1b4:	08 f0       	brcs	.+2      	; 0x1b8 <main+0x78>
 1b6:	43 c0       	rjmp	.+134    	; 0x23e <main+0xfe>
      if ( buf.cmd == 'F' ) {
 1b8:	80 91 a0 00 	lds	r24, 0x00A0
 1bc:	86 34       	cpi	r24, 0x46	; 70
 1be:	09 f0       	breq	.+2      	; 0x1c2 <main+0x82>
 1c0:	25 c0       	rjmp	.+74     	; 0x20c <main+0xcc>
        /*
         *  Write data
         */
        uint8_t  zbyte = buf.addr & (HW_DEVICE_FLASH_PAGE_SIZE-1) ;
        intptr_t zpage = buf.addr & ~(HW_DEVICE_FLASH_PAGE_SIZE-1) ;
 1c2:	9a 01       	movw	r18, r20
 1c4:	20 7c       	andi	r18, 0xC0	; 192
 1c6:	51 2f       	mov	r21, r17
 1c8:	f9 01       	movw	r30, r18
 1ca:	de 01       	movw	r26, r28
 1cc:	05 90       	lpm	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	5a 95       	dec	r21
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x8c>
         && buf.addr < HW_DEVICE_FLASH_SIZE ) {
      if ( buf.cmd == 'F' ) {
        /*
         *  Write data
         */
        uint8_t  zbyte = buf.addr & (HW_DEVICE_FLASH_PAGE_SIZE-1) ;
 1d4:	4f 73       	andi	r20, 0x3F	; 63

        /*  Get the content of the page to be modified and make the required
         *  change
         */
        hw_read_bytes( hw_flash0, page, zpage, sizeof(page) );
        page[ zbyte ] = buf.n ;
 1d6:	e4 2f       	mov	r30, r20
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e0 5a       	subi	r30, 0xA0	; 160
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	80 91 a3 00 	lds	r24, 0x00A3
 1e2:	80 83       	st	Z, r24

#if HW_DEVICE_FLASH_PAGE_SIZE > 256
#  error
#endif

  hw_asm(
 1e4:	de 01       	movw	r26, r28
 1e6:	81 e1       	ldi	r24, 0x11	; 17
 1e8:	87 bf       	out	0x37, r24	; 55
 1ea:	ee 27       	eor	r30, r30
 1ec:	ff 27       	eor	r31, r31
 1ee:	0d 90       	ld	r0, X+
 1f0:	1d 90       	ld	r1, X+
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	87 bf       	out	0x37, r24	; 55
 1f6:	e8 95       	spm
 1f8:	32 96       	adiw	r30, 0x02	; 2
 1fa:	e0 34       	cpi	r30, 0x40	; 64
 1fc:	c1 f7       	brne	.-16     	; 0x1ee <main+0xae>
 1fe:	07 bf       	out	0x37, r16	; 55
/**
 * @brief  Preload Z register before outputting SPM instruction
 */
HW_INLINE void _hw_flasha_spm( intptr_t ptr )
{
  hw_asm("	spm	\n"
 200:	f9 01       	movw	r30, r18
 202:	e8 95       	spm
 204:	f7 be       	out	0x37, r15	; 55
 206:	f9 01       	movw	r30, r18
 208:	e8 95       	spm
 20a:	17 c0       	rjmp	.+46     	; 0x23a <main+0xfa>
        hw_command( hw_flash0, write_page, zpage );

        hw_write( UART, '$');
        return ;
      }
      else if ( buf.cmd == 'f' ) {
 20c:	86 36       	cpi	r24, 0x66	; 102
 20e:	b9 f4       	brne	.+46     	; 0x23e <main+0xfe>
        /*
         *  Read data
         */
        while ( buf.n-- ) {
 210:	80 91 a3 00 	lds	r24, 0x00A3
 214:	9f ef       	ldi	r25, 0xFF	; 255
 216:	98 0f       	add	r25, r24
 218:	90 93 a3 00 	sts	0x00A3, r25
 21c:	88 23       	and	r24, r24
 21e:	69 f0       	breq	.+26     	; 0x23a <main+0xfa>
          uint8_t byte = hw_read( hw_flash0, buf.addr++ );
 220:	e0 91 a1 00 	lds	r30, 0x00A1
 224:	f0 91 a2 00 	lds	r31, 0x00A2
 228:	cf 01       	movw	r24, r30
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	90 93 a2 00 	sts	0x00A2, r25
 230:	80 93 a1 00 	sts	0x00A1, r24
#define _hw_read_flasha(o,i,a,addr,...)		HW_TX( _hw_flashardbyte(addr), __VA_ARGS__)

HW_INLINE uint8_t _hw_flashardbyte( uint16_t a )
{
  uint8_t r ;
  hw_asm("    lpm %[r], Z"	"\n"
 234:	84 91       	lpm	r24, Z
          hw_write( UART,  byte );
 236:	0c d0       	rcall	.+24     	; 0x250 <_hw_swuart0_putbyte>
 238:	eb cf       	rjmp	.-42     	; 0x210 <main+0xd0>
        }
        hw_write( UART, '$');
 23a:	84 e2       	ldi	r24, 0x24	; 36
 23c:	01 c0       	rjmp	.+2      	; 0x240 <main+0x100>
        return ;
      }
    }
    hw_write( UART, '!');
 23e:	81 e2       	ldi	r24, 0x21	; 33
 240:	07 d0       	rcall	.+14     	; 0x250 <_hw_swuart0_putbyte>
 242:	94 cf       	rjmp	.-216    	; 0x16c <main+0x2c>

00000244 <_hw_swuart0_getbyte>:
 244:	8a 9b       	sbis	0x11, 2	; 17
 246:	fe cf       	rjmp	.-4      	; 0x244 <_hw_swuart0_getbyte>
 248:	8a 98       	cbi	0x11, 2	; 17
 24a:	80 91 a5 00 	lds	r24, 0x00A5
 24e:	08 95       	ret

00000250 <_hw_swuart0_putbyte>:
 250:	98 e0       	ldi	r25, 0x08	; 8

00000252 <_hw_swuart0_putbits>:
 252:	21 d0       	rcall	.+66     	; 0x296 <_hw_swuart0_wait_ready>
 254:	8d 9b       	sbis	0x11, 5	; 17
 256:	03 c0       	rjmp	.+6      	; 0x25e <_hw_swuart0_putbits+0xc>
 258:	a8 b7       	in	r26, 0x38	; 56
 25a:	a6 ff       	sbrs	r26, 6
 25c:	fd cf       	rjmp	.-6      	; 0x258 <_hw_swuart0_putbits+0x6>
 25e:	ab b7       	in	r26, 0x3b	; 59
 260:	af 7d       	andi	r26, 0xDF	; 223
 262:	ab bf       	out	0x3b, r26	; 59
 264:	80 93 a6 00 	sts	0x00A6, r24
 268:	83 e5       	ldi	r24, 0x53	; 83
 26a:	81 bb       	out	0x11, r24	; 17
 26c:	90 93 a7 00 	sts	0x00A7, r25
 270:	c3 9a       	sbi	0x18, 3	; 24
 272:	bb 9a       	sbi	0x17, 3	; 23
 274:	f8 94       	cli
 276:	8f b5       	in	r24, 0x2f	; 47
 278:	78 94       	sei
 27a:	c3 98       	cbi	0x18, 3	; 24
 27c:	90 91 a9 00 	lds	r25, 0x00A9
 280:	94 51       	subi	r25, 0x14	; 20
 282:	89 0f       	add	r24, r25
 284:	8e bd       	out	0x2e, r24	; 46
 286:	80 e4       	ldi	r24, 0x40	; 64
 288:	88 bf       	out	0x38, r24	; 56
 28a:	f8 94       	cli
 28c:	89 b7       	in	r24, 0x39	; 57
 28e:	80 64       	ori	r24, 0x40	; 64
 290:	78 94       	sei
 292:	89 bf       	out	0x39, r24	; 57
 294:	08 95       	ret

00000296 <_hw_swuart0_wait_ready>:
 296:	a9 b7       	in	r26, 0x39	; 57
 298:	a6 fd       	sbrc	r26, 6
 29a:	fd cf       	rjmp	.-6      	; 0x296 <_hw_swuart0_wait_ready>
 29c:	08 95       	ret

0000029e <_hw_swuart0_sync>:
 29e:	b3 99       	sbic	0x16, 3	; 22
 2a0:	06 c0       	rjmp	.+12     	; 0x2ae <_hw_swuart0_sync+0x10>
 2a2:	8e bd       	out	0x2e, r24	; 46
 2a4:	a0 91 a9 00 	lds	r26, 0x00A9
 2a8:	a0 93 a8 00 	sts	0x00A8, r26
 2ac:	e4 ce       	rjmp	.-568    	; 0x76 <_hw_swuart0_st99>
 2ae:	cf 93       	push	r28
 2b0:	ae b5       	in	r26, 0x2e	; 46
 2b2:	8a 1b       	sub	r24, r26
 2b4:	80 93 a9 00 	sts	0x00A9, r24
 2b8:	a8 2f       	mov	r26, r24
 2ba:	aa 0f       	add	r26, r26
 2bc:	aa 0f       	add	r26, r26
 2be:	a8 0f       	add	r26, r24
 2c0:	c8 2f       	mov	r28, r24
 2c2:	ce 5f       	subi	r28, 0xFE	; 254
 2c4:	c6 95       	lsr	r28
 2c6:	c6 95       	lsr	r28
 2c8:	ac 1b       	sub	r26, r28
 2ca:	80 91 a8 00 	lds	r24, 0x00A8
 2ce:	8a 17       	cp	r24, r26
 2d0:	e0 f0       	brcs	.+56     	; 0x30a <_hw_swuart0_sync+0x6c>
 2d2:	ac 0f       	add	r26, r28
 2d4:	ac 0f       	add	r26, r28
 2d6:	8a 17       	cp	r24, r26
 2d8:	c0 f4       	brcc	.+48     	; 0x30a <_hw_swuart0_sync+0x6c>
 2da:	80 91 a9 00 	lds	r24, 0x00A9
 2de:	a8 2f       	mov	r26, r24
 2e0:	a3 95       	inc	r26
 2e2:	a6 95       	lsr	r26
 2e4:	8a 0f       	add	r24, r26
 2e6:	86 52       	subi	r24, 0x26	; 38
 2e8:	80 93 a8 00 	sts	0x00A8, r24
 2ec:	8e b5       	in	r24, 0x2e	; 46
 2ee:	90 91 a9 00 	lds	r25, 0x00A9
 2f2:	89 0f       	add	r24, r25
 2f4:	8e bd       	out	0x2e, r24	; 46
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	80 93 a7 00 	sts	0x00A7, r24
 2fc:	80 e4       	ldi	r24, 0x40	; 64
 2fe:	88 bf       	out	0x38, r24	; 56
 300:	f8 94       	cli
 302:	89 b7       	in	r24, 0x39	; 57
 304:	80 64       	ori	r24, 0x40	; 64
 306:	78 94       	sei
 308:	89 bf       	out	0x39, r24	; 57
 30a:	cf 91       	pop	r28
 30c:	b4 ce       	rjmp	.-664    	; 0x76 <_hw_swuart0_st99>

0000030e <_exit>:
 30e:	f8 94       	cli

00000310 <__stop_program>:
 310:	ff cf       	rjmp	.-2      	; 0x310 <__stop_program>
