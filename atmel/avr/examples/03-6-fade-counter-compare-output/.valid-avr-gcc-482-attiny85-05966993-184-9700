HW_DEVICE=attiny85
hw_syshz=16000000
PWM=hw_counter0compare0
CLKDIV=64
COUNTMODE=loop_up


build/out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b8  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000014c  2**0
                  ALLOC
  3 .stab         00000e70  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016d9  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002695  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	1a c0       	rjmp	.+52     	; 0x40 <__vector_5>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	30 d0       	rcall	.+96     	; 0x9c <main>
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_5>:
 *    Phase 1: decrease duty cycle from 255 to 0 (use ~duty)
 *    Phase 2: off
 *    Phase 3: off
 */
HW_ISR( hw_sup(PWM), overflow )
{
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
  4a:	8f 93       	push	r24
  4c:	9f 93       	push	r25
  static uint8_t        duty ;
  static uint8_t        phase ;

  if ( phase == 0 )
  4e:	90 91 61 00 	lds	r25, 0x0061
  52:	80 91 60 00 	lds	r24, 0x0060
  56:	99 23       	and	r25, r25
  58:	19 f0       	breq	.+6      	; 0x60 <__vector_5+0x20>
    hw_write( PWM, duty );
  else if ( phase == 1 )
  5a:	91 30       	cpi	r25, 0x01	; 1
  5c:	11 f4       	brne	.+4      	; 0x62 <__vector_5+0x22>
    hw_write( PWM, ~duty );
  5e:	80 95       	com	r24

    if ( rm == 0 )
      /*
       *  Nothing to be read, just write the new value
       */
      *p = v ;
  60:	89 bd       	out	0x29, r24	; 41

  duty++ ;
  62:	80 91 60 00 	lds	r24, 0x0060
  66:	8f 5f       	subi	r24, 0xFF	; 255
  68:	80 93 60 00 	sts	0x0060, r24

  if ( duty==0 ) {
  6c:	81 11       	cpse	r24, r1
  6e:	0f c0       	rjmp	.+30     	; 0x8e <__vector_5+0x4e>
    phase = (phase + 1) & 3 ;
  70:	80 91 61 00 	lds	r24, 0x0061
  74:	8f 5f       	subi	r24, 0xFF	; 255
  76:	83 70       	andi	r24, 0x03	; 3
  78:	80 93 61 00 	sts	0x0061, r24
      /*  Start from the hardawre configuration used at initialization
       */
      hwa_begin_from_reset();
      setup_hardware( hwa );

      if ( phase == 2 ) {
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	11 f4       	brne	.+4      	; 0x84 <__vector_5+0x44>
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  80:	1a bc       	out	0x2a, r1	; 42
  82:	05 c0       	rjmp	.+10     	; 0x8e <__vector_5+0x4e>
        hwa_config( PWM, output, set_at_bottom_clear_on_match );
        hwa_nocommit();
        hwa_config( PWM, output, disconnected );
        hwa_commit();
      }
      else if ( phase == 0 ) {
  84:	81 11       	cpse	r24, r1
  86:	03 c0       	rjmp	.+6      	; 0x8e <__vector_5+0x4e>
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
  88:	b8 9a       	sbi	0x17, 0	; 23
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  8a:	83 e8       	ldi	r24, 0x83	; 131
  8c:	8a bd       	out	0x2a, r24	; 42
        hwa_config( PWM, output, set_at_bottom_clear_on_match );
        hwa_commit();
      }
    }
  }
}
  8e:	9f 91       	pop	r25
  90:	8f 91       	pop	r24
  92:	0f 90       	pop	r0
  94:	0f be       	out	0x3f, r0	; 63
  96:	0f 90       	pop	r0
  98:	1f 90       	pop	r1
  9a:	18 95       	reti

0000009c <main>:
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	85 bf       	out	0x35, r24	; 53
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
  a0:	b8 9a       	sbi	0x17, 0	; 23
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  a2:	83 e8       	ldi	r24, 0x83	; 131
  a4:	8a bd       	out	0x2a, r24	; 42
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	83 bf       	out	0x33, r24	; 51
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	89 bf       	out	0x39, r24	; 57

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
  ae:	78 94       	sei

  for(;;)
    hw_sleep();
  b0:	88 95       	sleep
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x14>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
