HW_DEVICE=atmega328p
hw_syshz=16000000
PWM=hw_counter2_compare0
CLKDIV=64
COUNTMODE=loop_up


build/out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000112  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a6  2**0
                  ALLOC
  3 .stab         0000102c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002357  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000352b  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  88:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_9>:
 *    Phase 1: decrease duty cycle from 255 to 0 (use ~duty)
 *    Phase 2: off
 *    Phase 3: off
 */
HW_ISR( hw_sup(PWM), overflow )
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  static uint8_t        duty ;
  static uint8_t        phase ;

  if ( phase == 0 )
  9e:	90 91 01 01 	lds	r25, 0x0101
  a2:	80 91 00 01 	lds	r24, 0x0100
  a6:	99 23       	and	r25, r25
  a8:	19 f0       	breq	.+6      	; 0xb0 <__vector_9+0x20>
    hw_write( PWM, duty );
  else if ( phase == 1 )
  aa:	91 30       	cpi	r25, 0x01	; 1
  ac:	19 f4       	brne	.+6      	; 0xb4 <__vector_9+0x24>
    hw_write( PWM, ~duty );
  ae:	80 95       	com	r24

    if ( rm == 0 )
      /*
       *  Nothing to be read, just write the new value
       */
      *p = v ;
  b0:	80 93 b3 00 	sts	0x00B3, r24

  duty++ ;
  b4:	80 91 00 01 	lds	r24, 0x0100
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	80 93 00 01 	sts	0x0100, r24

  if ( duty==0 ) {
  be:	81 11       	cpse	r24, r1
  c0:	11 c0       	rjmp	.+34     	; 0xe4 <__vector_9+0x54>
    phase = (phase + 1) & 3 ;
  c2:	80 91 01 01 	lds	r24, 0x0101
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	83 70       	andi	r24, 0x03	; 3
  ca:	80 93 01 01 	sts	0x0101, r24
      /*  Start from the hardawre configuration used at initialization
       */
      hwa_begin_from_reset();
      setup_hardware( hwa );

      if ( phase == 2 ) {
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	19 f4       	brne	.+6      	; 0xd8 <__vector_9+0x48>
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  d2:	10 92 b0 00 	sts	0x00B0, r1
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <__vector_9+0x54>
        hwa_config( PWM, output, set_at_bottom_clear_on_match );
        hwa_nocommit();
        hwa_config( PWM, output, disconnected );
        hwa_commit();
      }
      else if ( phase == 0 ) {
  d8:	81 11       	cpse	r24, r1
  da:	04 c0       	rjmp	.+8      	; 0xe4 <__vector_9+0x54>
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
  dc:	23 9a       	sbi	0x04, 3	; 4
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  de:	83 e8       	ldi	r24, 0x83	; 131
  e0:	80 93 b0 00 	sts	0x00B0, r24
        hwa_config( PWM, output, set_at_bottom_clear_on_match );
        hwa_commit();
      }
    }
  }
}
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <main>:
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	83 bf       	out	0x33, r24	; 51
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
  f6:	23 9a       	sbi	0x04, 3	; 4
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  f8:	93 e8       	ldi	r25, 0x83	; 131
  fa:	90 93 b0 00 	sts	0x00B0, r25
  fe:	94 e0       	ldi	r25, 0x04	; 4
 100:	90 93 b1 00 	sts	0x00B1, r25
 104:	80 93 70 00 	sts	0x0070, r24

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
 108:	78 94       	sei

  for(;;)
    hw_sleep();
 10a:	88 95       	sleep
 10c:	fe cf       	rjmp	.-4      	; 0x10a <main+0x18>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
