HW_DEVICE="atmega328p"
hw_syshz="16000000"
PWM="counter0compare0"
CLKDIV="64"
COUNTMODE="up_loop"

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
 *    Phase 1: decrease duty cycle from 255 to 0 (use ~duty)
 *    Phase 2: off
 *    Phase 3: off
 */
HW_ISR( hw_rel(PWM,counter), overflow )
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  static uint8_t        duty ;
  static uint8_t        phase ;

  if ( phase == 0 )
  9e:	90 91 01 01 	lds	r25, 0x0101
  a2:	80 91 00 01 	lds	r24, 0x0100
  a6:	99 23       	and	r25, r25
  a8:	19 f0       	breq	.+6      	; 0xb0 <__vector_16+0x20>
    hw_write( PWM, duty );
  else if ( phase == 1 )
  aa:	91 30       	cpi	r25, 0x01	; 1
  ac:	11 f4       	brne	.+4      	; 0xb2 <__vector_16+0x22>
    hw_write( PWM, ~duty );
  ae:	80 95       	com	r24

    if ( rm == 0 )
      /*
       *  Nothing to be read, just write the new value
       */
      *p = v ;
  b0:	87 bd       	out	0x27, r24	; 39

  duty++ ;
  b2:	80 91 00 01 	lds	r24, 0x0100
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	80 93 00 01 	sts	0x0100, r24

  if ( duty==0 ) {
  bc:	81 11       	cpse	r24, r1
  be:	0f c0       	rjmp	.+30     	; 0xde <__vector_16+0x4e>
    phase = (phase + 1) & 3 ;
  c0:	80 91 01 01 	lds	r24, 0x0101
  c4:	8f 5f       	subi	r24, 0xFF	; 255
  c6:	83 70       	andi	r24, 0x03	; 3
  c8:	80 93 01 01 	sts	0x0101, r24
      /*  Start from the hardawre configuration used at initialization
       */
      hwa_begin_from_reset();
      setup_hardware( hwa );

      if ( phase == 2 ) {
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	11 f4       	brne	.+4      	; 0xd4 <__vector_16+0x44>
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  d0:	14 bc       	out	0x24, r1	; 36
  d2:	05 c0       	rjmp	.+10     	; 0xde <__vector_16+0x4e>
        hwa_config( PWM, output, set_at_bottom_clear_on_match );
        hwa_nocommit();
        hwa_config( PWM, output, disconnected );
        hwa_commit();
      }
      else if ( phase == 0 ) {
  d4:	81 11       	cpse	r24, r1
  d6:	03 c0       	rjmp	.+6      	; 0xde <__vector_16+0x4e>
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
  d8:	56 9a       	sbi	0x0a, 6	; 10
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  da:	83 e8       	ldi	r24, 0x83	; 131
  dc:	84 bd       	out	0x24, r24	; 36
        hwa_config( PWM, output, set_at_bottom_clear_on_match );
        hwa_commit();
      }
    }
  }
}
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <main>:
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	83 bf       	out	0x33, r24	; 51
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
  f0:	56 9a       	sbi	0x0a, 6	; 10
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  f2:	93 e8       	ldi	r25, 0x83	; 131
  f4:	94 bd       	out	0x24, r25	; 36
  f6:	93 e0       	ldi	r25, 0x03	; 3
  f8:	95 bd       	out	0x25, r25	; 37
  fa:	80 93 6e 00 	sts	0x006E, r24

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
  fe:	78 94       	sei

  for(;;)
    hw_sleep();
 100:	88 95       	sleep
 102:	fe cf       	rjmp	.-4      	; 0x100 <main+0x14>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
