HW_DEVICE="atmega328p"
hw_syshz="16000000"
PIN_LED="hw_pin_pb5"
REFERENCE="bandgap"
PIN_ANALOG_INPUT="hw_pin_pc0"
EDGE="falling"
COUNTER="hw_counter0"
COUNTER_CLK_DIV="64"
COMPARE="compare0"
ON_TIME="0.001"


build/nanodccduino/out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000011e  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001020  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000020c9  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000327d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_23>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_14>:
 *    disable this IRQ
 *    turn the LED off
 *    turn analog comparator IRQ on
 */
HW_ISR( COUNTER, COMPARE )
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
  8c:	ef 93       	push	r30
  8e:	ff 93       	push	r31
      /*
       *  Read-modify-write
       */
      uint8_t sm = wm & v ;     /* what has to be set     */
      uint8_t cm = wm & (~v) ;  /* what has to be cleared */
      *p = (*p & ~cm) | sm ;
  90:	ee e6       	ldi	r30, 0x6E	; 110
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8d 7f       	andi	r24, 0xFD	; 253
  98:	80 83       	st	Z, r24
    if ( v )
      *p |= wm ; /* sbi */
    else {
      if ( wm & rfm )
	HWA_ERR("flag bit can only be cleared by writing 1 into it.");
      *p &= ~wm ; /* cbi */
  9a:	2d 98       	cbi	0x05, 5	; 5
      /*
       *  Read-modify-write
       */
      uint8_t sm = wm & v ;     /* what has to be set     */
      uint8_t cm = wm & (~v) ;  /* what has to be cleared */
      *p = (*p & ~cm) | sm ;
  9c:	80 b7       	in	r24, 0x30	; 48
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	80 bf       	out	0x30, r24	; 48
  a2:	80 b7       	in	r24, 0x30	; 48
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	80 bf       	out	0x30, r24	; 48
  hw_turn_irq( COUNTER, COMPARE, off );
  hw_write( PIN_LED, 0 );
  hw_clear_irqf( hw_acmp0 );
  hw_turn_irq( hw_acmp0, on );
}
  a8:	ff 91       	pop	r31
  aa:	ef 91       	pop	r30
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <__vector_23>:
 *    turn the LED on
 *    program a compare-match IRQ to occur in 1ms.
 *	(maybe reset the prescaler)
 */
HW_ISR( hw_acmp0 )
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
  c8:	80 b7       	in	r24, 0x30	; 48
  ca:	87 7f       	andi	r24, 0xF7	; 247
  cc:	80 bf       	out	0x30, r24	; 48
     *  clobbering one register, is not interresting as sbi/cbi takes 2 cycles
     *  (ldi+out is 2 cycles) and it is sometimes required to have both bits
     *  written at the same time (e.g. TSM/PSR).
     */
    if ( v )
      *p |= wm ; /* sbi */
  ce:	2d 9a       	sbi	0x05, 5	; 5

    if ( rm == 0 )
      /*
       *  Nothing to be read, just write the new value
       */
      *p = value ;
  d0:	81 e8       	ldi	r24, 0x81	; 129
  d2:	83 bd       	out	0x23, r24	; 35

    if ( rm == 0 )
      /*
       *  Nothing to be read, just write the new value
       */
      *p = v ;
  d4:	16 bc       	out	0x26, r1	; 38
      /*
       *  Read-modify-write
       */
      uint8_t sm = wm & v ;     /* what has to be set     */
      uint8_t cm = wm & (~v) ;  /* what has to be cleared */
      *p = (*p & ~cm) | sm ;
  d6:	83 b5       	in	r24, 0x23	; 35
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	83 bd       	out	0x23, r24	; 35
     *  clobbering one register, is not interresting as sbi/cbi takes 2 cycles
     *  (ldi+out is 2 cycles) and it is sometimes required to have both bits
     *  written at the same time (e.g. TSM/PSR).
     */
    if ( v )
      *p |= wm ; /* sbi */
  dc:	a9 9a       	sbi	0x15, 1	; 21
      /*
       *  Read-modify-write
       */
      uint8_t sm = wm & v ;     /* what has to be set     */
      uint8_t cm = wm & (~v) ;  /* what has to be cleared */
      *p = (*p & ~cm) | sm ;
  de:	ee e6       	ldi	r30, 0x6E	; 110
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	80 83       	st	Z, r24
  if ( COUNTER_CLK_DIV > 1 )
    hw_turn(hw_rel(COUNTER,prescaler0), on);

  hw_clear_irqf( COUNTER, COMPARE );
  hw_turn_irq( COUNTER, COMPARE, on );
}
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	83 bf       	out	0x33, r24	; 51
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
  fc:	25 9a       	sbi	0x04, 5	; 4
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  fe:	93 e0       	ldi	r25, 0x03	; 3
 100:	95 bd       	out	0x25, r25	; 37
 102:	9a ef       	ldi	r25, 0xFA	; 250
 104:	97 bd       	out	0x27, r25	; 39
 106:	9a e4       	ldi	r25, 0x4A	; 74
 108:	90 bf       	out	0x30, r25	; 48
 10a:	90 e4       	ldi	r25, 0x40	; 64
 10c:	90 93 7b 00 	sts	0x007B, r25
 110:	80 93 7e 00 	sts	0x007E, r24

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
 114:	78 94       	sei

  for(;;)
    hw_sleep();
 116:	88 95       	sleep
 118:	fe cf       	rjmp	.-4      	; 0x116 <main+0x1e>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
