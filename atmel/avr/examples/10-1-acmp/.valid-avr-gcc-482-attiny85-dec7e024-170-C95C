HW_DEVICE="attiny85"
HW_SYSHZ="8000000"
PIN_LED="pb0"
REFERENCE="bandgap"
PIN_ANALOG_INPUT="pb2"
EDGE="falling"
COUNTER="counter0"
COUNTER_CLK_DIV="64"
COMPARE="compare0"
ON_TIME="0.001"

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__vector_7>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0d c0       	rjmp	.+26     	; 0x30 <__vector_10>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	2e d0       	rcall	.+92     	; 0x88 <main>
  2c:	3c c0       	rjmp	.+120    	; 0xa6 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <__vector_10>:
 *    disable this IRQ
 *    turn the LED off
 *    turn analog comparator IRQ on
 */
HW_ISR( COUNTER, COMPARE )
{
  30:	1f 92       	push	r1
  32:	0f 92       	push	r0
  34:	0f b6       	in	r0, 0x3f	; 63
  36:	0f 92       	push	r0
  38:	11 24       	eor	r1, r1
  3a:	8f 93       	push	r24
      /*
       *  Read-modify-write
       */
      uint8_t sm = wm & v ;     /* what has to be set     */
      uint8_t cm = wm & (~v) ;  /* what has to be cleared */
      *p = (*p & ~cm) | sm ;
  3c:	89 b7       	in	r24, 0x39	; 57
  3e:	8f 7e       	andi	r24, 0xEF	; 239
  40:	89 bf       	out	0x39, r24	; 57
    if ( v )
      *p |= wm ; /* sbi */
    else {
      if ( wm & rfm )
	HWA_ERR("flag bit can only be cleared by writing 1 into it.");
      *p &= ~wm ; /* cbi */
  42:	c0 98       	cbi	0x18, 0	; 24
     *  clobbering one register, is not interresting as sbi/cbi takes 2 cycles
     *  (ldi+out is 2 cycles) and it is sometimes required to have both bits
     *  written at the same time (e.g. TSM/PSR).
     */
    if ( v )
      *p |= wm ; /* sbi */
  44:	44 9a       	sbi	0x08, 4	; 8
  46:	43 9a       	sbi	0x08, 3	; 8
  hw_turn_irq( COUNTER, COMPARE, off );
  hw_write( PIN_LED, 0 );
  hw_clear_irqf( hw_acmp0 );
  hw_turn_irq( hw_acmp0, on );
}
  48:	8f 91       	pop	r24
  4a:	0f 90       	pop	r0
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	0f 90       	pop	r0
  50:	1f 90       	pop	r1
  52:	18 95       	reti

00000054 <__vector_7>:
 *    turn the LED on
 *    program a compare-match IRQ to occur in 1ms.
 *	(maybe reset the prescaler)
 */
HW_ISR( hw_acmp0 )
{
  54:	1f 92       	push	r1
  56:	0f 92       	push	r0
  58:	0f b6       	in	r0, 0x3f	; 63
  5a:	0f 92       	push	r0
  5c:	11 24       	eor	r1, r1
  5e:	8f 93       	push	r24
    else {
      if ( wm & rfm )
	HWA_ERR("flag bit can only be cleared by writing 1 into it.");
      *p &= ~wm ; /* cbi */
  60:	43 98       	cbi	0x08, 3	; 8
     *  clobbering one register, is not interresting as sbi/cbi takes 2 cycles
     *  (ldi+out is 2 cycles) and it is sometimes required to have both bits
     *  written at the same time (e.g. TSM/PSR).
     */
    if ( v )
      *p |= wm ; /* sbi */
  62:	c0 9a       	sbi	0x18, 0	; 24
       *  Read-modify-write
       */

      uint8_t sm = mask & rwm & value ;     /* what has to be set     */
      uint8_t cm = mask & rwm & (~value) ;  /* what has to be cleared */
      *p = (*p & ~cm) | sm ;
  64:	8c b5       	in	r24, 0x2c	; 44
  66:	81 68       	ori	r24, 0x81	; 129
  68:	8c bd       	out	0x2c, r24	; 44

    if ( rm == 0 )
      /*
       *  Nothing to be read, just write the new value
       */
      *p = v ;
  6a:	12 be       	out	0x32, r1	; 50
      /*
       *  Read-modify-write
       */
      uint8_t sm = wm & v ;     /* what has to be set     */
      uint8_t cm = wm & (~v) ;  /* what has to be cleared */
      *p = (*p & ~cm) | sm ;
  6c:	8c b5       	in	r24, 0x2c	; 44
  6e:	8f 77       	andi	r24, 0x7F	; 127
  70:	8c bd       	out	0x2c, r24	; 44

    if ( rm == 0 )
      /*
       *  Nothing to be read, just write the new value
       */
      *p = v ;
  72:	80 e1       	ldi	r24, 0x10	; 16
  74:	88 bf       	out	0x38, r24	; 56
      /*
       *  Read-modify-write
       */
      uint8_t sm = wm & v ;     /* what has to be set     */
      uint8_t cm = wm & (~v) ;  /* what has to be cleared */
      *p = (*p & ~cm) | sm ;
  76:	89 b7       	in	r24, 0x39	; 57
  78:	80 61       	ori	r24, 0x10	; 16
  7a:	89 bf       	out	0x39, r24	; 57
  if ( COUNTER_CLK_DIV > 1 )
    hw_turn(hw_rel(COUNTER,prescaler0), on);

  hw_clear_irqf( COUNTER, COMPARE );
  hw_turn_irq( COUNTER, COMPARE, on );
}
  7c:	8f 91       	pop	r24
  7e:	0f 90       	pop	r0
  80:	0f be       	out	0x3f, r0	; 63
  82:	0f 90       	pop	r0
  84:	1f 90       	pop	r1
  86:	18 95       	reti

00000088 <main>:
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  88:	80 e2       	ldi	r24, 0x20	; 32
  8a:	85 bf       	out	0x35, r24	; 53
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
  8c:	b8 9a       	sbi	0x17, 0	; 23
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  8e:	8d e7       	ldi	r24, 0x7D	; 125
  90:	89 bd       	out	0x29, r24	; 41
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	83 bf       	out	0x33, r24	; 51
  96:	8a e4       	ldi	r24, 0x4A	; 74
  98:	88 b9       	out	0x08, r24	; 8
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
  9a:	38 9a       	sbi	0x07, 0	; 7
  9c:	1e 9a       	sbi	0x03, 6	; 3
  9e:	a4 9a       	sbi	0x14, 4	; 20

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
  a0:	78 94       	sei

  for(;;)
    hw_sleep();
  a2:	88 95       	sleep
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <main+0x1a>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
