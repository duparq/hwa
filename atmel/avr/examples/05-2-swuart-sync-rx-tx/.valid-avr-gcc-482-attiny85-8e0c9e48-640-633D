HW_DEVICE=attiny85
hw_syshz=8000000
hw_swuart0_pin_rxd=hw_pin_pb3
hw_swuart0_pin_txd=hw_pin_pb3
hw_swuart0_autosync=sync_5_1
hw_swuart0_compare=hw_oc10
hw_swuart0_clk_div=1
PIN_LED=hw_pin_pb0
UART=hw_swuart0
OSCCAL=OSCCAL


build/out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000280  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000314  2**0
                  ALLOC
  3 .stab         00000fcc  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e2a  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000310a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1d c0       	rjmp	.+58     	; 0x40 <__vector_2>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__vector_3>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a5 36       	cpi	r26, 0x65	; 101
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	82 d0       	rcall	.+260    	; 0x140 <main>
  3c:	1f c1       	rjmp	.+574    	; 0x27c <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_2>:
  40:	8f 93       	push	r24
  42:	78 94       	sei
  44:	8f b5       	in	r24, 0x2f	; 47
  46:	af 93       	push	r26
  48:	af b7       	in	r26, 0x3f	; 63
  4a:	af 93       	push	r26
  4c:	8e 9b       	sbis	0x11, 6	; 17
  4e:	c9 c0       	rjmp	.+402    	; 0x1e2 <_hw_swuart0_sync>
  50:	b3 99       	sbic	0x16, 3	; 22
  52:	11 c0       	rjmp	.+34     	; 0x76 <_hw_swuart0_st99>
  54:	ab b7       	in	r26, 0x3b	; 59
  56:	af 7d       	andi	r26, 0xDF	; 223
  58:	ab bf       	out	0x3b, r26	; 59
  5a:	a0 91 63 00 	lds	r26, 0x0063
  5e:	8a 0f       	add	r24, r26
  60:	8e bd       	out	0x2e, r24	; 46
  62:	88 e0       	ldi	r24, 0x08	; 8
  64:	80 93 62 00 	sts	0x0062, r24
  68:	80 e4       	ldi	r24, 0x40	; 64
  6a:	88 bf       	out	0x38, r24	; 56
  6c:	f8 94       	cli
  6e:	89 b7       	in	r24, 0x39	; 57
  70:	80 64       	ori	r24, 0x40	; 64
  72:	78 94       	sei
  74:	89 bf       	out	0x39, r24	; 57

00000076 <_hw_swuart0_st99>:
  76:	af 91       	pop	r26
  78:	af bf       	out	0x3f, r26	; 63
  7a:	af 91       	pop	r26
  7c:	8f 91       	pop	r24
  7e:	18 95       	reti

00000080 <__vector_3>:
  80:	ff 93       	push	r31
  82:	ff b7       	in	r31, 0x3f	; 63
  84:	ff 93       	push	r31
  86:	8c 99       	sbic	0x11, 4	; 17
  88:	33 c0       	rjmp	.+102    	; 0xf0 <_hw_swuart0_tx>
  8a:	78 94       	sei
  8c:	f6 b3       	in	r31, 0x16	; 22
  8e:	f3 fb       	bst	r31, 3
  90:	f0 91 61 00 	lds	r31, 0x0061
  94:	f6 95       	lsr	r31
  96:	f7 f9       	bld	r31, 7
  98:	f0 93 61 00 	sts	0x0061, r31
  9c:	f0 91 62 00 	lds	r31, 0x0062
  a0:	f1 50       	subi	r31, 0x01	; 1
  a2:	f0 93 62 00 	sts	0x0062, r31
  a6:	82 f0       	brmi	.+32     	; 0xc8 <_hw_swuart0_rxeof>
  a8:	21 f4       	brne	.+8      	; 0xb2 <_hw_swuart0_next>
  aa:	f0 91 61 00 	lds	r31, 0x0061
  ae:	f0 93 60 00 	sts	0x0060, r31

000000b2 <_hw_swuart0_next>:
  b2:	ef 93       	push	r30
  b4:	ee b5       	in	r30, 0x2e	; 46
  b6:	f0 91 64 00 	lds	r31, 0x0064
  ba:	ef 0f       	add	r30, r31
  bc:	ee bd       	out	0x2e, r30	; 46
  be:	ef 91       	pop	r30
  c0:	ff 91       	pop	r31
  c2:	ff bf       	out	0x3f, r31	; 63
  c4:	ff 91       	pop	r31
  c6:	18 95       	reti

000000c8 <_hw_swuart0_rxeof>:
  c8:	f1 b3       	in	r31, 0x11	; 17
  ca:	f0 f9       	bld	r31, 0
  cc:	f0 62       	ori	r31, 0x20	; 32
  ce:	f6 fd       	sbrc	r31, 6
  d0:	f4 60       	ori	r31, 0x04	; 4
  d2:	f0 64       	ori	r31, 0x40	; 64
  d4:	f1 bb       	out	0x11, r31	; 17
  d6:	f8 94       	cli
  d8:	f9 b7       	in	r31, 0x39	; 57
  da:	ff 7b       	andi	r31, 0xBF	; 191
  dc:	78 94       	sei
  de:	f9 bf       	out	0x39, r31	; 57
  e0:	f0 e2       	ldi	r31, 0x20	; 32
  e2:	fa bf       	out	0x3a, r31	; 58
  e4:	f8 94       	cli
  e6:	fb b7       	in	r31, 0x3b	; 59
  e8:	f0 62       	ori	r31, 0x20	; 32
  ea:	78 94       	sei
  ec:	fb bf       	out	0x3b, r31	; 59
  ee:	e1 cf       	rjmp	.-62     	; 0xb2 <_hw_swuart0_next>

000000f0 <_hw_swuart0_tx>:
  f0:	f0 91 61 00 	lds	r31, 0x0061
  f4:	f6 95       	lsr	r31
  f6:	18 f4       	brcc	.+6      	; 0xfe <_hw_swuart0_tx0>

000000f8 <_hw_swuart0_tx1>:
  f8:	78 94       	sei
  fa:	c3 9a       	sbi	0x18, 3	; 24
  fc:	02 c0       	rjmp	.+4      	; 0x102 <_hw_swuart0_txn>

000000fe <_hw_swuart0_tx0>:
  fe:	78 94       	sei
 100:	c3 98       	cbi	0x18, 3	; 24

00000102 <_hw_swuart0_txn>:
 102:	f0 93 61 00 	sts	0x0061, r31
 106:	f0 91 62 00 	lds	r31, 0x0062
 10a:	f1 50       	subi	r31, 0x01	; 1
 10c:	f0 93 62 00 	sts	0x0062, r31
 110:	2a f0       	brmi	.+10     	; 0x11c <_hw_swuart0_txeof>
 112:	19 f4       	brne	.+6      	; 0x11a <_hw_swuart0_txn+0x18>
 114:	f3 e0       	ldi	r31, 0x03	; 3
 116:	f0 93 61 00 	sts	0x0061, r31
 11a:	cb cf       	rjmp	.-106    	; 0xb2 <_hw_swuart0_next>

0000011c <_hw_swuart0_txeof>:
 11c:	8d 9a       	sbi	0x11, 5	; 17
 11e:	f8 94       	cli
 120:	f9 b7       	in	r31, 0x39	; 57
 122:	ff 7b       	andi	r31, 0xBF	; 191
 124:	78 94       	sei
 126:	f9 bf       	out	0x39, r31	; 57
 128:	bb 98       	cbi	0x17, 3	; 23
 12a:	c3 98       	cbi	0x18, 3	; 24
 12c:	8b 9a       	sbi	0x11, 3	; 17
 12e:	8c 98       	cbi	0x11, 4	; 17
 130:	f0 e2       	ldi	r31, 0x20	; 32
 132:	fa bf       	out	0x3a, r31	; 58
 134:	f8 94       	cli
 136:	fb b7       	in	r31, 0x3b	; 59
 138:	f0 62       	ori	r31, 0x20	; 32
 13a:	78 94       	sei
 13c:	fb bf       	out	0x3b, r31	; 59
 13e:	b9 cf       	rjmp	.-142    	; 0xb2 <_hw_swuart0_next>

00000140 <main>:
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 140:	80 e2       	ldi	r24, 0x20	; 32
 142:	8b bf       	out	0x3b, r24	; 59
 144:	8a bf       	out	0x3a, r24	; 58
 146:	85 bf       	out	0x35, r24	; 53
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
 148:	ab 9a       	sbi	0x15, 3	; 21
 14a:	b8 9a       	sbi	0x17, 0	; 23
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 bf       	out	0x30, r24	; 48
   */
  hwa_commit();

  /*  Interrupt requests must be serviced for swuart
   */
  hw_enable_interrupts();
 150:	78 94       	sei
    /*
     *  Just 1 bit to be written at C address < 0x40 (ASM address < 0x20): use
     *  sbi/cbi
     */
    if ( v )
      *p |= wm ; /* sbi */
 152:	c0 9a       	sbi	0x18, 0	; 24
     */
    hw_write( PIN_LED, 1 );

    /*  Force UART to re-synchronize
     */
    hw_reset( UART );
 154:	7e d0       	rcall	.+252    	; 0x252 <_hw_swuart0_reset>

    /*  Wait for UART synchronization, then send the prompt
     */
    while ( !hw_stat(UART).synced )
 156:	8e 99       	sbic	0x11, 6	; 17
 158:	10 c0       	rjmp	.+32     	; 0x17a <main+0x3a>
      hw_sleep();
 15a:	88 95       	sleep
 15c:	fc cf       	rjmp	.-8      	; 0x156 <main+0x16>

      /*  Wait for a command
       */
      while ( !hw_stat(UART).rxc )
        hw_sleep();
      uint8_t byte = hw_read(UART);
 15e:	14 d0       	rcall	.+40     	; 0x188 <_hw_swuart0_getbyte>

      /*  Process it
       */
      if ( byte=='A' ) {
 160:	81 34       	cpi	r24, 0x41	; 65
 162:	b9 f7       	brne	.-18     	; 0x152 <main+0x12>
 164:	c0 9a       	sbi	0x18, 0	; 24
 */
HW_INLINE uint8_t _hw_read__r8 ( intptr_t ra, uint8_t rbn, uint8_t rbp )
{
  uint8_t m = (1U<<rbn)-1 ;
  volatile uint8_t *p = (volatile uint8_t *)ra ;
  return ((*p)>>rbp) & m ;
 166:	80 91 64 00 	lds	r24, 0x0064
         *  Known command: reply with values of UART registers dtn, dt0
         */
        uint16_t dt ;

        dt = hw_read_reg( UART, dtn ) ;
        hw_write( UART, (dt>>0) & 0xFF );
 16a:	14 d0       	rcall	.+40     	; 0x194 <_hw_swuart0_putbyte>
        hw_write( UART, (dt>>8) & 0xFF );
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	12 d0       	rcall	.+36     	; 0x194 <_hw_swuart0_putbyte>
 170:	80 91 63 00 	lds	r24, 0x0063

        dt = hw_read_reg( UART, dt0 ) ;
        hw_write( UART, (dt>>0) & 0xFF );
 174:	0f d0       	rcall	.+30     	; 0x194 <_hw_swuart0_putbyte>
        hw_write( UART, (dt>>8) & 0xFF );
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0d d0       	rcall	.+26     	; 0x194 <_hw_swuart0_putbyte>

        hw_write( UART,'$');
 17a:	84 e2       	ldi	r24, 0x24	; 36
 17c:	0b d0       	rcall	.+22     	; 0x194 <_hw_swuart0_putbyte>
    if ( v )
      *p |= wm ; /* sbi */
    else {
      if ( wm & rfm )
	HWA_ERR("flag bit can only be cleared by writing 1 into it.");
      *p &= ~wm ; /* cbi */
 17e:	c0 98       	cbi	0x18, 0	; 24
     */
    for(;;) {

      /*  Wait for a command
       */
      while ( !hw_stat(UART).rxc )
 180:	8a 99       	sbic	0x11, 2	; 17
 182:	ed cf       	rjmp	.-38     	; 0x15e <main+0x1e>
        hw_sleep();
 184:	88 95       	sleep
 186:	fc cf       	rjmp	.-8      	; 0x180 <main+0x40>

00000188 <_hw_swuart0_getbyte>:
 188:	8a 9b       	sbis	0x11, 2	; 17
 18a:	fe cf       	rjmp	.-4      	; 0x188 <_hw_swuart0_getbyte>
 18c:	8a 98       	cbi	0x11, 2	; 17
 18e:	80 91 60 00 	lds	r24, 0x0060
 192:	08 95       	ret

00000194 <_hw_swuart0_putbyte>:
 194:	98 e0       	ldi	r25, 0x08	; 8

00000196 <_hw_swuart0_putbits>:
 196:	21 d0       	rcall	.+66     	; 0x1da <_hw_swuart0_wait_ready>
 198:	8d 9b       	sbis	0x11, 5	; 17
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <_hw_swuart0_putbits+0xc>
 19c:	a8 b7       	in	r26, 0x38	; 56
 19e:	a6 ff       	sbrs	r26, 6
 1a0:	fd cf       	rjmp	.-6      	; 0x19c <_hw_swuart0_putbits+0x6>
 1a2:	ab b7       	in	r26, 0x3b	; 59
 1a4:	af 7d       	andi	r26, 0xDF	; 223
 1a6:	ab bf       	out	0x3b, r26	; 59
 1a8:	80 93 61 00 	sts	0x0061, r24
 1ac:	83 e5       	ldi	r24, 0x53	; 83
 1ae:	81 bb       	out	0x11, r24	; 17
 1b0:	90 93 62 00 	sts	0x0062, r25
 1b4:	c3 9a       	sbi	0x18, 3	; 24
 1b6:	bb 9a       	sbi	0x17, 3	; 23
 1b8:	f8 94       	cli
 1ba:	8f b5       	in	r24, 0x2f	; 47
 1bc:	78 94       	sei
 1be:	c3 98       	cbi	0x18, 3	; 24
 1c0:	90 91 64 00 	lds	r25, 0x0064
 1c4:	94 51       	subi	r25, 0x14	; 20
 1c6:	89 0f       	add	r24, r25
 1c8:	8e bd       	out	0x2e, r24	; 46
 1ca:	80 e4       	ldi	r24, 0x40	; 64
 1cc:	88 bf       	out	0x38, r24	; 56
 1ce:	f8 94       	cli
 1d0:	89 b7       	in	r24, 0x39	; 57
 1d2:	80 64       	ori	r24, 0x40	; 64
 1d4:	78 94       	sei
 1d6:	89 bf       	out	0x39, r24	; 57
 1d8:	08 95       	ret

000001da <_hw_swuart0_wait_ready>:
 1da:	a9 b7       	in	r26, 0x39	; 57
 1dc:	a6 fd       	sbrc	r26, 6
 1de:	fd cf       	rjmp	.-6      	; 0x1da <_hw_swuart0_wait_ready>
 1e0:	08 95       	ret

000001e2 <_hw_swuart0_sync>:
 1e2:	b3 99       	sbic	0x16, 3	; 22
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <_hw_swuart0_sync+0x10>
 1e6:	8e bd       	out	0x2e, r24	; 46
 1e8:	a0 91 64 00 	lds	r26, 0x0064
 1ec:	a0 93 63 00 	sts	0x0063, r26
 1f0:	42 cf       	rjmp	.-380    	; 0x76 <_hw_swuart0_st99>
 1f2:	cf 93       	push	r28
 1f4:	ae b5       	in	r26, 0x2e	; 46
 1f6:	8a 1b       	sub	r24, r26
 1f8:	80 93 64 00 	sts	0x0064, r24
 1fc:	a8 2f       	mov	r26, r24
 1fe:	aa 0f       	add	r26, r26
 200:	aa 0f       	add	r26, r26
 202:	a8 0f       	add	r26, r24
 204:	c8 2f       	mov	r28, r24
 206:	ce 5f       	subi	r28, 0xFE	; 254
 208:	c6 95       	lsr	r28
 20a:	c6 95       	lsr	r28
 20c:	ac 1b       	sub	r26, r28
 20e:	80 91 63 00 	lds	r24, 0x0063
 212:	8a 17       	cp	r24, r26
 214:	e0 f0       	brcs	.+56     	; 0x24e <_hw_swuart0_sync+0x6c>
 216:	ac 0f       	add	r26, r28
 218:	ac 0f       	add	r26, r28
 21a:	8a 17       	cp	r24, r26
 21c:	c0 f4       	brcc	.+48     	; 0x24e <_hw_swuart0_sync+0x6c>
 21e:	80 91 64 00 	lds	r24, 0x0064
 222:	a8 2f       	mov	r26, r24
 224:	a3 95       	inc	r26
 226:	a6 95       	lsr	r26
 228:	8a 0f       	add	r24, r26
 22a:	86 52       	subi	r24, 0x26	; 38
 22c:	80 93 63 00 	sts	0x0063, r24
 230:	8e b5       	in	r24, 0x2e	; 46
 232:	90 91 64 00 	lds	r25, 0x0064
 236:	89 0f       	add	r24, r25
 238:	8e bd       	out	0x2e, r24	; 46
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	80 93 62 00 	sts	0x0062, r24
 240:	80 e4       	ldi	r24, 0x40	; 64
 242:	88 bf       	out	0x38, r24	; 56
 244:	f8 94       	cli
 246:	89 b7       	in	r24, 0x39	; 57
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	78 94       	sei
 24c:	89 bf       	out	0x39, r24	; 57
 24e:	cf 91       	pop	r28
 250:	12 cf       	rjmp	.-476    	; 0x76 <_hw_swuart0_st99>

00000252 <_hw_swuart0_reset>:
 252:	f8 94       	cli
 254:	89 b7       	in	r24, 0x39	; 57
 256:	8f 7b       	andi	r24, 0xBF	; 191
 258:	78 94       	sei
 25a:	89 bf       	out	0x39, r24	; 57
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	81 bb       	out	0x11, r24	; 17
 260:	80 93 62 00 	sts	0x0062, r24
 264:	80 93 64 00 	sts	0x0064, r24
 268:	80 93 63 00 	sts	0x0063, r24
 26c:	80 e2       	ldi	r24, 0x20	; 32
 26e:	8a bf       	out	0x3a, r24	; 58
 270:	f8 94       	cli
 272:	8b b7       	in	r24, 0x3b	; 59
 274:	80 62       	ori	r24, 0x20	; 32
 276:	78 94       	sei
 278:	8b bf       	out	0x3b, r24	; 59
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
