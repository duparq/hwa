HW_DEVICE="attiny85"
HW_SYSHZ="8000000"
hw_swuart0_pin_rxd="pb3"
hw_swuart0_pin_txd="pb3"
hw_swuart0_autosync="sync_5_1"
hw_swuart0_compare="counter1compare0"
hw_swuart0_clk_div="1"

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1d c0       	rjmp	.+58     	; 0x40 <__vector_2>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__vector_3>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	aa 36       	cpi	r26, 0x6A	; 106
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	82 d0       	rcall	.+260    	; 0x140 <main>
  3c:	49 c1       	rjmp	.+658    	; 0x2d0 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_2>:
  40:	8f 93       	push	r24
  42:	78 94       	sei
  44:	8f b5       	in	r24, 0x2f	; 47
  46:	af 93       	push	r26
  48:	af b7       	in	r26, 0x3f	; 63
  4a:	af 93       	push	r26
  4c:	8e 9b       	sbis	0x11, 6	; 17
  4e:	08 c1       	rjmp	.+528    	; 0x260 <_hw_swuart0_sync>
  50:	b3 99       	sbic	0x16, 3	; 22
  52:	11 c0       	rjmp	.+34     	; 0x76 <_hw_swuart0_st99>
  54:	ab b7       	in	r26, 0x3b	; 59
  56:	af 7d       	andi	r26, 0xDF	; 223
  58:	ab bf       	out	0x3b, r26	; 59
  5a:	a0 91 68 00 	lds	r26, 0x0068
  5e:	8a 0f       	add	r24, r26
  60:	8e bd       	out	0x2e, r24	; 46
  62:	88 e0       	ldi	r24, 0x08	; 8
  64:	80 93 67 00 	sts	0x0067, r24
  68:	80 e4       	ldi	r24, 0x40	; 64
  6a:	88 bf       	out	0x38, r24	; 56
  6c:	f8 94       	cli
  6e:	89 b7       	in	r24, 0x39	; 57
  70:	80 64       	ori	r24, 0x40	; 64
  72:	78 94       	sei
  74:	89 bf       	out	0x39, r24	; 57

00000076 <_hw_swuart0_st99>:
  76:	af 91       	pop	r26
  78:	af bf       	out	0x3f, r26	; 63
  7a:	af 91       	pop	r26
  7c:	8f 91       	pop	r24
  7e:	18 95       	reti

00000080 <__vector_3>:
  80:	ff 93       	push	r31
  82:	ff b7       	in	r31, 0x3f	; 63
  84:	ff 93       	push	r31
  86:	8c 99       	sbic	0x11, 4	; 17
  88:	33 c0       	rjmp	.+102    	; 0xf0 <_hw_swuart0_tx>
  8a:	78 94       	sei
  8c:	f6 b3       	in	r31, 0x16	; 22
  8e:	f3 fb       	bst	r31, 3
  90:	f0 91 66 00 	lds	r31, 0x0066
  94:	f6 95       	lsr	r31
  96:	f7 f9       	bld	r31, 7
  98:	f0 93 66 00 	sts	0x0066, r31
  9c:	f0 91 67 00 	lds	r31, 0x0067
  a0:	f1 50       	subi	r31, 0x01	; 1
  a2:	f0 93 67 00 	sts	0x0067, r31
  a6:	82 f0       	brmi	.+32     	; 0xc8 <_hw_swuart0_rxeof>
  a8:	21 f4       	brne	.+8      	; 0xb2 <_hw_swuart0_next>
  aa:	f0 91 66 00 	lds	r31, 0x0066
  ae:	f0 93 65 00 	sts	0x0065, r31

000000b2 <_hw_swuart0_next>:
  b2:	ef 93       	push	r30
  b4:	ee b5       	in	r30, 0x2e	; 46
  b6:	f0 91 69 00 	lds	r31, 0x0069
  ba:	ef 0f       	add	r30, r31
  bc:	ee bd       	out	0x2e, r30	; 46
  be:	ef 91       	pop	r30
  c0:	ff 91       	pop	r31
  c2:	ff bf       	out	0x3f, r31	; 63
  c4:	ff 91       	pop	r31
  c6:	18 95       	reti

000000c8 <_hw_swuart0_rxeof>:
  c8:	f1 b3       	in	r31, 0x11	; 17
  ca:	f0 f9       	bld	r31, 0
  cc:	f0 62       	ori	r31, 0x20	; 32
  ce:	f6 fd       	sbrc	r31, 6
  d0:	f4 60       	ori	r31, 0x04	; 4
  d2:	f0 64       	ori	r31, 0x40	; 64
  d4:	f1 bb       	out	0x11, r31	; 17
  d6:	f8 94       	cli
  d8:	f9 b7       	in	r31, 0x39	; 57
  da:	ff 7b       	andi	r31, 0xBF	; 191
  dc:	78 94       	sei
  de:	f9 bf       	out	0x39, r31	; 57
  e0:	f0 e2       	ldi	r31, 0x20	; 32
  e2:	fa bf       	out	0x3a, r31	; 58
  e4:	f8 94       	cli
  e6:	fb b7       	in	r31, 0x3b	; 59
  e8:	f0 62       	ori	r31, 0x20	; 32
  ea:	78 94       	sei
  ec:	fb bf       	out	0x3b, r31	; 59
  ee:	e1 cf       	rjmp	.-62     	; 0xb2 <_hw_swuart0_next>

000000f0 <_hw_swuart0_tx>:
  f0:	f0 91 66 00 	lds	r31, 0x0066
  f4:	f6 95       	lsr	r31
  f6:	18 f4       	brcc	.+6      	; 0xfe <_hw_swuart0_tx0>

000000f8 <_hw_swuart0_tx1>:
  f8:	78 94       	sei
  fa:	c3 9a       	sbi	0x18, 3	; 24
  fc:	02 c0       	rjmp	.+4      	; 0x102 <_hw_swuart0_txn>

000000fe <_hw_swuart0_tx0>:
  fe:	78 94       	sei
 100:	c3 98       	cbi	0x18, 3	; 24

00000102 <_hw_swuart0_txn>:
 102:	f0 93 66 00 	sts	0x0066, r31
 106:	f0 91 67 00 	lds	r31, 0x0067
 10a:	f1 50       	subi	r31, 0x01	; 1
 10c:	f0 93 67 00 	sts	0x0067, r31
 110:	2a f0       	brmi	.+10     	; 0x11c <_hw_swuart0_txeof>
 112:	19 f4       	brne	.+6      	; 0x11a <_hw_swuart0_txn+0x18>
 114:	f3 e0       	ldi	r31, 0x03	; 3
 116:	f0 93 66 00 	sts	0x0066, r31
 11a:	cb cf       	rjmp	.-106    	; 0xb2 <_hw_swuart0_next>

0000011c <_hw_swuart0_txeof>:
 11c:	8d 9a       	sbi	0x11, 5	; 17
 11e:	f8 94       	cli
 120:	f9 b7       	in	r31, 0x39	; 57
 122:	ff 7b       	andi	r31, 0xBF	; 191
 124:	78 94       	sei
 126:	f9 bf       	out	0x39, r31	; 57
 128:	bb 98       	cbi	0x17, 3	; 23
 12a:	c3 98       	cbi	0x18, 3	; 24
 12c:	8b 9a       	sbi	0x11, 3	; 17
 12e:	8c 98       	cbi	0x11, 4	; 17
 130:	f0 e2       	ldi	r31, 0x20	; 32
 132:	fa bf       	out	0x3a, r31	; 58
 134:	f8 94       	cli
 136:	fb b7       	in	r31, 0x3b	; 59
 138:	f0 62       	ori	r31, 0x20	; 32
 13a:	78 94       	sei
 13c:	fb bf       	out	0x3b, r31	; 59
 13e:	b9 cf       	rjmp	.-142    	; 0xb2 <_hw_swuart0_next>

00000140 <main>:
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 140:	80 e2       	ldi	r24, 0x20	; 32
 142:	8b bf       	out	0x3b, r24	; 59
 144:	8a bf       	out	0x3a, r24	; 58
 146:	85 bf       	out	0x35, r24	; 53
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
 148:	ab 9a       	sbi	0x15, 3	; 21
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 bf       	out	0x30, r24	; 48

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
 14e:	78 94       	sei

  /*  Wait for UART synchronization, then send the prompt
   */
  while ( !hw_stat(UART).synced )
 150:	8e 99       	sbic	0x11, 6	; 17
 152:	02 c0       	rjmp	.+4      	; 0x158 <main+0x18>
    hw_sleep();
 154:	88 95       	sleep
 156:	fc cf       	rjmp	.-8      	; 0x150 <main+0x10>
  hw_write( UART, '$');
 158:	84 e2       	ldi	r24, 0x24	; 36
 15a:	5b d0       	rcall	.+182    	; 0x212 <_hw_swuart0_putbyte>
  } buf ;

  if ( bcount == 0 ) {
    if ( byte == 'E' || byte == 'e' ) {
      buf.cmd = byte ;
      bcount++ ;
 15c:	c1 e0       	ldi	r28, 0x01	; 1
    /*
     *  Main loop:
     *    put the MCU into sleep mode, an interrupt will awake it
     *    process incomming bytes
     */
    hw_sleep();
 15e:	88 95       	sleep
    if ( hw_stat(UART).rxc ) {
 160:	8a 9b       	sbis	0x11, 2	; 17
 162:	fd cf       	rjmp	.-6      	; 0x15e <main+0x1e>
      /*
       *  MCU awakened by SWUART that has received a stop bit
       *  Process the received byte (clears rxc flag)
       */
      process( hw_read(UART) );
 164:	50 d0       	rcall	.+160    	; 0x206 <_hw_swuart0_getbyte>
      uint16_t          addr ;
      uint8_t           n ;
    } ;
  } buf ;

  if ( bcount == 0 ) {
 166:	e0 91 64 00 	lds	r30, 0x0064
 16a:	e1 11       	cpse	r30, r1
 16c:	09 c0       	rjmp	.+18     	; 0x180 <main+0x40>
    if ( byte == 'E' || byte == 'e' ) {
 16e:	98 2f       	mov	r25, r24
 170:	9f 7d       	andi	r25, 0xDF	; 223
 172:	95 34       	cpi	r25, 0x45	; 69
 174:	a1 f7       	brne	.-24     	; 0x15e <main+0x1e>
      buf.cmd = byte ;
 176:	80 93 60 00 	sts	0x0060, r24
      bcount++ ;
 17a:	c0 93 64 00 	sts	0x0064, r28
 17e:	ef cf       	rjmp	.-34     	; 0x15e <main+0x1e>
    }
  } else if ( bcount < 4 )
 180:	e4 30       	cpi	r30, 0x04	; 4
 182:	48 f4       	brcc	.+18     	; 0x196 <main+0x56>
    buf.buf[bcount++] = byte ;
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	9e 0f       	add	r25, r30
 188:	90 93 64 00 	sts	0x0064, r25
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	e0 5a       	subi	r30, 0xA0	; 160
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	80 83       	st	Z, r24
 194:	e4 cf       	rjmp	.-56     	; 0x15e <main+0x1e>
  else {
    bcount = 0 ;
 196:	10 92 64 00 	sts	0x0064, r1
    if ( byte == '\n'
 19a:	8a 30       	cpi	r24, 0x0A	; 10
 19c:	89 f5       	brne	.+98     	; 0x200 <main+0xc0>
         && buf.addr < HW_DEVICE_EEPROM_SIZE ) {
 19e:	80 91 61 00 	lds	r24, 0x0061
 1a2:	90 91 62 00 	lds	r25, 0x0062
 1a6:	81 15       	cp	r24, r1
 1a8:	22 e0       	ldi	r18, 0x02	; 2
 1aa:	92 07       	cpc	r25, r18
 1ac:	48 f5       	brcc	.+82     	; 0x200 <main+0xc0>
      if ( buf.cmd == 'E' )
 1ae:	20 91 60 00 	lds	r18, 0x0060
 1b2:	25 34       	cpi	r18, 0x45	; 69
 1b4:	41 f4       	brne	.+16     	; 0x1c6 <main+0x86>
        hw_write( hw_eeprom0, buf.addr, buf.n );
 1b6:	20 91 63 00 	lds	r18, 0x0063
			      intptr_t mpe_ra, uint8_t mpe_bp,
			      intptr_t pe_ra, uint8_t pe_bp )
{
  /*  Assume EECR is 0, programming mode is 'Erase & write'
   */
  *(volatile uint16_t*)ar = a ;
 1ba:	9f bb       	out	0x1f, r25	; 31
 1bc:	8e bb       	out	0x1e, r24	; 30
  *(volatile uint8_t*)dr = v ;
 1be:	2d bb       	out	0x1d, r18	; 29
  *(volatile uint8_t*)mpe_ra |= (1U<<mpe_bp) ;
 1c0:	e2 9a       	sbi	0x1c, 2	; 28
  *(volatile uint8_t*)pe_ra |= (1U<<pe_bp) ;
 1c2:	e1 9a       	sbi	0x1c, 1	; 28
 1c4:	1b c0       	rjmp	.+54     	; 0x1fc <main+0xbc>
      else {
        while ( buf.n-- ) {
 1c6:	80 91 63 00 	lds	r24, 0x0063
 1ca:	9f ef       	ldi	r25, 0xFF	; 255
 1cc:	98 0f       	add	r25, r24
 1ce:	90 93 63 00 	sts	0x0063, r25
 1d2:	88 23       	and	r24, r24
 1d4:	99 f0       	breq	.+38     	; 0x1fc <main+0xbc>
          uint8_t byte = hw_read( hw_eeprom0, buf.addr );
 1d6:	80 91 61 00 	lds	r24, 0x0061
 1da:	90 91 62 00 	lds	r25, 0x0062
HW_INLINE uint8_t _hw_rdeeproma( intptr_t ar,
				 intptr_t cr, uint8_t cb,
				 intptr_t dr,
				 uint16_t a )
{
  *(volatile uint16_t*)ar = a ;
 1de:	9f bb       	out	0x1f, r25	; 31
 1e0:	8e bb       	out	0x1e, r24	; 30
  *(volatile uint8_t*)cr |= (1<<cb) ;
 1e2:	e0 9a       	sbi	0x1c, 0	; 28
  return *(volatile uint8_t*) dr ;
 1e4:	8d b3       	in	r24, 0x1d	; 29
          hw_write( UART, byte );
 1e6:	15 d0       	rcall	.+42     	; 0x212 <_hw_swuart0_putbyte>
          buf.addr++ ;
 1e8:	80 91 61 00 	lds	r24, 0x0061
 1ec:	90 91 62 00 	lds	r25, 0x0062
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	90 93 62 00 	sts	0x0062, r25
 1f6:	80 93 61 00 	sts	0x0061, r24
 1fa:	e5 cf       	rjmp	.-54     	; 0x1c6 <main+0x86>
        }
      }
      hw_write( UART, '$' );
 1fc:	84 e2       	ldi	r24, 0x24	; 36
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <main+0xc2>
      return ;
    }
    hw_write( UART, '!' );
 200:	81 e2       	ldi	r24, 0x21	; 33
 202:	07 d0       	rcall	.+14     	; 0x212 <_hw_swuart0_putbyte>
 204:	ac cf       	rjmp	.-168    	; 0x15e <main+0x1e>

00000206 <_hw_swuart0_getbyte>:
 206:	8a 9b       	sbis	0x11, 2	; 17
 208:	fe cf       	rjmp	.-4      	; 0x206 <_hw_swuart0_getbyte>
 20a:	8a 98       	cbi	0x11, 2	; 17
 20c:	80 91 65 00 	lds	r24, 0x0065
 210:	08 95       	ret

00000212 <_hw_swuart0_putbyte>:
 212:	98 e0       	ldi	r25, 0x08	; 8

00000214 <_hw_swuart0_putbits>:
 214:	21 d0       	rcall	.+66     	; 0x258 <_hw_swuart0_wait_ready>
 216:	8d 9b       	sbis	0x11, 5	; 17
 218:	03 c0       	rjmp	.+6      	; 0x220 <_hw_swuart0_putbits+0xc>
 21a:	a8 b7       	in	r26, 0x38	; 56
 21c:	a6 ff       	sbrs	r26, 6
 21e:	fd cf       	rjmp	.-6      	; 0x21a <_hw_swuart0_putbits+0x6>
 220:	ab b7       	in	r26, 0x3b	; 59
 222:	af 7d       	andi	r26, 0xDF	; 223
 224:	ab bf       	out	0x3b, r26	; 59
 226:	80 93 66 00 	sts	0x0066, r24
 22a:	83 e5       	ldi	r24, 0x53	; 83
 22c:	81 bb       	out	0x11, r24	; 17
 22e:	90 93 67 00 	sts	0x0067, r25
 232:	c3 9a       	sbi	0x18, 3	; 24
 234:	bb 9a       	sbi	0x17, 3	; 23
 236:	f8 94       	cli
 238:	8f b5       	in	r24, 0x2f	; 47
 23a:	78 94       	sei
 23c:	c3 98       	cbi	0x18, 3	; 24
 23e:	90 91 69 00 	lds	r25, 0x0069
 242:	94 51       	subi	r25, 0x14	; 20
 244:	89 0f       	add	r24, r25
 246:	8e bd       	out	0x2e, r24	; 46
 248:	80 e4       	ldi	r24, 0x40	; 64
 24a:	88 bf       	out	0x38, r24	; 56
 24c:	f8 94       	cli
 24e:	89 b7       	in	r24, 0x39	; 57
 250:	80 64       	ori	r24, 0x40	; 64
 252:	78 94       	sei
 254:	89 bf       	out	0x39, r24	; 57
 256:	08 95       	ret

00000258 <_hw_swuart0_wait_ready>:
 258:	a9 b7       	in	r26, 0x39	; 57
 25a:	a6 fd       	sbrc	r26, 6
 25c:	fd cf       	rjmp	.-6      	; 0x258 <_hw_swuart0_wait_ready>
 25e:	08 95       	ret

00000260 <_hw_swuart0_sync>:
 260:	b3 99       	sbic	0x16, 3	; 22
 262:	06 c0       	rjmp	.+12     	; 0x270 <_hw_swuart0_sync+0x10>
 264:	8e bd       	out	0x2e, r24	; 46
 266:	a0 91 69 00 	lds	r26, 0x0069
 26a:	a0 93 68 00 	sts	0x0068, r26
 26e:	03 cf       	rjmp	.-506    	; 0x76 <_hw_swuart0_st99>
 270:	cf 93       	push	r28
 272:	ae b5       	in	r26, 0x2e	; 46
 274:	8a 1b       	sub	r24, r26
 276:	80 93 69 00 	sts	0x0069, r24
 27a:	a8 2f       	mov	r26, r24
 27c:	aa 0f       	add	r26, r26
 27e:	aa 0f       	add	r26, r26
 280:	a8 0f       	add	r26, r24
 282:	c8 2f       	mov	r28, r24
 284:	ce 5f       	subi	r28, 0xFE	; 254
 286:	c6 95       	lsr	r28
 288:	c6 95       	lsr	r28
 28a:	ac 1b       	sub	r26, r28
 28c:	80 91 68 00 	lds	r24, 0x0068
 290:	8a 17       	cp	r24, r26
 292:	e0 f0       	brcs	.+56     	; 0x2cc <_hw_swuart0_sync+0x6c>
 294:	ac 0f       	add	r26, r28
 296:	ac 0f       	add	r26, r28
 298:	8a 17       	cp	r24, r26
 29a:	c0 f4       	brcc	.+48     	; 0x2cc <_hw_swuart0_sync+0x6c>
 29c:	80 91 69 00 	lds	r24, 0x0069
 2a0:	a8 2f       	mov	r26, r24
 2a2:	a3 95       	inc	r26
 2a4:	a6 95       	lsr	r26
 2a6:	8a 0f       	add	r24, r26
 2a8:	86 52       	subi	r24, 0x26	; 38
 2aa:	80 93 68 00 	sts	0x0068, r24
 2ae:	8e b5       	in	r24, 0x2e	; 46
 2b0:	90 91 69 00 	lds	r25, 0x0069
 2b4:	89 0f       	add	r24, r25
 2b6:	8e bd       	out	0x2e, r24	; 46
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	80 93 67 00 	sts	0x0067, r24
 2be:	80 e4       	ldi	r24, 0x40	; 64
 2c0:	88 bf       	out	0x38, r24	; 56
 2c2:	f8 94       	cli
 2c4:	89 b7       	in	r24, 0x39	; 57
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	78 94       	sei
 2ca:	89 bf       	out	0x39, r24	; 57
 2cc:	cf 91       	pop	r28
 2ce:	d3 ce       	rjmp	.-602    	; 0x76 <_hw_swuart0_st99>

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
