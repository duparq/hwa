HW_DEVICE=atmega328p
hw_syshz=16000000
hw_swuart0_pin_rx=hw_pin_pd0
hw_swuart0_pin_tx=hw_pin_pd1
hw_swuart0_autosync=sync_5_1
hw_swuart0_counter=hw_counter1
hw_swuart0_counter_clk_div=1
hw_swuart0_counter_compare=compare0


build/out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000003e0  00000474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000474  2**0
                  ALLOC
  3 .stab         000010ec  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002679  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003bd9  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  88:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_5>:
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
  94:	80 91 84 00 	lds	r24, 0x0084
  98:	78 94       	sei
  9a:	90 91 85 00 	lds	r25, 0x0085
  9e:	af 93       	push	r26
  a0:	af b7       	in	r26, 0x3f	; 63
  a2:	af 93       	push	r26
  a4:	f6 9b       	sbis	0x1e, 6	; 30
  a6:	34 c1       	rjmp	.+616    	; 0x310 <_hw_swuart0_sync>
  a8:	48 99       	sbic	0x09, 0	; 9
  aa:	1a c0       	rjmp	.+52     	; 0xe0 <_hw_swuart0_st99>
  ac:	a0 91 68 00 	lds	r26, 0x0068
  b0:	ab 7f       	andi	r26, 0xFB	; 251
  b2:	a0 93 68 00 	sts	0x0068, r26
  b6:	a0 91 08 01 	lds	r26, 0x0108
  ba:	8a 0f       	add	r24, r26
  bc:	a0 91 09 01 	lds	r26, 0x0109
  c0:	9a 1f       	adc	r25, r26
  c2:	90 93 89 00 	sts	0x0089, r25
  c6:	80 93 88 00 	sts	0x0088, r24
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	80 93 07 01 	sts	0x0107, r24
  d0:	b1 9a       	sbi	0x16, 1	; 22
  d2:	f8 94       	cli
  d4:	80 91 6f 00 	lds	r24, 0x006F
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	78 94       	sei
  dc:	80 93 6f 00 	sts	0x006F, r24

000000e0 <_hw_swuart0_st99>:
  e0:	af 91       	pop	r26
  e2:	af bf       	out	0x3f, r26	; 63
  e4:	af 91       	pop	r26
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	18 95       	reti

000000ec <__vector_11>:
  ec:	ff 93       	push	r31
  ee:	ff b7       	in	r31, 0x3f	; 63
  f0:	ff 93       	push	r31
  f2:	f4 99       	sbic	0x1e, 4	; 30
  f4:	41 c0       	rjmp	.+130    	; 0x178 <_hw_swuart0_tx>
  f6:	78 94       	sei
  f8:	f9 b1       	in	r31, 0x09	; 9
  fa:	f0 fb       	bst	r31, 0
  fc:	f0 91 06 01 	lds	r31, 0x0106
 100:	f6 95       	lsr	r31
 102:	f7 f9       	bld	r31, 7
 104:	f0 93 06 01 	sts	0x0106, r31
 108:	f0 91 07 01 	lds	r31, 0x0107
 10c:	f1 50       	subi	r31, 0x01	; 1
 10e:	f0 93 07 01 	sts	0x0107, r31
 112:	da f0       	brmi	.+54     	; 0x14a <_hw_swuart0_rxeof>
 114:	21 f4       	brne	.+8      	; 0x11e <_hw_swuart0_next>
 116:	f0 91 06 01 	lds	r31, 0x0106
 11a:	f0 93 05 01 	sts	0x0105, r31

0000011e <_hw_swuart0_next>:
 11e:	ef 93       	push	r30
 120:	e0 91 0a 01 	lds	r30, 0x010A
 124:	f0 91 0b 01 	lds	r31, 0x010B
 128:	df 93       	push	r29
 12a:	d0 91 88 00 	lds	r29, 0x0088
 12e:	ed 0f       	add	r30, r29
 130:	d0 91 89 00 	lds	r29, 0x0089
 134:	fd 1f       	adc	r31, r29
 136:	df 91       	pop	r29
 138:	f0 93 89 00 	sts	0x0089, r31
 13c:	e0 93 88 00 	sts	0x0088, r30
 140:	ef 91       	pop	r30
 142:	ff 91       	pop	r31
 144:	ff bf       	out	0x3f, r31	; 63
 146:	ff 91       	pop	r31
 148:	18 95       	reti

0000014a <_hw_swuart0_rxeof>:
 14a:	fe b3       	in	r31, 0x1e	; 30
 14c:	f0 f9       	bld	r31, 0
 14e:	f0 62       	ori	r31, 0x20	; 32
 150:	f6 fd       	sbrc	r31, 6
 152:	f4 60       	ori	r31, 0x04	; 4
 154:	f0 64       	ori	r31, 0x40	; 64
 156:	fe bb       	out	0x1e, r31	; 30
 158:	f8 94       	cli
 15a:	f0 91 6f 00 	lds	r31, 0x006F
 15e:	fd 7f       	andi	r31, 0xFD	; 253
 160:	78 94       	sei
 162:	f0 93 6f 00 	sts	0x006F, r31
 166:	da 9a       	sbi	0x1b, 2	; 27
 168:	f8 94       	cli
 16a:	f0 91 68 00 	lds	r31, 0x0068
 16e:	f4 60       	ori	r31, 0x04	; 4
 170:	78 94       	sei
 172:	f0 93 68 00 	sts	0x0068, r31
 176:	d3 cf       	rjmp	.-90     	; 0x11e <_hw_swuart0_next>

00000178 <_hw_swuart0_tx>:
 178:	f0 91 06 01 	lds	r31, 0x0106
 17c:	f6 95       	lsr	r31
 17e:	18 f4       	brcc	.+6      	; 0x186 <_hw_swuart0_tx0>

00000180 <_hw_swuart0_tx1>:
 180:	78 94       	sei
 182:	59 9a       	sbi	0x0b, 1	; 11
 184:	02 c0       	rjmp	.+4      	; 0x18a <_hw_swuart0_txn>

00000186 <_hw_swuart0_tx0>:
 186:	78 94       	sei
 188:	59 98       	cbi	0x0b, 1	; 11

0000018a <_hw_swuart0_txn>:
 18a:	f0 93 06 01 	sts	0x0106, r31
 18e:	f0 91 07 01 	lds	r31, 0x0107
 192:	f1 50       	subi	r31, 0x01	; 1
 194:	f0 93 07 01 	sts	0x0107, r31
 198:	2a f0       	brmi	.+10     	; 0x1a4 <_hw_swuart0_txeof>
 19a:	19 f4       	brne	.+6      	; 0x1a2 <_hw_swuart0_txn+0x18>
 19c:	f3 e0       	ldi	r31, 0x03	; 3
 19e:	f0 93 06 01 	sts	0x0106, r31
 1a2:	bd cf       	rjmp	.-134    	; 0x11e <_hw_swuart0_next>

000001a4 <_hw_swuart0_txeof>:
 1a4:	f5 9a       	sbi	0x1e, 5	; 30
 1a6:	f8 94       	cli
 1a8:	f0 91 6f 00 	lds	r31, 0x006F
 1ac:	fd 7f       	andi	r31, 0xFD	; 253
 1ae:	78 94       	sei
 1b0:	f0 93 6f 00 	sts	0x006F, r31
 1b4:	f3 9a       	sbi	0x1e, 3	; 30
 1b6:	f4 98       	cbi	0x1e, 4	; 30
 1b8:	da 9a       	sbi	0x1b, 2	; 27
 1ba:	f8 94       	cli
 1bc:	f0 91 68 00 	lds	r31, 0x0068
 1c0:	f4 60       	ori	r31, 0x04	; 4
 1c2:	78 94       	sei
 1c4:	f0 93 68 00 	sts	0x0068, r31
 1c8:	aa cf       	rjmp	.-172    	; 0x11e <_hw_swuart0_next>

000001ca <main>:
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	83 bf       	out	0x33, r24	; 51
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
 1ce:	59 9a       	sbi	0x0b, 1	; 11
 1d0:	51 9a       	sbi	0x0a, 1	; 10
 1d2:	da 9a       	sbi	0x1b, 2	; 27
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
 1d4:	94 e0       	ldi	r25, 0x04	; 4
 1d6:	90 93 68 00 	sts	0x0068, r25
 1da:	80 93 6d 00 	sts	0x006D, r24
 1de:	80 93 81 00 	sts	0x0081, r24

  /*  Write this configuration into the hardware
   */
  hwa_commit();

  hw_enable_interrupts();
 1e2:	78 94       	sei

  /*  Wait for UART synchronization, then send the prompt
   */
  while ( !hw_stat(UART).synced )
 1e4:	f6 99       	sbic	0x1e, 6	; 30
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <main+0x22>
    hw_sleep();
 1e8:	88 95       	sleep
 1ea:	fc cf       	rjmp	.-8      	; 0x1e4 <main+0x1a>
  hw_write( UART, '$');
 1ec:	84 e2       	ldi	r24, 0x24	; 36
 1ee:	0e 94 57 01 	call	0x2ae	; 0x2ae <_hw_swuart0_putbyte>
  } buf ;

  if ( bcount == 0 ) {
    if ( byte == 'E' || byte == 'e' ) {
      buf.cmd = byte ;
      bcount++ ;
 1f2:	c1 e0       	ldi	r28, 0x01	; 1
    /*
     *  Main loop:
     *    put the MCU into sleep mode, an interrupt will awake it
     *    process incomming bytes
     */
    hw_sleep();
 1f4:	88 95       	sleep
    if ( hw_stat(UART).rxc ) {
 1f6:	f2 9b       	sbis	0x1e, 2	; 30
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <main+0x2a>
      /*
       *  MCU awakened by SWUART that has received a stop bit
       *  Process the received byte (clears rxc flag)
       */
      process( hw_read(UART) );
 1fa:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_hw_swuart0_getbyte>
      uint16_t          addr ;
      uint8_t           n ;
    } ;
  } buf ;

  if ( bcount == 0 ) {
 1fe:	e0 91 04 01 	lds	r30, 0x0104
 202:	e1 11       	cpse	r30, r1
 204:	09 c0       	rjmp	.+18     	; 0x218 <main+0x4e>
    if ( byte == 'E' || byte == 'e' ) {
 206:	98 2f       	mov	r25, r24
 208:	9f 7d       	andi	r25, 0xDF	; 223
 20a:	95 34       	cpi	r25, 0x45	; 69
 20c:	99 f7       	brne	.-26     	; 0x1f4 <main+0x2a>
      buf.cmd = byte ;
 20e:	80 93 00 01 	sts	0x0100, r24
      bcount++ ;
 212:	c0 93 04 01 	sts	0x0104, r28
 216:	ee cf       	rjmp	.-36     	; 0x1f4 <main+0x2a>
    }
  } else if ( bcount < 4 )
 218:	e4 30       	cpi	r30, 0x04	; 4
 21a:	48 f4       	brcc	.+18     	; 0x22e <main+0x64>
    buf.buf[bcount++] = byte ;
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	9e 0f       	add	r25, r30
 220:	90 93 04 01 	sts	0x0104, r25
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	e0 50       	subi	r30, 0x00	; 0
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	80 83       	st	Z, r24
 22c:	e3 cf       	rjmp	.-58     	; 0x1f4 <main+0x2a>
  else {
    bcount = 0 ;
 22e:	10 92 04 01 	sts	0x0104, r1
    if ( byte == '\n'
 232:	8a 30       	cpi	r24, 0x0A	; 10
 234:	91 f5       	brne	.+100    	; 0x29a <main+0xd0>
         && buf.addr < HW_DEVICE_EEPROM_SIZE ) {
 236:	80 91 01 01 	lds	r24, 0x0101
 23a:	90 91 02 01 	lds	r25, 0x0102
 23e:	81 15       	cp	r24, r1
 240:	24 e0       	ldi	r18, 0x04	; 4
 242:	92 07       	cpc	r25, r18
 244:	50 f5       	brcc	.+84     	; 0x29a <main+0xd0>
      if ( buf.cmd == 'E' )
 246:	20 91 00 01 	lds	r18, 0x0100
 24a:	25 34       	cpi	r18, 0x45	; 69
 24c:	41 f4       	brne	.+16     	; 0x25e <main+0x94>
        hw_write( hw_eeprom0, buf.addr, buf.n );
 24e:	20 91 03 01 	lds	r18, 0x0103
			      intptr_t mpe_ra, uint8_t mpe_bp,
			      intptr_t pe_ra, uint8_t pe_bp )
{
  /*  Assume EECR is 0, programming mode is 'Erase & write'
   */
  *(volatile uint16_t*)ar = a ;
 252:	92 bd       	out	0x22, r25	; 34
 254:	81 bd       	out	0x21, r24	; 33
  *(volatile uint8_t*)dr = v ;
 256:	20 bd       	out	0x20, r18	; 32
  *(volatile uint8_t*)mpe_ra |= (1U<<mpe_bp) ;
 258:	fa 9a       	sbi	0x1f, 2	; 31
  *(volatile uint8_t*)pe_ra |= (1U<<pe_bp) ;
 25a:	f9 9a       	sbi	0x1f, 1	; 31
 25c:	1c c0       	rjmp	.+56     	; 0x296 <main+0xcc>
      else {
        while ( buf.n-- ) {
 25e:	80 91 03 01 	lds	r24, 0x0103
 262:	9f ef       	ldi	r25, 0xFF	; 255
 264:	98 0f       	add	r25, r24
 266:	90 93 03 01 	sts	0x0103, r25
 26a:	88 23       	and	r24, r24
 26c:	a1 f0       	breq	.+40     	; 0x296 <main+0xcc>
          uint8_t byte = hw_read( hw_eeprom0, buf.addr );
 26e:	80 91 01 01 	lds	r24, 0x0101
 272:	90 91 02 01 	lds	r25, 0x0102
HW_INLINE uint8_t _hw_rdeeproma( intptr_t ar,
				 intptr_t cr, uint8_t cb,
				 intptr_t dr,
				 uint16_t a )
{
  *(volatile uint16_t*)ar = a ;
 276:	92 bd       	out	0x22, r25	; 34
 278:	81 bd       	out	0x21, r24	; 33
  *(volatile uint8_t*)cr |= (1<<cb) ;
 27a:	f8 9a       	sbi	0x1f, 0	; 31
  return *(volatile uint8_t*) dr ;
 27c:	80 b5       	in	r24, 0x20	; 32
          hw_write( UART, byte );
 27e:	0e 94 57 01 	call	0x2ae	; 0x2ae <_hw_swuart0_putbyte>
          buf.addr++ ;
 282:	80 91 01 01 	lds	r24, 0x0101
 286:	90 91 02 01 	lds	r25, 0x0102
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	90 93 02 01 	sts	0x0102, r25
 290:	80 93 01 01 	sts	0x0101, r24
 294:	e4 cf       	rjmp	.-56     	; 0x25e <main+0x94>
        }
      }
      hw_write( UART, '$' );
 296:	84 e2       	ldi	r24, 0x24	; 36
 298:	01 c0       	rjmp	.+2      	; 0x29c <main+0xd2>
      return ;
    }
    hw_write( UART, '!' );
 29a:	81 e2       	ldi	r24, 0x21	; 33
 29c:	0e 94 57 01 	call	0x2ae	; 0x2ae <_hw_swuart0_putbyte>
 2a0:	a9 cf       	rjmp	.-174    	; 0x1f4 <main+0x2a>

000002a2 <_hw_swuart0_getbyte>:
 2a2:	f2 9b       	sbis	0x1e, 2	; 30
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <_hw_swuart0_getbyte>
 2a6:	f2 98       	cbi	0x1e, 2	; 30
 2a8:	80 91 05 01 	lds	r24, 0x0105
 2ac:	08 95       	ret

000002ae <_hw_swuart0_putbyte>:
 2ae:	98 e0       	ldi	r25, 0x08	; 8

000002b0 <_hw_swuart0_putbits>:
 2b0:	2a d0       	rcall	.+84     	; 0x306 <_hw_swuart0_wait_ready>
 2b2:	f5 9b       	sbis	0x1e, 5	; 30
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <_hw_swuart0_putbits+0xa>
 2b6:	b1 9b       	sbis	0x16, 1	; 22
 2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <_hw_swuart0_putbits+0x6>
 2ba:	a0 91 68 00 	lds	r26, 0x0068
 2be:	ab 7f       	andi	r26, 0xFB	; 251
 2c0:	a0 93 68 00 	sts	0x0068, r26
 2c4:	80 93 06 01 	sts	0x0106, r24
 2c8:	83 e5       	ldi	r24, 0x53	; 83
 2ca:	8e bb       	out	0x1e, r24	; 30
 2cc:	90 93 07 01 	sts	0x0107, r25
 2d0:	f8 94       	cli
 2d2:	80 91 84 00 	lds	r24, 0x0084
 2d6:	90 91 85 00 	lds	r25, 0x0085
 2da:	78 94       	sei
 2dc:	59 98       	cbi	0x0b, 1	; 11
 2de:	a0 91 0a 01 	lds	r26, 0x010A
 2e2:	b0 91 0b 01 	lds	r27, 0x010B
 2e6:	53 97       	sbiw	r26, 0x13	; 19
 2e8:	8a 0f       	add	r24, r26
 2ea:	9b 1f       	adc	r25, r27
 2ec:	90 93 89 00 	sts	0x0089, r25
 2f0:	80 93 88 00 	sts	0x0088, r24
 2f4:	b1 9a       	sbi	0x16, 1	; 22
 2f6:	f8 94       	cli
 2f8:	80 91 6f 00 	lds	r24, 0x006F
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	78 94       	sei
 300:	80 93 6f 00 	sts	0x006F, r24
 304:	08 95       	ret

00000306 <_hw_swuart0_wait_ready>:
 306:	a0 91 6f 00 	lds	r26, 0x006F
 30a:	a1 fd       	sbrc	r26, 1
 30c:	fc cf       	rjmp	.-8      	; 0x306 <_hw_swuart0_wait_ready>
 30e:	08 95       	ret

00000310 <_hw_swuart0_sync>:
 310:	48 99       	sbic	0x09, 0	; 9
 312:	0d c0       	rjmp	.+26     	; 0x32e <_hw_swuart0_sync+0x1e>
 314:	80 93 88 00 	sts	0x0088, r24
 318:	90 93 89 00 	sts	0x0089, r25
 31c:	a0 91 0a 01 	lds	r26, 0x010A
 320:	a0 93 08 01 	sts	0x0108, r26
 324:	a0 91 0b 01 	lds	r26, 0x010B
 328:	a0 93 09 01 	sts	0x0109, r26
 32c:	d9 ce       	rjmp	.-590    	; 0xe0 <_hw_swuart0_st99>
 32e:	cf 93       	push	r28
 330:	bf 93       	push	r27
 332:	df 93       	push	r29
 334:	a0 91 88 00 	lds	r26, 0x0088
 338:	8a 1b       	sub	r24, r26
 33a:	80 93 0a 01 	sts	0x010A, r24
 33e:	b0 91 89 00 	lds	r27, 0x0089
 342:	9b 0b       	sbc	r25, r27
 344:	90 93 0b 01 	sts	0x010B, r25
 348:	dc 01       	movw	r26, r24
 34a:	aa 0f       	add	r26, r26
 34c:	bb 1f       	adc	r27, r27
 34e:	aa 0f       	add	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	a8 0f       	add	r26, r24
 354:	b9 1f       	adc	r27, r25
 356:	ec 01       	movw	r28, r24
 358:	22 96       	adiw	r28, 0x02	; 2
 35a:	d6 95       	lsr	r29
 35c:	c7 95       	ror	r28
 35e:	d6 95       	lsr	r29
 360:	c7 95       	ror	r28
 362:	ac 1b       	sub	r26, r28
 364:	bd 0b       	sbc	r27, r29
 366:	80 91 08 01 	lds	r24, 0x0108
 36a:	8a 17       	cp	r24, r26
 36c:	90 91 09 01 	lds	r25, 0x0109
 370:	9b 07       	cpc	r25, r27
 372:	80 f1       	brcs	.+96     	; 0x3d4 <_hw_swuart0_sync+0xc4>
 374:	ac 0f       	add	r26, r28
 376:	bd 1f       	adc	r27, r29
 378:	ac 0f       	add	r26, r28
 37a:	bd 1f       	adc	r27, r29
 37c:	8a 17       	cp	r24, r26
 37e:	9b 07       	cpc	r25, r27
 380:	48 f5       	brcc	.+82     	; 0x3d4 <_hw_swuart0_sync+0xc4>
 382:	80 91 0a 01 	lds	r24, 0x010A
 386:	90 91 0b 01 	lds	r25, 0x010B
 38a:	dc 01       	movw	r26, r24
 38c:	11 96       	adiw	r26, 0x01	; 1
 38e:	b6 95       	lsr	r27
 390:	a7 95       	ror	r26
 392:	8a 0f       	add	r24, r26
 394:	9b 1f       	adc	r25, r27
 396:	8b 52       	subi	r24, 0x2B	; 43
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	80 93 08 01 	sts	0x0108, r24
 39e:	90 93 09 01 	sts	0x0109, r25
 3a2:	80 91 88 00 	lds	r24, 0x0088
 3a6:	90 91 0a 01 	lds	r25, 0x010A
 3aa:	89 0f       	add	r24, r25
 3ac:	80 93 88 00 	sts	0x0088, r24
 3b0:	80 91 89 00 	lds	r24, 0x0089
 3b4:	90 91 0b 01 	lds	r25, 0x010B
 3b8:	89 1f       	adc	r24, r25
 3ba:	80 93 89 00 	sts	0x0089, r24
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	80 93 07 01 	sts	0x0107, r24
 3c4:	b1 9a       	sbi	0x16, 1	; 22
 3c6:	f8 94       	cli
 3c8:	80 91 6f 00 	lds	r24, 0x006F
 3cc:	82 60       	ori	r24, 0x02	; 2
 3ce:	78 94       	sei
 3d0:	80 93 6f 00 	sts	0x006F, r24
 3d4:	df 91       	pop	r29
 3d6:	bf 91       	pop	r27
 3d8:	cf 91       	pop	r28
 3da:	82 ce       	rjmp	.-764    	; 0xe0 <_hw_swuart0_st99>

000003dc <_exit>:
 3dc:	f8 94       	cli

000003de <__stop_program>:
 3de:	ff cf       	rjmp	.-2      	; 0x3de <__stop_program>
