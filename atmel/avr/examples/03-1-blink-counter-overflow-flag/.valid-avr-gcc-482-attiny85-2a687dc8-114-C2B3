HW_DEVICE="attiny85"
HW_SYSHZ="16000000"
PIN_LED="pb0"
COUNTER="counter0"
CLKDIV="64"
COUNTMODE="up_loop"
PERIOD="0.5"

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a1 36       	cpi	r26, 0x61	; 97
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	18 c0       	rjmp	.+48     	; 0x6e <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:
      /*
       *  Just 1 bit to be modified at C address < 0x40 (ASM address < 0x20): use
       *  instruction CBI or SBI
       */
      if ( wm & r->mvalue )
	*p |= wm ; /* sbi */
  40:	b8 9a       	sbi	0x17, 0	; 23
     */
    r->ovalue = ((r->ovalue & ~wm) | (r->mvalue & wm)) & ~rfm ;

    /*  Write new value
     */
    *p = r->ovalue | (rfm & r->mmask & r->mvalue) ;
  42:	83 e0       	ldi	r24, 0x03	; 3
  44:	8a bd       	out	0x2a, r24	; 42
  46:	8b e0       	ldi	r24, 0x0B	; 11
  48:	83 bf       	out	0x33, r24	; 51
  4a:	8a ef       	ldi	r24, 0xFA	; 250
  4c:	89 bd       	out	0x29, r24	; 41

    if ( rm == 0 )
      /*
       *  Nothing to be read, just write the new value
       */
      *p = v ;
  4e:	92 e0       	ldi	r25, 0x02	; 2
   */
  hwa_commit();

  static uint8_t n ;
  for(;;) {
    if ( hw_stat(COUNTER).overflow ) {
  50:	08 b6       	in	r0, 0x38	; 56
  52:	01 fe       	sbrs	r0, 1
  54:	fd cf       	rjmp	.-6      	; 0x50 <main+0x10>
  56:	98 bf       	out	0x38, r25	; 56
      hw_clear_irqf( COUNTER, overflow );
      n++ ;
  58:	80 91 60 00 	lds	r24, 0x0060
  5c:	8f 5f       	subi	r24, 0xFF	; 255
  5e:	80 93 60 00 	sts	0x0060, r24
      if ( n >= (uint8_t)(PERIOD / 2.0 / 0.001) ) {
  62:	89 3f       	cpi	r24, 0xF9	; 249
  64:	a8 f3       	brcs	.-22     	; 0x50 <main+0x10>
        n = 0 ;
  66:	10 92 60 00 	sts	0x0060, r1
    /*
     *  Just 1 bit to be written at C address < 0x40 (ASM address < 0x20): use
     *  sbi/cbi
     */
    if ( v )
      *p |= wm ; /* sbi */
  6a:	b0 9a       	sbi	0x16, 0	; 22
  6c:	f1 cf       	rjmp	.-30     	; 0x50 <main+0x10>

0000006e <_exit>:
  6e:	f8 94       	cli

00000070 <__stop_program>:
  70:	ff cf       	rjmp	.-2      	; 0x70 <__stop_program>
