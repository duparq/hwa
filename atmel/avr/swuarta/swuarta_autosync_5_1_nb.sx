
	;; -*- asm -*-

	;; Auto-synchronization for software UART, non-blocking.
	;;
	;; This code is designed to be called from the START ISR.
	;;
	;; Baudrate is determined by measuring the low-level durations of a
	;; 5 bits low / 1 bit low sequence.
	;;
	;; Consecutive low-level durations t1 and t2 are measured.
	;; When 4.75×t2 <= t1 <= 5.25×t2, synchronization is done.
	;;
	;; The 'count' value of the UART counter is used to measure the
	;; durations and interrupts are disabled for a very short time.
	;;
	;; ** LIMITS **
	;;
	;; Keep in mind that with an 8-bit counter, the duration of 5.25 bits
	;; must be < 256 counting units and that is used to compute the
	;; duration of a single bit. So, the duration of one bit cannot exceed
	;; 48 counting units. That also means that the precision of the timing
	;; will be ~2% (1/48) at most.
	;;
	;; For example, if HW_SYSHZ is 8e6 and the baudrate is 100 kbps,
	;; one bit lasts 80 cycles. Then 5.25 bits last 420 cycles. The counter
	;; must be prescaled. With a prescaler of 2, 1 bit lasts 40 counting
	;; units.

#if !CHECK_START_EDGE
#  error Autosync needs to detect both falling and rising edges
#endif

#if CLK_DIV > 8 || CLK_DIV & (CLK_DIV-1) != 0
#  error Autosync does not support this clk_div
#endif

#if COUNT_BN != 8
#  warning This routine is not tested with 16-bit counters.
#endif

	;; Use existant registers to store the date of the falling
	;; edge and the duration of the low level.
	;;
	t1l = dt0
	t1h = dtn
	t2l = data		; Also used to store the date of the last falling edge.
	t2h = shift		;

	;; [R25]:R24 contains the date of the edge.
	;; R24, [R25], R26, and SREG are already stacked.
	;;
	.section	.text.LABEL(autosync_5_1_nb),"ax",@progbits
LABEL(autosync_5_1_nb):
	CYCLES=CY_SYNC0

	XSBIC	R26, RXD_AP	; Jump if RXD is high
	rjmp	1f

	;; RXD is low.
	;;   Store the date of the edge.
	;;
	sts	t2l, R24
#  if COUNT_BN==16
	sts	t2h, R25
#  endif
	rjmp	LABEL(st99)


1:	;; RXD is high
	;;
#  if COUNT_BN==8
	push	R25
#  endif
	push	R27
	push	R28
	push	R29
	push	R30
	push	R31

	;; Compute the duration of the low level t2 in R25:R24.
	;;   We use 16-bit arithmetic even with 8-bit counter because
	;;   we're going to multiply.
	;;
	lds	R26, t2l
	sub	R24, R26
#  if COUNT_BN==8
	ldi	R25, 0
	ldi	R27, 0
#  else
	lds	R27, t2h
	sbc	R25, R27
#  endif

	;; Compute R27:R26 = 5×t2
	;; 
	movw	R26, R24	; R27:R26 = t2
	lsl	R26
	rol	R27
	lsl	R26
	rol	R27
	add	R26, R24
	adc	R27, R25	; R27:R26 = 5×t2

	;; Compute R31:R30 = dt = 0.25×t2
	;; 
	movw	R30, R24	; R31:R30 = t2
	adiw	R30, 1		; round
	lsr	R31		;
	ror	R30		; R31:R30 = t2/2
	lsr	R31		;
	ror	R30		; R31:R30 = t2/4

	;; Compute R27:R26 = 5×t2 - dt
	;; 
	sub	R26, R30	;
	sbc	R27, R31	;

	;; Load last measure: t1
	;; 
	lds	R28, t1l
	lds	R29, t1h

	;; Check the lower limit
	;;
	cp	R28, R26	; if ( t1 < 5×t2 - dt )
	cpc	R29, R27
	brcc	2f

	;; Need another sample.
	;; 
8:	sts	t1l, R24	; Shift t1 <- t2
	sts	t1h, R25	;

9:	pop	R31
	pop	R30
	pop	R29
	pop	R28
	pop	R27
#  if COUNT_BN==8
	pop	R25
#  endif

	rjmp	LABEL(st99)

	;; Compute R27:R26 = 5×t2 + dt
	;;
2:	add	R26, R30	;
	adc	R27, R31	; R27:R26 = 5×t2
	add	R26, R30	;
	adc	R27, R31	; R27:R26 = 5×t2 + dt

	;; Check upper limit
	;; 
	cp	R28, R26	; if ( t1 > 5×t2 + dt )
	cpc	R29, R27	;   then t1 is too high
	brcc	8b		;   need to get another sample

	;; Compute dtn
	;;
	sub	R26, R30
	sbc	R27, R31	; R27:R26 = 5×t2
	sub	R26, R24
	sbc	R27, R25	; R27:R26 = 5×t2 - t2 = 4×t2 (counting units)
	movw	R24, R26	; R25:R24 = 4×t2

#if CLK_DIV == 8
	lsl	R24
	rol	R25
#endif
#if CLK_DIV < 4
	add	R24, CLK_DIV/2
	adc	R25, 0
	lsr	R25
	ror	R24
#endif
#if CLK_DIV < 2
	lsr	R25
	ror	R24
#endif
	;; Set baudrate (CPU clocks units)
	;;
	rcall	LABEL(set_dt)

	;; Start a fake receiving to ensure that the UART will not transmit
	;; before the end of the synchronization byte.
	;;
	XLD	R24, count+0
	lds	R25, dtn+0
	add	R24, R25
	XST	comp+0, R24
#if COUNT_BN==16
	XLD	R24, count+1
	lds	R25, dtn+1
	adc	R24, R25
	XST	comp+1, R24
#endif
	XCBAI	R26, START_IE	; Disable START
	ldi	R26, 8		; 8 data bits to receive
	sts	nbit, R26	;
	XCIF	R26, MATCH_IF	; Clear compare-match IRQ flag
	XSBAI	R26, MATCH_IE	; Enable compare-match interrupts

	rjmp	9b
