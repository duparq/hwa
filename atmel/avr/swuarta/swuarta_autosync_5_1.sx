
	;; -*- asm -*-

	;; Auto-synchronization for software UART
	;;
	;; This code is designed to be executed from the START ISR.
	;;
	;; Baudrate is determined by measuring the low-level durations of a
	;; 5 bits low / 1 bit low sequence.
	;;
	;; Consecutive low-level durations t1 and t2 are measured.
	;; When 4.75×t2 <= t1 <= 5.25×t2, synchronization is done.

	;; Limits
	;;
	;; Using only 8-bit values, the duration of 4.75 bits low must be < 256
	;; cycles, i.e. 54 cycles / bit and the minimum baudrate is 18 kbsp /
	;; CPU MHz. Such a baudrate / syshz ratio is not affordable, so we do
	;; measures using 16-bit software values.

#if !CHECK_START_EDGE
#  error Autosync needs to detect both falling and rising edges
#endif

#if CLK_DIV != 1 && CLK_DIV != 8
#  error Autosync does not support this clk_div
#endif

#if COUNT_BN != 8
#  warning This routine is not optimized and not tested with 16-bit counters. Try an older version.
#endif

	;; Start date (value of count) is stored in [R25:]R24
	;; R24, [R25], R26, and SREG are pushed
	;;
	.section	.text.LABEL(autosync_5_1),"ax",@progbits
LABEL(autosync_5_1):
	CYCLES=CY_SYNC0

	XSBIC	R26, RXD_AP
	rjmp	LABEL(st99)

	CYCLES=CYCLES+1		; XSBIC did skip the 1 word rjmp

	;;
	;; Low level
	;;

	;; Use existant registers to store measure of low level duration
	;;
	measl = DATA(dt0)
	meash = DATA(dtn)

	push	R27		; [2]
	push	R28		; [2]
	CYCLES=CYCLES+4

	XCB	R26, START_IE	;	Disable START interrupts

	CYCLES=CYCLES+3	; +3 cycles for ldi/ldi/cli below
	ldi	R26, lo8((CYCLES+3)/5-1)
	ldi	R27, hi8((CYCLES+3)/5-1)

	;; Measure low level duration in 5 CPU cycles units in t2 = R26:R27
	;;
	cli
2:	adiw	R26, 1		; [2]
	XSBIS	R24, RXD_AP	; [1/2]
	rjmp	2b		; [2]
	sei

#	if COUNT_BN==8
	push	R25		; [2]
	CYCLES=CYCLES+2
#	endif

	push	R29
	push	R30
	push	R31

	;; Compute R29:R28 = 5×t2
	;;
	movw	R28, R26	; R29:R28 = t2
	lsl	R28		;
	rol	R29		; R29:R28 = 2×t2
	lsl	R28		;
	rol	R29		; R29:R28 = 4×t2
	add	R28, R26	;
	adc	R29, R27	; R29:R28 = 5×t2

	;; Compute R31:R30 = dt = 0.25×t2
	;;
	movw	R30, R26	; R31:R30 = t2
	adiw	R30, 2		; round
	lsr	R31		;
	ror	R30		; R31:R30 = t2/2
	lsr	R31		;
	ror	R30		; R31:R30 = t2/4

	;; Compute R28:R29 = 5×t2 - dt
	;;
	sub	R28, R30
	sbc	R29, R31

	;; Load last measure: t1 in R25:R24
	;;
	lds	R24, measl
	lds	R25, meash

	;; Test lower limit
	;;
	cp	R24, R28
	cpc	R25, R29
	brcc	2f		; Branch if t1 >= 5×t2-dt

	;; Need another sample.

8:	sts	measl, R26	; Store measure
	sts	meash, R27

	XCIF	R26, START_IF	; Clear START IRQ flag
	XSBAI	R26, START_IE	; Enable START interrupts

9:	pop	R31
	pop	R30
	pop	R29
#	if COUNT_BN==8
	pop	R25
#	endif
	pop	R28
	pop	R27

	rjmp	LABEL(st99)

	;; Compute R29:R28 = 5×t2 + dt
	;;
2:	add	R28, R30	;
	adc	R29, R31	; R29:R28 = 5×t2
	add	R28, R30	;
	adc	R29, R31	; R29:R28 = 5×t2 + dt

	;; Test upper limit
	;;
	cp	R28, R24
	cpc	R29, R25
	brcs	8b		; Branch if t1 > 5×t2+dt

	;; t1 = 5×t2 in units of 5 CPU cycles = t2 in units of 1 CPU cycle

#if CLK_DIV == 8
	;;  Conform to CLK_DIV: R25:R24 = dtn/8
	;;
	ldi	R26, 3
2:	lsr	R24
	ror	R25
	dec	R26
	brne	2b
#endif

	;; Set baudrate registers
	;;
	rcall	LABEL(set_dt)

	;; Start a fake receiving to ensure that the UART will not transmit
	;; before the end of the synchronization byte.
	;;
	ldi	R26, 8		; 8 data bits to receive
	sts	nbit, R26	;
	XCIF	R26, MATCH_IF	; Clear compare-match IRQ flag
	XSBAI	R26, MATCH_IE	; Enable compare-match interrupts

	rjmp	9b
