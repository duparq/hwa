
	;; -*- asm -*-

	;; Extended instructions

#define	SREG		HW_ADDRESS((core0, sreg))

	CYCLES=0

	;; in/lds
	;;
	.macro XLD reg a
	.if \a < 0x40
	in	\reg, \a
	CYCLES=CYCLES+1
	.else
	lds	\reg, \a+0x20
	CYCLES=CYCLES+2
	.endif
	.endm


	;; out/sts
	;; 
	.macro XST a reg
	.if \a < 0x40
	out	\a, \reg
	CYCLES=CYCLES+1
	.else
	sts	\a+0x20, \reg
	CYCLES=CYCLES+2
	.endif
	.endm


	;; Clear interrupt flag by writing 1 into it
	;; 
	.macro XCIF reg a b
	.if \a < 0x20
	sbi	\a, \b		; [2]
	CYCLES=CYCLES+2
	.else
	ldi	\reg, 1<<\b	; [1]
	XST	\a, \reg
	CYCLES=CYCLES+1
	.endif
	.endm


	;; Clear one bit
	;;
	.macro XCB reg a b
	.if \a < 0x20
	cbi	\a, \b
	CYCLES=CYCLES+2
	.else
	XLD	\reg, \a
	andi	\reg, ~(1<<\b)
	XST	\a, \reg
	CYCLES=CYCLES+1
	.endif
	.endm


	;; Clear one bit (atomic with SREG saved)
	;;
	.macro XCBAS r1 r2 a b
	.if \a < 0x20
	cbi	\a, \b
	CYCLES=CYCLES+2
	.else
	in	\r1, SREG	; [1]
	cli			; [1]
	XLD	\r2, \a
	andi	\r2, ~(1<<\b)	; [1]
	out	SREG, \r1	; [1]
	XST	\a, \r2
	CYCLES=CYCLES+4
	.endif
	.endm


	;; Clear one bit (atomic with cli/sei)
	;;
	.macro XCBAI r1 a b
	.if \a < 0x20
	cbi	\a, \b
	CYCLES=CYCLES+2
	.else
	cli			; [1]
	XLD	\r1, \a
	andi	\r1, ~(1<<\b)	; [1]
	sei			; [1]
	XST	\a, \r1
	CYCLES=CYCLES+3
	.endif
	.endm


	;; Set one bit
	;; 
	.macro XSB reg a b
	.if \a < 0x20
	sbi	\a, \b		; [2]
	CYCLES=CYCLES+2
	.else
	XLD	\reg, \a
	ori	\reg, 1<<\b	; [1]
	XST	\a, \reg
	CYCLES=CYCLES+1
	.endif
	.endm


	;; Set one bit (atomic with SREG saved)
	;; 
	.macro XSBAS r1 r2 a b
	.if \a < 0x20
	sbi	\a, \b
	CYCLES=CYCLES+2
	.else
	in	\r1, SREG
	cli
	XLD	\r2, \a
	ori	\r2, 1<<\b
	out	SREG, \r1
	XST	\a, \r2
	CYCLES=CYCLES+4
	.endif
	.endm


	;; Set one bit (atomic with cli/sei)
	;; 
	.macro XSBAI r a b
	.if \a < 0x20
	sbi	\a, \b		; [2]
	CYCLES=CYCLES+2
	.else
	cli			; [1]
	XLD	\r, \a
	ori	\r, 1<<\b	; [1]
	sei			; [1]
	XST	\a, \r
	CYCLES=CYCLES+3
	.endif
	.endm


	;; XSBIS
	;; 
	.macro XSBIS reg a b
	.if \a < 0x20
	sbis	\a, \b
	.else
	XLD	\reg, \a
	sbrs	\reg, \b
	.endif
	CYCLES=CYCLES+1
	.endm

	;; XSBIC
	;; 
	.macro XSBIC reg a b
	.if \a < 0x20
	sbic	\a, \b
	.else
	XLD	\reg, \a
	sbrc	\reg, \b
	.endif
	CYCLES=CYCLES+1
	.endm
