
#  -*- Makefile -*-


#  Disassemble binary output file
#
.PHONY: disassemble
disassemble:
	@avr-objdump -m avr:5 -b binary -D $(OUT).bin


#  Show device fuse values
#
.PHONY: show-fuses
show-fuses: $(INC_HWA)
#	@echo "RULE: $@: $^"
	@printf "FUSE_EB=0x%02X  FUSE_HB=0x%02X  FUSE_LB=0x%02X\n" \
		$$(($$(echo $(DEVICE_FUSE_EB)))) \
		$$(($$(echo $(DEVICE_FUSE_HB)))) \
		$$(($$(echo $(DEVICE_FUSE_LB))))


#  Validate a project: store the configuration and the disassembly output in a
#  file named .valid+device+CRC32+size+CRC
#
.PHONY: validate
validate: $(OUT).cfg $(OUT).bin #$(OUT).ccversion
#	@echo RULE: $@: $^
	@if python -V >/dev/null 2>&1 ; then						\
	  set -e									;\
	  S_CRC=$$($(diabolo) --crc32 $(OUT).cfg | awk '{print $1}' )			;\
	  O_CRC=$$($(diabolo) -q -m $(DEVICE) --crc $(OUT).bin)				;\
	  O_SIZE=$$($(diabolo) -q -m $(DEVICE) --size $(OUT).bin)			;\
	  CCVERSION=$$($(CC) --version	\
	   | awk 'NR==1 {x=match($$3,/([0-9]+)\.([0-9]+)\.([0-9]+)/,m);	\
	          if(x!=0){print "$(CC)-"m[1]m[2]m[3]}}')				;\
	  rm -f .valid-$${CCVERSION}-$(DEVICE)-$$S_CRC-*				;\
	  cp $(OUT).cfg .valid-$${CCVERSION}-$(DEVICE)-$$S_CRC-$$O_SIZE-$$O_CRC			;\
	  $(ODUMP) -d $(OUT).elf >>.valid-$${CCVERSION}-$(DEVICE)-$$S_CRC-$$O_SIZE-$$O_CRC	;\
	  echo Validation: .valid-$${CCVERSION}-$(DEVICE)-$$S_CRC-$$O_SIZE-$$O_CRC	;\
	else										\
	  echo "Python is required to validate the application."			;\
	fi
