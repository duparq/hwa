
	;; -*- asm -*-

	;; in/lds
	;;
	.macro XLD reg a
	.if \a < 0x40
	in	\reg, \a
	;; CYCLES=CYCLES+1
	.else
	lds	\reg, \a+0x20
	;; CYCLES=CYCLES+2
	.endif
	.endm


	;; out/sts
	;; 
	.macro XST a reg
	.if \a < 0x40
	out	\a, \reg
	;; CYCLES=CYCLES+1
	.else
	sts	\a+0x20, \reg
	;; CYCLES=CYCLES+2
	.endif
	.endm


	;; Clear flag by writing 1 into it
	;; 
	.macro XCF reg a b
	.if \a < 0x20
	sbi	\a, \b		; [2]
;;	CYCLES=CYCLES+2
	.else
	ldi	\reg, 1<<\b	; [1]
	XST	\a, \reg
;;	CYCLES=CYCLES+1
	.endif
	.endm


	;; Clear one bit
	;;
	.macro XCB reg a b
	.if \a < 0x20
	cbi	\a, \b
;;	CYCLES=CYCLES+2
	.else
	XLD	\reg, \a
	andi	\reg, ~(1<<\b)
	XST	\a, \reg
;;	CYCLES=CYCLES+1
	.endif
	.endm


	;; Clear one bit (atomic)
	;;
	.macro XCBA reg a b
	.if \a < 0x20
	cbi	\a, \b
;;	CYCLES=CYCLES+2
	.else
	cli
	XLD	\reg, \a
	andi	\reg, ~(1<<\b)
	sei
	XST	\a, \reg
;;	CYCLES=CYCLES+3
	.endif
	.endm


	;; Set one bit
	;; 
	.macro XSB reg a b
	.if \a < 0x20
	sbi	\a, \b
;;	CYCLES=CYCLES+2
	.else
	XLD	\reg, \a
	ori	\reg, 1<<\b
	XST	\a, \reg
;;	CYCLES=CYCLES+1
	.endif
	.endm


	;; Set one bit (atomic)
	;; 
	.macro XSBA reg a b
	.if \a < 0x20
	sbi	\a, \b
;;	CYCLES=CYCLES+2
	.else
	cli
	XLD	\reg, \a
	ori	\reg, 1<<\b
	sei
	XST	\a, \reg
;;	CYCLES=CYCLES+3
	.endif
	.endm


	;; XSBIS
	;; 
	.macro XSBIS reg a b
	.if \a < 0x20
	sbis	\a, \b
	.else
	XLD	\reg, \a
	sbrs	\reg, \b
	.endif
	.endm


	;; XSBIC
	;; 
	.macro XSBIC reg a b
	.if \a < 0x20
	sbic	\a, \b
	.else
	XLD	\reg, \a
	sbrc	\reg, \b
	.endif
	.endm

	;; XJMP
	;; 
	.macro XJMP addr
	.if \addr <= 4096
	rjmp	\addr
	.else
	jmp	\addr
	.endif
	.endm
