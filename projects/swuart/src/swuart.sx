
	;; -*- asm -*-

#define HW_OEM
#include <hwa.h>

	;; Pins used
	;;
	SWUART_TX = 0
#if defined SWUART_PIN_TX
	SWUART_TX = 1
	TXDPORT   = hw_ra(hw_ctr(hw_io(SWUART_PIN_TX)), port)
	TXDPIN    = hw_ra(hw_ctr(hw_io(SWUART_PIN_TX)), pin)
	TXDDR     = hw_ra(hw_ctr(hw_io(SWUART_PIN_TX)), ddr)
	TXDBIT    = hw_bp(hw_io(SWUART_PIN_TX))
#endif

	SWUART_RX = 0
#if defined SWUART_PIN_RX
	SWUART_RX = 1
	RXDPORT   = hw_ra(hw_ctr(hw_io(SWUART_PIN_RX)), port)
	RXDPIN    = hw_ra(hw_ctr(hw_io(SWUART_PIN_RX)), pin)
	RXDDR     = hw_ra(hw_ctr(hw_io(SWUART_PIN_RX)), ddr)
	RXDBIT    = hw_bp(hw_io(SWUART_PIN_RX))
#endif

	;; Wether we need to check the edge that triggered the start condition
	;; 
#if hw_eq(SWUART_PIN_RX, hw_pin_int0) || hw_eq(SWUART_PIN_RX, hw_pin_ain1)
#  define CHECK_START_EDGE 0
#else
#  define CHECK_START_EDGE 1
#endif


	;; Debugging options
	;; 
#if defined SWUART_PIN_DBG
	DBG       = 1
	DBGPORT   = hw_ra(hw_ctr(hw_io(SWUART_PIN_DBG)), port)
	DBGPIN    = hw_ra(hw_ctr(hw_io(SWUART_PIN_DBG)), pin)
	DBGDDR    = hw_ra(hw_ctr(hw_io(SWUART_PIN_DBG)), ddr)
	DBGBIT    = hw_bp(hw_io(SWUART_PIN_DBG))
#else
	DBG       = 0
	DBGPORT   = 0
#endif
	DBG_SYNC1     = DBG && 0
	DBG_SYNC2     = DBG && 0
	DBG_SYNC3     = DBG && 0
	DBG_SYNC4     = DBG && 0

	DBG_ISR_BIT   = DBG && 0
	DBG_BIT       = DBG && 0

	DBG_RXSTART   = DBG && 0
	DBG_RXSTART2  = DBG && 0
	DBG_RXBIT     = DBG && 0
	DBG_RXDATA    = DBG && 0
	DBG_RXEOF     = DBG && 0

	DBG_TXSTART   = DBG && 0
	DBG_TXBIT     = DBG && 0
	DBG_TXEOF     = DBG && 0

	DBG_GETBYTE   = DBG && 0
	DBG_PUTBYTE   = DBG && 0
	DBG_WAIT      = DBG && 0
	DBG_WAITIDLE  = DBG && 0
	DBG_WAITSTART = DBG && 0
	DBG_WAITREADY = DBG && 0


#if defined SWUART_CALLBACK || defined SWUART_CALLBACK_PTR
	HAS_CALLBACK = 1
#else
	HAS_CALLBACK = 0
#endif

#if defined SWUART_CALLBACK
	CALLBACK = 1
	.global	SWUART_CALLBACK
	cb = SWUART_CALLBACK
#else
	CALLBACK = 0
#endif

#if defined SWUART_CALLBACK_PTR
	CALLBACK_PTR = 1
	.global	SWUART_CALLBACK_PTR
	cbptr = SWUART_CALLBACK_PTR
#else
	CALLBACK_PTR = 0
#endif

	;; Width of the COUNT register in bits
	;; 
#define COUNT_BN		hw_bn(SWUART_COUNTER, count)


	;; Width of MATCH register in bits
	;; 
	MATCH_BN  = COUNT_BN
#if defined SWUART_MATCH_BN
	MATCH_BN  = SWUART_MATCH_BN
#endif

	.if COUNT_BN != MATCH_BN
	.fail "COUNT_BN != MATCH_BN is not handled yet"
	.endif

	;; Counter registers
	;; 
#define psc_syshz		1
#define psc_syshz_div_8		8
#define psc_syshz_div_32	32
#define psc_syshz_div_64	64
#define psc_syshz_div_256	256

#if !defined SWUART_COUNTER_CLOCK
#  error SWUART_COUNTER_CLOCK undefined
#endif

	PSC     = HW_G2(psc, SWUART_COUNTER_CLOCK)
	COUNT   = hw_ra(SWUART_COUNTER, count)
	MATCH	= hw_ra(SWUART_COUNTER, SWUART_COUNTER_MATCH)
	COUNTL  = COUNT+0
	COUNTH  = COUNT+1
	MATCHL  = MATCH+0
	MATCHH  = MATCH+1


#define MATCH_IF_RA	hw_ra(hw_irqf(SWUART_COUNTER, SWUART_COUNTER_MATCH))
#define MATCH_IF_BP	hw_bp(hw_irqf(SWUART_COUNTER, SWUART_COUNTER_MATCH))

#define MATCH_IE_RA	hw_ra(hw_irqe(SWUART_COUNTER, SWUART_COUNTER_MATCH))
#define MATCH_IE_BP	hw_bp(hw_irqe(SWUART_COUNTER, SWUART_COUNTER_MATCH))

	;; Internal flags
	;;
	FLAGS   = GPIOR0
	F_RXTX  = 0		; 0==RX, 1==TX
	F_WIBTX = 1		; 1: need to wait match before tx
	;; F_NORX  = 2		; 1: do not return to rx mode after tx


#include "swuart-xinstr.sx"

#if defined SWUART_PIN_RX

#define START_IE	hw_ra(hw_irqe(SWUART_PIN_RX)), hw_bp(hw_irqe(SWUART_PIN_RX))
#define START_IF	hw_ra(hw_irqf(SWUART_PIN_RX)), hw_bp(hw_irqf(SWUART_PIN_RX))

	;; Enable start interrupt
	;; 
	.macro enable_start reg
	XCF	\reg, START_IF
	XSBA	\reg, START_IE
	.endm

	;; Disable start interrupt
	;; 
	.macro disable_start reg
	XCBA	\reg, START_IE
	.endm


	;; Connect the ISR to the proper interrupt vector
	;;
	HW_ISR(SWUART_PIN_RX) = isr_start
#endif /* defined SWUART_PIN_RX */


#if defined SWUART_COUNTER
#  include "swuart-tc.sx"
#else
#  include "swuart-fsw.sx"
#endif


#if defined SWUART_PIN_RX
	
	;; Synchronization routines

#if 0 && SWUART_AUTOBAUD == 5
	.global swuart_sync
	swuart_sync = sync5x
#include "swuart-sync-5x.s"
#endif

	.global swuart_sync_div
	swuart_sync_div = syncd
	.section	.text.swuart_sync_div,"ax",@progbits
syncd:
#include "swuart-sync-div.sx"
	ret

	.section	.text.swuart_sync_chk2,"ax",@progbits
	.global	swuart_sync_chk2
	swuart_sync_chk2 = chksync2
chksync2:
#include "swuart-sync-chk2.sx"

	.section	.text.swuart_sync_chk3,"ax",@progbits
	.global	swuart_sync_chk3
	swuart_sync_chk3 = chksync3
chksync3:
#include "swuart-sync-chk3.sx"

	.global swuart_sync_10_1
	swuart_sync_10_1 = sync_10_1
	.section	.text.swuart_sync_10_1,"ax",@progbits
sync_10_1:
#include "swuart-sync-10-1.sx"
	ret
#endif /* defined SWUART_PIN_RX */


#include "swuart-set-dt.sx"
