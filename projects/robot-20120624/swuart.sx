
	;; -*- asm -*-

#include "hwa.h"
#include "swuart.h"


	;; Pins used
	;;
#if defined SWUART_PIN_TX
	SWUART_TX = 1
	TXDPORT   = HW_ADDR(HW_GPIOPORT(SWUART_PIN_TX), port)
	TXDPIN    = HW_ADDR(HW_GPIOPORT(SWUART_PIN_TX), pin)
	TXDDR     = HW_ADDR(HW_GPIOPORT(SWUART_PIN_TX), ddr)
	TXDBIT    = HW_GPIOPIN(SWUART_PIN_TX)
#else
	SWUART_TX = 0
#endif

#if defined SWUART_PIN_RX
	SWUART_RX = 1
	RXDPORT   = HW_ADDR(HW_GPIOPORT(SWUART_PIN_RX), port)
	RXDPIN    = HW_ADDR(HW_GPIOPORT(SWUART_PIN_RX), pin)
	RXDDR     = HW_ADDR(HW_GPIOPORT(SWUART_PIN_RX), ddr)
	RXDBIT    = HW_GPIOPIN(SWUART_PIN_RX)
#else
	SWUART_RX = 0
#endif

#if defined SWUART_PIN_DBG
	DBG       = 1
	DBGPORT   = HW_ADDR(HW_GPIOPORT(SWUART_PIN_DBG), port)
	DBGPIN    = HW_ADDR(HW_GPIOPORT(SWUART_PIN_DBG), pin)
	DBGDDR    = HW_ADDR(HW_GPIOPORT(SWUART_PIN_DBG), ddr)
	DBGBIT    = HW_GPIOPIN(SWUART_PIN_DBG)
#else
	DBG       = 0
	DBGPORT   = 0
#endif


#if defined SWUART_CALLBACK || defined SWUART_CALLBACK_PTR
	HAS_CALLBACK = 1
#else
	HAS_CALLBACK = 0
#endif

#if defined SWUART_CALLBACK
	CALLBACK = 1
	.global	SWUART_CALLBACK
	cb = SWUART_CALLBACK
#else
	CALLBACK = 0
#endif

#if defined SWUART_CALLBACK_PTR
	CALLBACK_PTR = 1
	.global	SWUART_CALLBACK_PTR
	cbptr = SWUART_CALLBACK_PTR
#else
	CALLBACK_PTR = 0
#endif

#define REGMATCH_A		ocra
#define REGMATCH_B		ocrb
#define R_MATCH			HW_G2(REGMATCH, SWUART_TIMER_MATCH)

#define BITMATCH_A		1
#define BITMATCH_B		2
#define XMATCH			HW_G2(BITMATCH, SWUART_TIMER_MATCH)

#define COUNTW_255		8
#define COUNTW_65535		16
#define COUNTW			HW_G2(COUNTW, hw_maxcount(SWUART_TIMER))

#define PSC_SYSHZ		1
#define PSC_SYSHZ_DIV_8		8
#define PSC_SYSHZ_DIV_64	64
#define PSC_SYSHZ_DIV_256	256


	PSC     = HW_G2(PSC, SWUART_TIMER_CLKHZ)
	COUNT   = HW_ADDR(SWUART_TIMER, count)
	MATCH   = HW_ADDR(SWUART_TIMER, R_MATCH)
	COUNTL  = COUNT
	COUNTH  = COUNTL+1
	MATCHL  = MATCH
	MATCHH  = MATCHL+1


#ifndef SWUART_MATCHW
	MATCHW  = COUNTW
#else
	MATCHW  = SWUART_MATCHW
#endif

	MATCHFLG = HW_ADDR(SWUART_TIMER, ifr)
	MATCHENB = HW_ADDR(SWUART_TIMER, imsk)
	STARTFLG = HW_ADDR(core, gifr)
	STARTENB = HW_ADDR(core, gimsk)


	;; Internal flags
	;;
	FLAGS   = GPIOR0
	F_RXTX  = 0		; 0==RX, 1==TX
	F_WIBTX = 1		; 1: need to wait timer match before tx
	;; F_NORX  = 2		; 1: do not return to rx mode after tx


#if HW_G2(HW_VECTOR, SWUART_PIN_RX) == HW_VECTOR_pinchange_PCINT0 \
    || HW_G2(HW_VECTOR, SWUART_PIN_RX) == HW_VECTOR_pinchange_PCINT1
	CHECK_START_EDGE = 1
#else
	CHECK_START_EDGE = 0
#endif


#if defined SWUART_TIMER
#  include "swuart-tc-macros-start.sx"
#  include "swuart-tc.s"
#  include "swuart-tc-wait-rxidle.s"
#else
#  include "swuart-fsw.s"
#endif

#include "swuart-sync.sx"
#include "swuart-set-dt.s"
